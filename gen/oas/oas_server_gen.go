// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ActionAcceptNewTaskMyNameActionTaskNewPost implements action_accept_new_task_my__name__action_task_new_post operation.
	//
	// Accepting a new task.
	//
	// POST /my/{name}/action/task/new
	ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, params ActionAcceptNewTaskMyNameActionTaskNewPostParams) (ActionAcceptNewTaskMyNameActionTaskNewPostRes, error)
	// ActionBuyBankExpansionMyNameActionBankBuyExpansionPost implements action_buy_bank_expansion_my__name__action_bank_buy_expansion_post operation.
	//
	// Buy a 20 slots bank expansion.
	//
	// POST /my/{name}/action/bank/buy_expansion
	ActionBuyBankExpansionMyNameActionBankBuyExpansionPost(ctx context.Context, params ActionBuyBankExpansionMyNameActionBankBuyExpansionPostParams) (ActionBuyBankExpansionMyNameActionBankBuyExpansionPostRes, error)
	// ActionCompleteTaskMyNameActionTaskCompletePost implements action_complete_task_my__name__action_task_complete_post operation.
	//
	// Complete a task.
	//
	// POST /my/{name}/action/task/complete
	ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, params ActionCompleteTaskMyNameActionTaskCompletePostParams) (ActionCompleteTaskMyNameActionTaskCompletePostRes, error)
	// ActionCraftingMyNameActionCraftingPost implements action_crafting_my__name__action_crafting_post operation.
	//
	// Crafting an item. The character must be on a map with a workshop.
	//
	// POST /my/{name}/action/crafting
	ActionCraftingMyNameActionCraftingPost(ctx context.Context, req *CraftingSchema, params ActionCraftingMyNameActionCraftingPostParams) (ActionCraftingMyNameActionCraftingPostRes, error)
	// ActionDeleteItemMyNameActionDeletePost implements action_delete_item_my__name__action_delete_post operation.
	//
	// Delete an item from your character's inventory.
	//
	// POST /my/{name}/action/delete
	ActionDeleteItemMyNameActionDeletePost(ctx context.Context, req *SimpleItemSchema, params ActionDeleteItemMyNameActionDeletePostParams) (ActionDeleteItemMyNameActionDeletePostRes, error)
	// ActionDepositBankGoldMyNameActionBankDepositGoldPost implements action_deposit_bank_gold_my__name__action_bank_deposit_gold_post operation.
	//
	// Deposit gold in a bank on the character's map.
	//
	// POST /my/{name}/action/bank/deposit/gold
	ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, req *DepositWithdrawGoldSchema, params ActionDepositBankGoldMyNameActionBankDepositGoldPostParams) (ActionDepositBankGoldMyNameActionBankDepositGoldPostRes, error)
	// ActionDepositBankMyNameActionBankDepositPost implements action_deposit_bank_my__name__action_bank_deposit_post operation.
	//
	// Deposit an item in a bank on the character's map.
	//
	// POST /my/{name}/action/bank/deposit
	ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, req *SimpleItemSchema, params ActionDepositBankMyNameActionBankDepositPostParams) (ActionDepositBankMyNameActionBankDepositPostRes, error)
	// ActionEquipItemMyNameActionEquipPost implements action_equip_item_my__name__action_equip_post operation.
	//
	// Equip an item on your character.
	//
	// POST /my/{name}/action/equip
	ActionEquipItemMyNameActionEquipPost(ctx context.Context, req *EquipSchema, params ActionEquipItemMyNameActionEquipPostParams) (ActionEquipItemMyNameActionEquipPostRes, error)
	// ActionFightMyNameActionFightPost implements action_fight_my__name__action_fight_post operation.
	//
	// Start a fight against a monster on the character's map.
	//
	// POST /my/{name}/action/fight
	ActionFightMyNameActionFightPost(ctx context.Context, params ActionFightMyNameActionFightPostParams) (ActionFightMyNameActionFightPostRes, error)
	// ActionGatheringMyNameActionGatheringPost implements action_gathering_my__name__action_gathering_post operation.
	//
	// Harvest a resource on the character's map.
	//
	// POST /my/{name}/action/gathering
	ActionGatheringMyNameActionGatheringPost(ctx context.Context, params ActionGatheringMyNameActionGatheringPostParams) (ActionGatheringMyNameActionGatheringPostRes, error)
	// ActionGeBuyItemMyNameActionGrandexchangeBuyPost implements action_ge_buy_item_my__name__action_grandexchange_buy_post operation.
	//
	// Buy an item at the Grand Exchange on the character's map.
	//
	// POST /my/{name}/action/grandexchange/buy
	ActionGeBuyItemMyNameActionGrandexchangeBuyPost(ctx context.Context, req *GEBuyOrderSchema, params ActionGeBuyItemMyNameActionGrandexchangeBuyPostParams) (ActionGeBuyItemMyNameActionGrandexchangeBuyPostRes, error)
	// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost implements action_ge_cancel_sell_order_my__name__action_grandexchange_cancel_post operation.
	//
	// Cancel a sell order at the Grand Exchange on the character's map.
	//
	// POST /my/{name}/action/grandexchange/cancel
	ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost(ctx context.Context, req *GECancelOrderSchema, params ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostParams) (ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes, error)
	// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost implements action_ge_create_sell_order_my__name__action_grandexchange_sell_post operation.
	//
	// Create a sell order at the Grand Exchange on the character's map. Please note that a 5% sales tax
	// is charged.
	//
	// POST /my/{name}/action/grandexchange/sell
	ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost(ctx context.Context, req *GEOrderCreationrSchema, params ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostParams) (ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes, error)
	// ActionMoveMyNameActionMovePost implements action_move_my__name__action_move_post operation.
	//
	// Moves a character on the map using the map's X and Y position.
	//
	// POST /my/{name}/action/move
	ActionMoveMyNameActionMovePost(ctx context.Context, req *DestinationSchema, params ActionMoveMyNameActionMovePostParams) (ActionMoveMyNameActionMovePostRes, error)
	// ActionRecyclingMyNameActionRecyclingPost implements action_recycling_my__name__action_recycling_post operation.
	//
	// Recycling an item. The character must be on a map with a workshop (only for equipments and
	// weapons).
	//
	// POST /my/{name}/action/recycling
	ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, req *RecyclingSchema, params ActionRecyclingMyNameActionRecyclingPostParams) (ActionRecyclingMyNameActionRecyclingPostRes, error)
	// ActionRestMyNameActionRestPost implements action_rest_my__name__action_rest_post operation.
	//
	// Recovers hit points by resting. (1 second per 5 HP, minimum 3 seconds).
	//
	// POST /my/{name}/action/rest
	ActionRestMyNameActionRestPost(ctx context.Context, params ActionRestMyNameActionRestPostParams) (ActionRestMyNameActionRestPostRes, error)
	// ActionTaskCancelMyNameActionTaskCancelPost implements action_task_cancel_my__name__action_task_cancel_post operation.
	//
	// Cancel a task for 1 tasks coin.
	//
	// POST /my/{name}/action/task/cancel
	ActionTaskCancelMyNameActionTaskCancelPost(ctx context.Context, params ActionTaskCancelMyNameActionTaskCancelPostParams) (ActionTaskCancelMyNameActionTaskCancelPostRes, error)
	// ActionTaskExchangeMyNameActionTaskExchangePost implements action_task_exchange_my__name__action_task_exchange_post operation.
	//
	// Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.
	//
	// POST /my/{name}/action/task/exchange
	ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, params ActionTaskExchangeMyNameActionTaskExchangePostParams) (ActionTaskExchangeMyNameActionTaskExchangePostRes, error)
	// ActionTaskTradeMyNameActionTaskTradePost implements action_task_trade_my__name__action_task_trade_post operation.
	//
	// Trading items with a Tasks Master.
	//
	// POST /my/{name}/action/task/trade
	ActionTaskTradeMyNameActionTaskTradePost(ctx context.Context, req *SimpleItemSchema, params ActionTaskTradeMyNameActionTaskTradePostParams) (ActionTaskTradeMyNameActionTaskTradePostRes, error)
	// ActionUnequipItemMyNameActionUnequipPost implements action_unequip_item_my__name__action_unequip_post operation.
	//
	// Unequip an item on your character.
	//
	// POST /my/{name}/action/unequip
	ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, req *UnequipSchema, params ActionUnequipItemMyNameActionUnequipPostParams) (ActionUnequipItemMyNameActionUnequipPostRes, error)
	// ActionUseItemMyNameActionUsePost implements action_use_item_my__name__action_use_post operation.
	//
	// Use an item as a consumable.
	//
	// POST /my/{name}/action/use
	ActionUseItemMyNameActionUsePost(ctx context.Context, req *SimpleItemSchema, params ActionUseItemMyNameActionUsePostParams) (ActionUseItemMyNameActionUsePostRes, error)
	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost implements action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post operation.
	//
	// Withdraw gold from your bank.
	//
	// POST /my/{name}/action/bank/withdraw/gold
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, req *DepositWithdrawGoldSchema, params ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostParams) (ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes, error)
	// ActionWithdrawBankMyNameActionBankWithdrawPost implements action_withdraw_bank_my__name__action_bank_withdraw_post operation.
	//
	// Take an item from your bank and put it in the character's inventory.
	//
	// POST /my/{name}/action/bank/withdraw
	ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, req *SimpleItemSchema, params ActionWithdrawBankMyNameActionBankWithdrawPostParams) (ActionWithdrawBankMyNameActionBankWithdrawPostRes, error)
	// ChangePasswordMyChangePasswordPost implements change_password_my_change_password_post operation.
	//
	// Change your account password. Changing the password reset the account token.
	//
	// POST /my/change_password
	ChangePasswordMyChangePasswordPost(ctx context.Context, req *ChangePassword) (ChangePasswordMyChangePasswordPostRes, error)
	// CreateAccountAccountsCreatePost implements create_account_accounts_create_post operation.
	//
	// Create Account.
	//
	// POST /accounts/create
	CreateAccountAccountsCreatePost(ctx context.Context, req *AddAccountSchema) (CreateAccountAccountsCreatePostRes, error)
	// CreateCharacterCharactersCreatePost implements create_character_characters_create_post operation.
	//
	// Create new character on your account. You can create up to 5 characters.
	//
	// POST /characters/create
	CreateCharacterCharactersCreatePost(ctx context.Context, req *AddCharacterSchema) (CreateCharacterCharactersCreatePostRes, error)
	// DeleteCharacterCharactersDeletePost implements delete_character_characters_delete_post operation.
	//
	// Delete character on your account.
	//
	// POST /characters/delete
	DeleteCharacterCharactersDeletePost(ctx context.Context, req *DeleteCharacterSchema) (DeleteCharacterCharactersDeletePostRes, error)
	// GenerateTokenTokenPost implements generate_token_token_post operation.
	//
	// Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate
	// your token directly on the website.
	//
	// POST /token
	GenerateTokenTokenPost(ctx context.Context) (GenerateTokenTokenPostRes, error)
	// GetAccountAccountsAccountGet implements get_account_accounts__account__get operation.
	//
	// Retrieve the details of a character.
	//
	// GET /accounts/{account}
	GetAccountAccountsAccountGet(ctx context.Context, params GetAccountAccountsAccountGetParams) (GetAccountAccountsAccountGetRes, error)
	// GetAccountAchievementsAccountsAccountAchievementsGet implements get_account_achievements_accounts__account__achievements_get operation.
	//
	// Retrieve the achievements of a account.
	//
	// GET /accounts/{account}/achievements
	GetAccountAchievementsAccountsAccountAchievementsGet(ctx context.Context, params GetAccountAchievementsAccountsAccountAchievementsGetParams) (GetAccountAchievementsAccountsAccountAchievementsGetRes, error)
	// GetAccountDetailsMyDetailsGet implements get_account_details_my_details_get operation.
	//
	// Fetch account details.
	//
	// GET /my/details
	GetAccountDetailsMyDetailsGet(ctx context.Context) (*MyAccountDetailsSchema, error)
	// GetAccountsLeaderboardLeaderboardAccountsGet implements get_accounts_leaderboard_leaderboard_accounts_get operation.
	//
	// Fetch leaderboard details.
	//
	// GET /leaderboard/accounts
	GetAccountsLeaderboardLeaderboardAccountsGet(ctx context.Context, params GetAccountsLeaderboardLeaderboardAccountsGetParams) (*DataPageAccountLeaderboardSchema, error)
	// GetAchievementAchievementsCodeGet implements get_achievement_achievements__code__get operation.
	//
	// Retrieve the details of a achievement.
	//
	// GET /achievements/{code}
	GetAchievementAchievementsCodeGet(ctx context.Context, params GetAchievementAchievementsCodeGetParams) (GetAchievementAchievementsCodeGetRes, error)
	// GetAllAchievementsAchievementsGet implements get_all_achievements_achievements_get operation.
	//
	// List of all achievements.
	//
	// GET /achievements
	GetAllAchievementsAchievementsGet(ctx context.Context, params GetAllAchievementsAchievementsGetParams) (*DataPageAchievementSchema, error)
	// GetAllActiveEventsEventsActiveGet implements get_all_active_events_events_active_get operation.
	//
	// Fetch active events details.
	//
	// GET /events/active
	GetAllActiveEventsEventsActiveGet(ctx context.Context, params GetAllActiveEventsEventsActiveGetParams) (*DataPageActiveEventSchema, error)
	// GetAllCharactersLogsMyLogsGet implements get_all_characters_logs_my_logs_get operation.
	//
	// History of the last 100 actions of all your characters.
	//
	// GET /my/logs
	GetAllCharactersLogsMyLogsGet(ctx context.Context, params GetAllCharactersLogsMyLogsGetParams) (GetAllCharactersLogsMyLogsGetRes, error)
	// GetAllEventsEventsGet implements get_all_events_events_get operation.
	//
	// Fetch events details.
	//
	// GET /events
	GetAllEventsEventsGet(ctx context.Context, params GetAllEventsEventsGetParams) (*DataPageEventSchema, error)
	// GetAllItemsItemsGet implements get_all_items_items_get operation.
	//
	// Fetch items details.
	//
	// GET /items
	GetAllItemsItemsGet(ctx context.Context, params GetAllItemsItemsGetParams) (*DataPageItemSchema, error)
	// GetAllMapsMapsGet implements get_all_maps_maps_get operation.
	//
	// Fetch maps details.
	//
	// GET /maps
	GetAllMapsMapsGet(ctx context.Context, params GetAllMapsMapsGetParams) (*DataPageMapSchema, error)
	// GetAllMonstersMonstersGet implements get_all_monsters_monsters_get operation.
	//
	// Fetch monsters details.
	//
	// GET /monsters
	GetAllMonstersMonstersGet(ctx context.Context, params GetAllMonstersMonstersGetParams) (*DataPageMonsterSchema, error)
	// GetAllResourcesResourcesGet implements get_all_resources_resources_get operation.
	//
	// Fetch resources details.
	//
	// GET /resources
	GetAllResourcesResourcesGet(ctx context.Context, params GetAllResourcesResourcesGetParams) (*DataPageResourceSchema, error)
	// GetAllTasksRewardsTasksRewardsGet implements get_all_tasks_rewards_tasks_rewards_get operation.
	//
	// Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with
	// a tasks master.
	//
	// GET /tasks/rewards
	GetAllTasksRewardsTasksRewardsGet(ctx context.Context, params GetAllTasksRewardsTasksRewardsGetParams) (*DataPageDropRateSchema, error)
	// GetAllTasksTasksListGet implements get_all_tasks_tasks_list_get operation.
	//
	// Fetch the list of all tasks.
	//
	// GET /tasks/list
	GetAllTasksTasksListGet(ctx context.Context, params GetAllTasksTasksListGetParams) (*DataPageTaskFullSchema, error)
	// GetBankDetailsMyBankGet implements get_bank_details_my_bank_get operation.
	//
	// Fetch bank details.
	//
	// GET /my/bank
	GetBankDetailsMyBankGet(ctx context.Context) (*BankResponseSchema, error)
	// GetBankItemsMyBankItemsGet implements get_bank_items_my_bank_items_get operation.
	//
	// Fetch all items in your bank.
	//
	// GET /my/bank/items
	GetBankItemsMyBankItemsGet(ctx context.Context, params GetBankItemsMyBankItemsGetParams) (*DataPageSimpleItemSchema, error)
	// GetCharacterCharactersNameGet implements get_character_characters__name__get operation.
	//
	// Retrieve the details of a character.
	//
	// GET /characters/{name}
	GetCharacterCharactersNameGet(ctx context.Context, params GetCharacterCharactersNameGetParams) (GetCharacterCharactersNameGetRes, error)
	// GetCharactersLeaderboardLeaderboardCharactersGet implements get_characters_leaderboard_leaderboard_characters_get operation.
	//
	// Fetch leaderboard details.
	//
	// GET /leaderboard/characters
	GetCharactersLeaderboardLeaderboardCharactersGet(ctx context.Context, params GetCharactersLeaderboardLeaderboardCharactersGetParams) (*DataPageCharacterLeaderboardSchema, error)
	// GetGeSellHistoryGrandexchangeHistoryCodeGet implements get_ge_sell_history_grandexchange_history__code__get operation.
	//
	// Fetch the sales history of the item for the last 7 days.
	//
	// GET /grandexchange/history/{code}
	GetGeSellHistoryGrandexchangeHistoryCodeGet(ctx context.Context, params GetGeSellHistoryGrandexchangeHistoryCodeGetParams) (GetGeSellHistoryGrandexchangeHistoryCodeGetRes, error)
	// GetGeSellHistoryMyGrandexchangeHistoryGet implements get_ge_sell_history_my_grandexchange_history_get operation.
	//
	// Fetch your sales history of the last 7 days.
	//
	// GET /my/grandexchange/history
	GetGeSellHistoryMyGrandexchangeHistoryGet(ctx context.Context, params GetGeSellHistoryMyGrandexchangeHistoryGetParams) (*DataPageGeOrderHistorySchema, error)
	// GetGeSellOrderGrandexchangeOrdersIDGet implements get_ge_sell_order_grandexchange_orders__id__get operation.
	//
	// Retrieve the sell order of a item.
	//
	// GET /grandexchange/orders/{id}
	GetGeSellOrderGrandexchangeOrdersIDGet(ctx context.Context, params GetGeSellOrderGrandexchangeOrdersIDGetParams) (GetGeSellOrderGrandexchangeOrdersIDGetRes, error)
	// GetGeSellOrdersGrandexchangeOrdersGet implements get_ge_sell_orders_grandexchange_orders_get operation.
	//
	// Fetch all sell orders.
	//
	// GET /grandexchange/orders
	GetGeSellOrdersGrandexchangeOrdersGet(ctx context.Context, params GetGeSellOrdersGrandexchangeOrdersGetParams) (*DataPageGEOrderSchema, error)
	// GetGeSellOrdersMyGrandexchangeOrdersGet implements get_ge_sell_orders_my_grandexchange_orders_get operation.
	//
	// Fetch your sell orders details.
	//
	// GET /my/grandexchange/orders
	GetGeSellOrdersMyGrandexchangeOrdersGet(ctx context.Context, params GetGeSellOrdersMyGrandexchangeOrdersGetParams) (*DataPageGEOrderSchema, error)
	// GetItemItemsCodeGet implements get_item_items__code__get operation.
	//
	// Retrieve the details of a item.
	//
	// GET /items/{code}
	GetItemItemsCodeGet(ctx context.Context, params GetItemItemsCodeGetParams) (GetItemItemsCodeGetRes, error)
	// GetMapMapsXYGet implements get_map_maps__x___y__get operation.
	//
	// Retrieve the details of a map.
	//
	// GET /maps/{x}/{y}
	GetMapMapsXYGet(ctx context.Context, params GetMapMapsXYGetParams) (GetMapMapsXYGetRes, error)
	// GetMonsterMonstersCodeGet implements get_monster_monsters__code__get operation.
	//
	// Retrieve the details of a monster.
	//
	// GET /monsters/{code}
	GetMonsterMonstersCodeGet(ctx context.Context, params GetMonsterMonstersCodeGetParams) (GetMonsterMonstersCodeGetRes, error)
	// GetMyCharactersMyCharactersGet implements get_my_characters_my_characters_get operation.
	//
	// List of your characters.
	//
	// GET /my/characters
	GetMyCharactersMyCharactersGet(ctx context.Context) (*MyCharactersListSchema, error)
	// GetResourceResourcesCodeGet implements get_resource_resources__code__get operation.
	//
	// Retrieve the details of a resource.
	//
	// GET /resources/{code}
	GetResourceResourcesCodeGet(ctx context.Context, params GetResourceResourcesCodeGetParams) (GetResourceResourcesCodeGetRes, error)
	// GetStatusGet implements get_status__get operation.
	//
	// Return the status of the game server.
	//
	// GET /
	GetStatusGet(ctx context.Context) (*StatusResponseSchema, error)
	// GetTaskTasksListCodeGet implements get_task_tasks_list__code__get operation.
	//
	// Retrieve the details of a task.
	//
	// GET /tasks/list/{code}
	GetTaskTasksListCodeGet(ctx context.Context, params GetTaskTasksListCodeGetParams) (GetTaskTasksListCodeGetRes, error)
	// GetTasksRewardTasksRewardsCodeGet implements get_tasks_reward_tasks_rewards__code__get operation.
	//
	// Retrieve the details of a tasks reward.
	//
	// GET /tasks/rewards/{code}
	GetTasksRewardTasksRewardsCodeGet(ctx context.Context, params GetTasksRewardTasksRewardsCodeGetParams) (GetTasksRewardTasksRewardsCodeGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
