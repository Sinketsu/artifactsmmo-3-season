// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/AccountAchievementSchema
type AccountAchievementSchema struct {
	// Name of the achievement.
	Name string `json:"name"`
	// Code of the achievement.
	Code string `json:"code"`
	// Description of the achievement.
	Description string `json:"description"`
	// Points of the achievement. Used for the leaderboard.
	Points int `json:"points"`
	// Type of achievement.
	Type AccountAchievementSchemaType `json:"type"`
	// Target of the achievement.
	Target AccountAchievementSchemaTarget `json:"target"`
	// Total to do.
	Total int `json:"total"`
	// Rewards.
	Rewards AccountAchievementSchemaRewards `json:"rewards"`
	// Current progress.
	Current int `json:"current"`
	// Completed at.
	CompletedAt AccountAchievementSchemaCompletedAt `json:"completed_at"`
}

// GetName returns the value of Name.
func (s *AccountAchievementSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *AccountAchievementSchema) GetCode() string {
	return s.Code
}

// GetDescription returns the value of Description.
func (s *AccountAchievementSchema) GetDescription() string {
	return s.Description
}

// GetPoints returns the value of Points.
func (s *AccountAchievementSchema) GetPoints() int {
	return s.Points
}

// GetType returns the value of Type.
func (s *AccountAchievementSchema) GetType() AccountAchievementSchemaType {
	return s.Type
}

// GetTarget returns the value of Target.
func (s *AccountAchievementSchema) GetTarget() AccountAchievementSchemaTarget {
	return s.Target
}

// GetTotal returns the value of Total.
func (s *AccountAchievementSchema) GetTotal() int {
	return s.Total
}

// GetRewards returns the value of Rewards.
func (s *AccountAchievementSchema) GetRewards() AccountAchievementSchemaRewards {
	return s.Rewards
}

// GetCurrent returns the value of Current.
func (s *AccountAchievementSchema) GetCurrent() int {
	return s.Current
}

// GetCompletedAt returns the value of CompletedAt.
func (s *AccountAchievementSchema) GetCompletedAt() AccountAchievementSchemaCompletedAt {
	return s.CompletedAt
}

// SetName sets the value of Name.
func (s *AccountAchievementSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *AccountAchievementSchema) SetCode(val string) {
	s.Code = val
}

// SetDescription sets the value of Description.
func (s *AccountAchievementSchema) SetDescription(val string) {
	s.Description = val
}

// SetPoints sets the value of Points.
func (s *AccountAchievementSchema) SetPoints(val int) {
	s.Points = val
}

// SetType sets the value of Type.
func (s *AccountAchievementSchema) SetType(val AccountAchievementSchemaType) {
	s.Type = val
}

// SetTarget sets the value of Target.
func (s *AccountAchievementSchema) SetTarget(val AccountAchievementSchemaTarget) {
	s.Target = val
}

// SetTotal sets the value of Total.
func (s *AccountAchievementSchema) SetTotal(val int) {
	s.Total = val
}

// SetRewards sets the value of Rewards.
func (s *AccountAchievementSchema) SetRewards(val AccountAchievementSchemaRewards) {
	s.Rewards = val
}

// SetCurrent sets the value of Current.
func (s *AccountAchievementSchema) SetCurrent(val int) {
	s.Current = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *AccountAchievementSchema) SetCompletedAt(val AccountAchievementSchemaCompletedAt) {
	s.CompletedAt = val
}

// Completed at.
// AccountAchievementSchemaCompletedAt represents sum type.
type AccountAchievementSchemaCompletedAt struct {
	Type     AccountAchievementSchemaCompletedAtType // switch on this field
	DateTime time.Time
	Null     struct{}
}

// AccountAchievementSchemaCompletedAtType is oneOf type of AccountAchievementSchemaCompletedAt.
type AccountAchievementSchemaCompletedAtType string

// Possible values for AccountAchievementSchemaCompletedAtType.
const (
	DateTimeAccountAchievementSchemaCompletedAt AccountAchievementSchemaCompletedAtType = "time.Time"
	NullAccountAchievementSchemaCompletedAt     AccountAchievementSchemaCompletedAtType = "struct{}"
)

// IsDateTime reports whether AccountAchievementSchemaCompletedAt is time.Time.
func (s AccountAchievementSchemaCompletedAt) IsDateTime() bool {
	return s.Type == DateTimeAccountAchievementSchemaCompletedAt
}

// IsNull reports whether AccountAchievementSchemaCompletedAt is struct{}.
func (s AccountAchievementSchemaCompletedAt) IsNull() bool {
	return s.Type == NullAccountAchievementSchemaCompletedAt
}

// SetDateTime sets AccountAchievementSchemaCompletedAt to time.Time.
func (s *AccountAchievementSchemaCompletedAt) SetDateTime(v time.Time) {
	s.Type = DateTimeAccountAchievementSchemaCompletedAt
	s.DateTime = v
}

// GetDateTime returns time.Time and true boolean if AccountAchievementSchemaCompletedAt is time.Time.
func (s AccountAchievementSchemaCompletedAt) GetDateTime() (v time.Time, ok bool) {
	if !s.IsDateTime() {
		return v, false
	}
	return s.DateTime, true
}

// NewDateTimeAccountAchievementSchemaCompletedAt returns new AccountAchievementSchemaCompletedAt from time.Time.
func NewDateTimeAccountAchievementSchemaCompletedAt(v time.Time) AccountAchievementSchemaCompletedAt {
	var s AccountAchievementSchemaCompletedAt
	s.SetDateTime(v)
	return s
}

// SetNull sets AccountAchievementSchemaCompletedAt to struct{}.
func (s *AccountAchievementSchemaCompletedAt) SetNull(v struct{}) {
	s.Type = NullAccountAchievementSchemaCompletedAt
	s.Null = v
}

// GetNull returns struct{} and true boolean if AccountAchievementSchemaCompletedAt is struct{}.
func (s AccountAchievementSchemaCompletedAt) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullAccountAchievementSchemaCompletedAt returns new AccountAchievementSchemaCompletedAt from struct{}.
func NewNullAccountAchievementSchemaCompletedAt(v struct{}) AccountAchievementSchemaCompletedAt {
	var s AccountAchievementSchemaCompletedAt
	s.SetNull(v)
	return s
}

type AccountAchievementSchemaRewards struct {
	// Gold rewards.
	Gold int `json:"gold"`
}

// GetGold returns the value of Gold.
func (s *AccountAchievementSchemaRewards) GetGold() int {
	return s.Gold
}

// SetGold sets the value of Gold.
func (s *AccountAchievementSchemaRewards) SetGold(val int) {
	s.Gold = val
}

// Target of the achievement.
// AccountAchievementSchemaTarget represents sum type.
type AccountAchievementSchemaTarget struct {
	Type   AccountAchievementSchemaTargetType // switch on this field
	String string
	Null   struct{}
}

// AccountAchievementSchemaTargetType is oneOf type of AccountAchievementSchemaTarget.
type AccountAchievementSchemaTargetType string

// Possible values for AccountAchievementSchemaTargetType.
const (
	StringAccountAchievementSchemaTarget AccountAchievementSchemaTargetType = "string"
	NullAccountAchievementSchemaTarget   AccountAchievementSchemaTargetType = "struct{}"
)

// IsString reports whether AccountAchievementSchemaTarget is string.
func (s AccountAchievementSchemaTarget) IsString() bool {
	return s.Type == StringAccountAchievementSchemaTarget
}

// IsNull reports whether AccountAchievementSchemaTarget is struct{}.
func (s AccountAchievementSchemaTarget) IsNull() bool {
	return s.Type == NullAccountAchievementSchemaTarget
}

// SetString sets AccountAchievementSchemaTarget to string.
func (s *AccountAchievementSchemaTarget) SetString(v string) {
	s.Type = StringAccountAchievementSchemaTarget
	s.String = v
}

// GetString returns string and true boolean if AccountAchievementSchemaTarget is string.
func (s AccountAchievementSchemaTarget) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringAccountAchievementSchemaTarget returns new AccountAchievementSchemaTarget from string.
func NewStringAccountAchievementSchemaTarget(v string) AccountAchievementSchemaTarget {
	var s AccountAchievementSchemaTarget
	s.SetString(v)
	return s
}

// SetNull sets AccountAchievementSchemaTarget to struct{}.
func (s *AccountAchievementSchemaTarget) SetNull(v struct{}) {
	s.Type = NullAccountAchievementSchemaTarget
	s.Null = v
}

// GetNull returns struct{} and true boolean if AccountAchievementSchemaTarget is struct{}.
func (s AccountAchievementSchemaTarget) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullAccountAchievementSchemaTarget returns new AccountAchievementSchemaTarget from struct{}.
func NewNullAccountAchievementSchemaTarget(v struct{}) AccountAchievementSchemaTarget {
	var s AccountAchievementSchemaTarget
	s.SetNull(v)
	return s
}

type AccountAchievementSchemaType string

const (
	AccountAchievementSchemaTypeCombatKill  AccountAchievementSchemaType = "combat_kill"
	AccountAchievementSchemaTypeCombatDrop  AccountAchievementSchemaType = "combat_drop"
	AccountAchievementSchemaTypeCombatLevel AccountAchievementSchemaType = "combat_level"
	AccountAchievementSchemaTypeGathering   AccountAchievementSchemaType = "gathering"
	AccountAchievementSchemaTypeCrafting    AccountAchievementSchemaType = "crafting"
	AccountAchievementSchemaTypeRecycling   AccountAchievementSchemaType = "recycling"
	AccountAchievementSchemaTypeTask        AccountAchievementSchemaType = "task"
	AccountAchievementSchemaTypeOther       AccountAchievementSchemaType = "other"
)

// AllValues returns all AccountAchievementSchemaType values.
func (AccountAchievementSchemaType) AllValues() []AccountAchievementSchemaType {
	return []AccountAchievementSchemaType{
		AccountAchievementSchemaTypeCombatKill,
		AccountAchievementSchemaTypeCombatDrop,
		AccountAchievementSchemaTypeCombatLevel,
		AccountAchievementSchemaTypeGathering,
		AccountAchievementSchemaTypeCrafting,
		AccountAchievementSchemaTypeRecycling,
		AccountAchievementSchemaTypeTask,
		AccountAchievementSchemaTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountAchievementSchemaType) MarshalText() ([]byte, error) {
	switch s {
	case AccountAchievementSchemaTypeCombatKill:
		return []byte(s), nil
	case AccountAchievementSchemaTypeCombatDrop:
		return []byte(s), nil
	case AccountAchievementSchemaTypeCombatLevel:
		return []byte(s), nil
	case AccountAchievementSchemaTypeGathering:
		return []byte(s), nil
	case AccountAchievementSchemaTypeCrafting:
		return []byte(s), nil
	case AccountAchievementSchemaTypeRecycling:
		return []byte(s), nil
	case AccountAchievementSchemaTypeTask:
		return []byte(s), nil
	case AccountAchievementSchemaTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountAchievementSchemaType) UnmarshalText(data []byte) error {
	switch AccountAchievementSchemaType(data) {
	case AccountAchievementSchemaTypeCombatKill:
		*s = AccountAchievementSchemaTypeCombatKill
		return nil
	case AccountAchievementSchemaTypeCombatDrop:
		*s = AccountAchievementSchemaTypeCombatDrop
		return nil
	case AccountAchievementSchemaTypeCombatLevel:
		*s = AccountAchievementSchemaTypeCombatLevel
		return nil
	case AccountAchievementSchemaTypeGathering:
		*s = AccountAchievementSchemaTypeGathering
		return nil
	case AccountAchievementSchemaTypeCrafting:
		*s = AccountAchievementSchemaTypeCrafting
		return nil
	case AccountAchievementSchemaTypeRecycling:
		*s = AccountAchievementSchemaTypeRecycling
		return nil
	case AccountAchievementSchemaTypeTask:
		*s = AccountAchievementSchemaTypeTask
		return nil
	case AccountAchievementSchemaTypeOther:
		*s = AccountAchievementSchemaTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountDetails
type AccountDetails struct {
	// Username.
	Username string `json:"username"`
	// Subscribed for the current season.
	Subscribed bool `json:"subscribed"`
	// Member status.
	Status AccountDetailsStatus `json:"status"`
	// Account badges.
	Badges OptAccountDetailsBadges `json:"badges"`
	// Achievement points.
	AchievementsPoints int `json:"achievements_points"`
	// Banned.
	Banned bool `json:"banned"`
	// Ban reason.
	BanReason OptString `json:"ban_reason"`
}

// GetUsername returns the value of Username.
func (s *AccountDetails) GetUsername() string {
	return s.Username
}

// GetSubscribed returns the value of Subscribed.
func (s *AccountDetails) GetSubscribed() bool {
	return s.Subscribed
}

// GetStatus returns the value of Status.
func (s *AccountDetails) GetStatus() AccountDetailsStatus {
	return s.Status
}

// GetBadges returns the value of Badges.
func (s *AccountDetails) GetBadges() OptAccountDetailsBadges {
	return s.Badges
}

// GetAchievementsPoints returns the value of AchievementsPoints.
func (s *AccountDetails) GetAchievementsPoints() int {
	return s.AchievementsPoints
}

// GetBanned returns the value of Banned.
func (s *AccountDetails) GetBanned() bool {
	return s.Banned
}

// GetBanReason returns the value of BanReason.
func (s *AccountDetails) GetBanReason() OptString {
	return s.BanReason
}

// SetUsername sets the value of Username.
func (s *AccountDetails) SetUsername(val string) {
	s.Username = val
}

// SetSubscribed sets the value of Subscribed.
func (s *AccountDetails) SetSubscribed(val bool) {
	s.Subscribed = val
}

// SetStatus sets the value of Status.
func (s *AccountDetails) SetStatus(val AccountDetailsStatus) {
	s.Status = val
}

// SetBadges sets the value of Badges.
func (s *AccountDetails) SetBadges(val OptAccountDetailsBadges) {
	s.Badges = val
}

// SetAchievementsPoints sets the value of AchievementsPoints.
func (s *AccountDetails) SetAchievementsPoints(val int) {
	s.AchievementsPoints = val
}

// SetBanned sets the value of Banned.
func (s *AccountDetails) SetBanned(val bool) {
	s.Banned = val
}

// SetBanReason sets the value of BanReason.
func (s *AccountDetails) SetBanReason(val OptString) {
	s.BanReason = val
}

// Account badges.
// AccountDetailsBadges represents sum type.
type AccountDetailsBadges struct {
	Type     AccountDetailsBadgesType // switch on this field
	AnyArray []jx.Raw
	Null     struct{}
}

// AccountDetailsBadgesType is oneOf type of AccountDetailsBadges.
type AccountDetailsBadgesType string

// Possible values for AccountDetailsBadgesType.
const (
	AnyArrayAccountDetailsBadges AccountDetailsBadgesType = "[]jx.Raw"
	NullAccountDetailsBadges     AccountDetailsBadgesType = "struct{}"
)

// IsAnyArray reports whether AccountDetailsBadges is []jx.Raw.
func (s AccountDetailsBadges) IsAnyArray() bool { return s.Type == AnyArrayAccountDetailsBadges }

// IsNull reports whether AccountDetailsBadges is struct{}.
func (s AccountDetailsBadges) IsNull() bool { return s.Type == NullAccountDetailsBadges }

// SetAnyArray sets AccountDetailsBadges to []jx.Raw.
func (s *AccountDetailsBadges) SetAnyArray(v []jx.Raw) {
	s.Type = AnyArrayAccountDetailsBadges
	s.AnyArray = v
}

// GetAnyArray returns []jx.Raw and true boolean if AccountDetailsBadges is []jx.Raw.
func (s AccountDetailsBadges) GetAnyArray() (v []jx.Raw, ok bool) {
	if !s.IsAnyArray() {
		return v, false
	}
	return s.AnyArray, true
}

// NewAnyArrayAccountDetailsBadges returns new AccountDetailsBadges from []jx.Raw.
func NewAnyArrayAccountDetailsBadges(v []jx.Raw) AccountDetailsBadges {
	var s AccountDetailsBadges
	s.SetAnyArray(v)
	return s
}

// SetNull sets AccountDetailsBadges to struct{}.
func (s *AccountDetailsBadges) SetNull(v struct{}) {
	s.Type = NullAccountDetailsBadges
	s.Null = v
}

// GetNull returns struct{} and true boolean if AccountDetailsBadges is struct{}.
func (s AccountDetailsBadges) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullAccountDetailsBadges returns new AccountDetailsBadges from struct{}.
func NewNullAccountDetailsBadges(v struct{}) AccountDetailsBadges {
	var s AccountDetailsBadges
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/AccountDetailsSchema
type AccountDetailsSchema struct {
	Data AccountDetails `json:"data"`
}

// GetData returns the value of Data.
func (s *AccountDetailsSchema) GetData() AccountDetails {
	return s.Data
}

// SetData sets the value of Data.
func (s *AccountDetailsSchema) SetData(val AccountDetails) {
	s.Data = val
}

func (*AccountDetailsSchema) getAccountAccountsAccountGetRes() {}

type AccountDetailsStatus string

const (
	AccountDetailsStatusStandard    AccountDetailsStatus = "standard"
	AccountDetailsStatusFounder     AccountDetailsStatus = "founder"
	AccountDetailsStatusGoldFounder AccountDetailsStatus = "gold_founder"
	AccountDetailsStatusVipFounder  AccountDetailsStatus = "vip_founder"
)

// AllValues returns all AccountDetailsStatus values.
func (AccountDetailsStatus) AllValues() []AccountDetailsStatus {
	return []AccountDetailsStatus{
		AccountDetailsStatusStandard,
		AccountDetailsStatusFounder,
		AccountDetailsStatusGoldFounder,
		AccountDetailsStatusVipFounder,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountDetailsStatus) MarshalText() ([]byte, error) {
	switch s {
	case AccountDetailsStatusStandard:
		return []byte(s), nil
	case AccountDetailsStatusFounder:
		return []byte(s), nil
	case AccountDetailsStatusGoldFounder:
		return []byte(s), nil
	case AccountDetailsStatusVipFounder:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountDetailsStatus) UnmarshalText(data []byte) error {
	switch AccountDetailsStatus(data) {
	case AccountDetailsStatusStandard:
		*s = AccountDetailsStatusStandard
		return nil
	case AccountDetailsStatusFounder:
		*s = AccountDetailsStatusFounder
		return nil
	case AccountDetailsStatusGoldFounder:
		*s = AccountDetailsStatusGoldFounder
		return nil
	case AccountDetailsStatusVipFounder:
		*s = AccountDetailsStatusVipFounder
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountLeaderboardSchema
type AccountLeaderboardSchema struct {
	// Position in the leaderboard.
	Position int `json:"position"`
	// Account name.
	Account string `json:"account"`
	// Member status.
	Status AccountLeaderboardSchemaStatus `json:"status"`
	// Achievements points.
	AchievementsPoints int `json:"achievements_points"`
}

// GetPosition returns the value of Position.
func (s *AccountLeaderboardSchema) GetPosition() int {
	return s.Position
}

// GetAccount returns the value of Account.
func (s *AccountLeaderboardSchema) GetAccount() string {
	return s.Account
}

// GetStatus returns the value of Status.
func (s *AccountLeaderboardSchema) GetStatus() AccountLeaderboardSchemaStatus {
	return s.Status
}

// GetAchievementsPoints returns the value of AchievementsPoints.
func (s *AccountLeaderboardSchema) GetAchievementsPoints() int {
	return s.AchievementsPoints
}

// SetPosition sets the value of Position.
func (s *AccountLeaderboardSchema) SetPosition(val int) {
	s.Position = val
}

// SetAccount sets the value of Account.
func (s *AccountLeaderboardSchema) SetAccount(val string) {
	s.Account = val
}

// SetStatus sets the value of Status.
func (s *AccountLeaderboardSchema) SetStatus(val AccountLeaderboardSchemaStatus) {
	s.Status = val
}

// SetAchievementsPoints sets the value of AchievementsPoints.
func (s *AccountLeaderboardSchema) SetAchievementsPoints(val int) {
	s.AchievementsPoints = val
}

type AccountLeaderboardSchemaStatus string

const (
	AccountLeaderboardSchemaStatusStandard    AccountLeaderboardSchemaStatus = "standard"
	AccountLeaderboardSchemaStatusFounder     AccountLeaderboardSchemaStatus = "founder"
	AccountLeaderboardSchemaStatusGoldFounder AccountLeaderboardSchemaStatus = "gold_founder"
	AccountLeaderboardSchemaStatusVipFounder  AccountLeaderboardSchemaStatus = "vip_founder"
)

// AllValues returns all AccountLeaderboardSchemaStatus values.
func (AccountLeaderboardSchemaStatus) AllValues() []AccountLeaderboardSchemaStatus {
	return []AccountLeaderboardSchemaStatus{
		AccountLeaderboardSchemaStatusStandard,
		AccountLeaderboardSchemaStatusFounder,
		AccountLeaderboardSchemaStatusGoldFounder,
		AccountLeaderboardSchemaStatusVipFounder,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountLeaderboardSchemaStatus) MarshalText() ([]byte, error) {
	switch s {
	case AccountLeaderboardSchemaStatusStandard:
		return []byte(s), nil
	case AccountLeaderboardSchemaStatusFounder:
		return []byte(s), nil
	case AccountLeaderboardSchemaStatusGoldFounder:
		return []byte(s), nil
	case AccountLeaderboardSchemaStatusVipFounder:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountLeaderboardSchemaStatus) UnmarshalText(data []byte) error {
	switch AccountLeaderboardSchemaStatus(data) {
	case AccountLeaderboardSchemaStatusStandard:
		*s = AccountLeaderboardSchemaStatusStandard
		return nil
	case AccountLeaderboardSchemaStatusFounder:
		*s = AccountLeaderboardSchemaStatusFounder
		return nil
	case AccountLeaderboardSchemaStatusGoldFounder:
		*s = AccountLeaderboardSchemaStatusGoldFounder
		return nil
	case AccountLeaderboardSchemaStatusVipFounder:
		*s = AccountLeaderboardSchemaStatusVipFounder
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AchievementResponseSchema
type AchievementResponseSchema struct {
	Data AchievementSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *AchievementResponseSchema) GetData() AchievementSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *AchievementResponseSchema) SetData(val AchievementSchema) {
	s.Data = val
}

func (*AchievementResponseSchema) getAchievementAchievementsCodeGetRes() {}

// Ref: #/components/schemas/AchievementSchema
type AchievementSchema struct {
	// Name of the achievement.
	Name string `json:"name"`
	// Code of the achievement.
	Code string `json:"code"`
	// Description of the achievement.
	Description string `json:"description"`
	// Points of the achievement. Used for the leaderboard.
	Points int `json:"points"`
	// Type of achievement.
	Type AchievementSchemaType `json:"type"`
	// Target of the achievement.
	Target AchievementSchemaTarget `json:"target"`
	// Total to do.
	Total int `json:"total"`
	// Rewards.
	Rewards AchievementSchemaRewards `json:"rewards"`
}

// GetName returns the value of Name.
func (s *AchievementSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *AchievementSchema) GetCode() string {
	return s.Code
}

// GetDescription returns the value of Description.
func (s *AchievementSchema) GetDescription() string {
	return s.Description
}

// GetPoints returns the value of Points.
func (s *AchievementSchema) GetPoints() int {
	return s.Points
}

// GetType returns the value of Type.
func (s *AchievementSchema) GetType() AchievementSchemaType {
	return s.Type
}

// GetTarget returns the value of Target.
func (s *AchievementSchema) GetTarget() AchievementSchemaTarget {
	return s.Target
}

// GetTotal returns the value of Total.
func (s *AchievementSchema) GetTotal() int {
	return s.Total
}

// GetRewards returns the value of Rewards.
func (s *AchievementSchema) GetRewards() AchievementSchemaRewards {
	return s.Rewards
}

// SetName sets the value of Name.
func (s *AchievementSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *AchievementSchema) SetCode(val string) {
	s.Code = val
}

// SetDescription sets the value of Description.
func (s *AchievementSchema) SetDescription(val string) {
	s.Description = val
}

// SetPoints sets the value of Points.
func (s *AchievementSchema) SetPoints(val int) {
	s.Points = val
}

// SetType sets the value of Type.
func (s *AchievementSchema) SetType(val AchievementSchemaType) {
	s.Type = val
}

// SetTarget sets the value of Target.
func (s *AchievementSchema) SetTarget(val AchievementSchemaTarget) {
	s.Target = val
}

// SetTotal sets the value of Total.
func (s *AchievementSchema) SetTotal(val int) {
	s.Total = val
}

// SetRewards sets the value of Rewards.
func (s *AchievementSchema) SetRewards(val AchievementSchemaRewards) {
	s.Rewards = val
}

type AchievementSchemaRewards struct {
	// Gold rewards.
	Gold int `json:"gold"`
}

// GetGold returns the value of Gold.
func (s *AchievementSchemaRewards) GetGold() int {
	return s.Gold
}

// SetGold sets the value of Gold.
func (s *AchievementSchemaRewards) SetGold(val int) {
	s.Gold = val
}

// Target of the achievement.
// AchievementSchemaTarget represents sum type.
type AchievementSchemaTarget struct {
	Type   AchievementSchemaTargetType // switch on this field
	String string
	Null   struct{}
}

// AchievementSchemaTargetType is oneOf type of AchievementSchemaTarget.
type AchievementSchemaTargetType string

// Possible values for AchievementSchemaTargetType.
const (
	StringAchievementSchemaTarget AchievementSchemaTargetType = "string"
	NullAchievementSchemaTarget   AchievementSchemaTargetType = "struct{}"
)

// IsString reports whether AchievementSchemaTarget is string.
func (s AchievementSchemaTarget) IsString() bool { return s.Type == StringAchievementSchemaTarget }

// IsNull reports whether AchievementSchemaTarget is struct{}.
func (s AchievementSchemaTarget) IsNull() bool { return s.Type == NullAchievementSchemaTarget }

// SetString sets AchievementSchemaTarget to string.
func (s *AchievementSchemaTarget) SetString(v string) {
	s.Type = StringAchievementSchemaTarget
	s.String = v
}

// GetString returns string and true boolean if AchievementSchemaTarget is string.
func (s AchievementSchemaTarget) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringAchievementSchemaTarget returns new AchievementSchemaTarget from string.
func NewStringAchievementSchemaTarget(v string) AchievementSchemaTarget {
	var s AchievementSchemaTarget
	s.SetString(v)
	return s
}

// SetNull sets AchievementSchemaTarget to struct{}.
func (s *AchievementSchemaTarget) SetNull(v struct{}) {
	s.Type = NullAchievementSchemaTarget
	s.Null = v
}

// GetNull returns struct{} and true boolean if AchievementSchemaTarget is struct{}.
func (s AchievementSchemaTarget) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullAchievementSchemaTarget returns new AchievementSchemaTarget from struct{}.
func NewNullAchievementSchemaTarget(v struct{}) AchievementSchemaTarget {
	var s AchievementSchemaTarget
	s.SetNull(v)
	return s
}

type AchievementSchemaType string

const (
	AchievementSchemaTypeCombatKill  AchievementSchemaType = "combat_kill"
	AchievementSchemaTypeCombatDrop  AchievementSchemaType = "combat_drop"
	AchievementSchemaTypeCombatLevel AchievementSchemaType = "combat_level"
	AchievementSchemaTypeGathering   AchievementSchemaType = "gathering"
	AchievementSchemaTypeCrafting    AchievementSchemaType = "crafting"
	AchievementSchemaTypeRecycling   AchievementSchemaType = "recycling"
	AchievementSchemaTypeTask        AchievementSchemaType = "task"
	AchievementSchemaTypeOther       AchievementSchemaType = "other"
)

// AllValues returns all AchievementSchemaType values.
func (AchievementSchemaType) AllValues() []AchievementSchemaType {
	return []AchievementSchemaType{
		AchievementSchemaTypeCombatKill,
		AchievementSchemaTypeCombatDrop,
		AchievementSchemaTypeCombatLevel,
		AchievementSchemaTypeGathering,
		AchievementSchemaTypeCrafting,
		AchievementSchemaTypeRecycling,
		AchievementSchemaTypeTask,
		AchievementSchemaTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AchievementSchemaType) MarshalText() ([]byte, error) {
	switch s {
	case AchievementSchemaTypeCombatKill:
		return []byte(s), nil
	case AchievementSchemaTypeCombatDrop:
		return []byte(s), nil
	case AchievementSchemaTypeCombatLevel:
		return []byte(s), nil
	case AchievementSchemaTypeGathering:
		return []byte(s), nil
	case AchievementSchemaTypeCrafting:
		return []byte(s), nil
	case AchievementSchemaTypeRecycling:
		return []byte(s), nil
	case AchievementSchemaTypeTask:
		return []byte(s), nil
	case AchievementSchemaTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AchievementSchemaType) UnmarshalText(data []byte) error {
	switch AchievementSchemaType(data) {
	case AchievementSchemaTypeCombatKill:
		*s = AchievementSchemaTypeCombatKill
		return nil
	case AchievementSchemaTypeCombatDrop:
		*s = AchievementSchemaTypeCombatDrop
		return nil
	case AchievementSchemaTypeCombatLevel:
		*s = AchievementSchemaTypeCombatLevel
		return nil
	case AchievementSchemaTypeGathering:
		*s = AchievementSchemaTypeGathering
		return nil
	case AchievementSchemaTypeCrafting:
		*s = AchievementSchemaTypeCrafting
		return nil
	case AchievementSchemaTypeRecycling:
		*s = AchievementSchemaTypeRecycling
		return nil
	case AchievementSchemaTypeTask:
		*s = AchievementSchemaTypeTask
		return nil
	case AchievementSchemaTypeOther:
		*s = AchievementSchemaTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ActionAcceptNewTaskMyNameActionTaskNewPostCode486 is response for ActionAcceptNewTaskMyNameActionTaskNewPost operation.
type ActionAcceptNewTaskMyNameActionTaskNewPostCode486 struct{}

func (*ActionAcceptNewTaskMyNameActionTaskNewPostCode486) actionAcceptNewTaskMyNameActionTaskNewPostRes() {
}

// ActionAcceptNewTaskMyNameActionTaskNewPostCode489 is response for ActionAcceptNewTaskMyNameActionTaskNewPost operation.
type ActionAcceptNewTaskMyNameActionTaskNewPostCode489 struct{}

func (*ActionAcceptNewTaskMyNameActionTaskNewPostCode489) actionAcceptNewTaskMyNameActionTaskNewPostRes() {
}

// ActionAcceptNewTaskMyNameActionTaskNewPostCode498 is response for ActionAcceptNewTaskMyNameActionTaskNewPost operation.
type ActionAcceptNewTaskMyNameActionTaskNewPostCode498 struct{}

func (*ActionAcceptNewTaskMyNameActionTaskNewPostCode498) actionAcceptNewTaskMyNameActionTaskNewPostRes() {
}

// ActionAcceptNewTaskMyNameActionTaskNewPostCode499 is response for ActionAcceptNewTaskMyNameActionTaskNewPost operation.
type ActionAcceptNewTaskMyNameActionTaskNewPostCode499 struct{}

func (*ActionAcceptNewTaskMyNameActionTaskNewPostCode499) actionAcceptNewTaskMyNameActionTaskNewPostRes() {
}

// ActionAcceptNewTaskMyNameActionTaskNewPostCode598 is response for ActionAcceptNewTaskMyNameActionTaskNewPost operation.
type ActionAcceptNewTaskMyNameActionTaskNewPostCode598 struct{}

func (*ActionAcceptNewTaskMyNameActionTaskNewPostCode598) actionAcceptNewTaskMyNameActionTaskNewPostRes() {
}

// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode486 is response for ActionBuyBankExpansionMyNameActionBankBuyExpansionPost operation.
type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode486 struct{}

func (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode486) actionBuyBankExpansionMyNameActionBankBuyExpansionPostRes() {
}

// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode492 is response for ActionBuyBankExpansionMyNameActionBankBuyExpansionPost operation.
type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode492 struct{}

func (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode492) actionBuyBankExpansionMyNameActionBankBuyExpansionPostRes() {
}

// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode498 is response for ActionBuyBankExpansionMyNameActionBankBuyExpansionPost operation.
type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode498 struct{}

func (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode498) actionBuyBankExpansionMyNameActionBankBuyExpansionPostRes() {
}

// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode499 is response for ActionBuyBankExpansionMyNameActionBankBuyExpansionPost operation.
type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode499 struct{}

func (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode499) actionBuyBankExpansionMyNameActionBankBuyExpansionPostRes() {
}

// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode598 is response for ActionBuyBankExpansionMyNameActionBankBuyExpansionPost operation.
type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode598 struct{}

func (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode598) actionBuyBankExpansionMyNameActionBankBuyExpansionPostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode486 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode486 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode486) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode487 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode487 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode487) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode488 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode488 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode488) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode497 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode497 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode497) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode498 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode498 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode498) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode499 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode499 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode499) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCompleteTaskMyNameActionTaskCompletePostCode598 is response for ActionCompleteTaskMyNameActionTaskCompletePost operation.
type ActionCompleteTaskMyNameActionTaskCompletePostCode598 struct{}

func (*ActionCompleteTaskMyNameActionTaskCompletePostCode598) actionCompleteTaskMyNameActionTaskCompletePostRes() {
}

// ActionCraftingMyNameActionCraftingPostCode478 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode478 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode478) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostCode486 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode486 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode486) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostCode493 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode493 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode493) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostCode497 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode497 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode497) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostCode498 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode498 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode498) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostCode499 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode499 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode499) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostCode598 is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostCode598 struct{}

func (*ActionCraftingMyNameActionCraftingPostCode598) actionCraftingMyNameActionCraftingPostRes() {}

// ActionCraftingMyNameActionCraftingPostNotFound is response for ActionCraftingMyNameActionCraftingPost operation.
type ActionCraftingMyNameActionCraftingPostNotFound struct{}

func (*ActionCraftingMyNameActionCraftingPostNotFound) actionCraftingMyNameActionCraftingPostRes() {}

// ActionDeleteItemMyNameActionDeletePostCode478 is response for ActionDeleteItemMyNameActionDeletePost operation.
type ActionDeleteItemMyNameActionDeletePostCode478 struct{}

func (*ActionDeleteItemMyNameActionDeletePostCode478) actionDeleteItemMyNameActionDeletePostRes() {}

// ActionDeleteItemMyNameActionDeletePostCode486 is response for ActionDeleteItemMyNameActionDeletePost operation.
type ActionDeleteItemMyNameActionDeletePostCode486 struct{}

func (*ActionDeleteItemMyNameActionDeletePostCode486) actionDeleteItemMyNameActionDeletePostRes() {}

// ActionDeleteItemMyNameActionDeletePostCode498 is response for ActionDeleteItemMyNameActionDeletePost operation.
type ActionDeleteItemMyNameActionDeletePostCode498 struct{}

func (*ActionDeleteItemMyNameActionDeletePostCode498) actionDeleteItemMyNameActionDeletePostRes() {}

// ActionDeleteItemMyNameActionDeletePostCode499 is response for ActionDeleteItemMyNameActionDeletePost operation.
type ActionDeleteItemMyNameActionDeletePostCode499 struct{}

func (*ActionDeleteItemMyNameActionDeletePostCode499) actionDeleteItemMyNameActionDeletePostRes() {}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostCode461 is response for ActionDepositBankGoldMyNameActionBankDepositGoldPost operation.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostCode461 struct{}

func (*ActionDepositBankGoldMyNameActionBankDepositGoldPostCode461) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostCode486 is response for ActionDepositBankGoldMyNameActionBankDepositGoldPost operation.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostCode486 struct{}

func (*ActionDepositBankGoldMyNameActionBankDepositGoldPostCode486) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostCode492 is response for ActionDepositBankGoldMyNameActionBankDepositGoldPost operation.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostCode492 struct{}

func (*ActionDepositBankGoldMyNameActionBankDepositGoldPostCode492) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostCode498 is response for ActionDepositBankGoldMyNameActionBankDepositGoldPost operation.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostCode498 struct{}

func (*ActionDepositBankGoldMyNameActionBankDepositGoldPostCode498) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostCode499 is response for ActionDepositBankGoldMyNameActionBankDepositGoldPost operation.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostCode499 struct{}

func (*ActionDepositBankGoldMyNameActionBankDepositGoldPostCode499) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostCode598 is response for ActionDepositBankGoldMyNameActionBankDepositGoldPost operation.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostCode598 struct{}

func (*ActionDepositBankGoldMyNameActionBankDepositGoldPostCode598) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode461 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode461 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode461) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode462 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode462 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode462) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode478 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode478 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode478) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode486 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode486 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode486) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode498 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode498 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode498) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode499 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode499 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode499) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostCode598 is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostCode598 struct{}

func (*ActionDepositBankMyNameActionBankDepositPostCode598) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionDepositBankMyNameActionBankDepositPostNotFound is response for ActionDepositBankMyNameActionBankDepositPost operation.
type ActionDepositBankMyNameActionBankDepositPostNotFound struct{}

func (*ActionDepositBankMyNameActionBankDepositPostNotFound) actionDepositBankMyNameActionBankDepositPostRes() {
}

// ActionEquipItemMyNameActionEquipPostCode478 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode478 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode478) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode484 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode484 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode484) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode485 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode485 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode485) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode486 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode486 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode486) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode491 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode491 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode491) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode496 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode496 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode496) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode497 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode497 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode497) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode498 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode498 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode498) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostCode499 is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostCode499 struct{}

func (*ActionEquipItemMyNameActionEquipPostCode499) actionEquipItemMyNameActionEquipPostRes() {}

// ActionEquipItemMyNameActionEquipPostNotFound is response for ActionEquipItemMyNameActionEquipPost operation.
type ActionEquipItemMyNameActionEquipPostNotFound struct{}

func (*ActionEquipItemMyNameActionEquipPostNotFound) actionEquipItemMyNameActionEquipPostRes() {}

// ActionFightMyNameActionFightPostCode486 is response for ActionFightMyNameActionFightPost operation.
type ActionFightMyNameActionFightPostCode486 struct{}

func (*ActionFightMyNameActionFightPostCode486) actionFightMyNameActionFightPostRes() {}

// ActionFightMyNameActionFightPostCode497 is response for ActionFightMyNameActionFightPost operation.
type ActionFightMyNameActionFightPostCode497 struct{}

func (*ActionFightMyNameActionFightPostCode497) actionFightMyNameActionFightPostRes() {}

// ActionFightMyNameActionFightPostCode498 is response for ActionFightMyNameActionFightPost operation.
type ActionFightMyNameActionFightPostCode498 struct{}

func (*ActionFightMyNameActionFightPostCode498) actionFightMyNameActionFightPostRes() {}

// ActionFightMyNameActionFightPostCode499 is response for ActionFightMyNameActionFightPost operation.
type ActionFightMyNameActionFightPostCode499 struct{}

func (*ActionFightMyNameActionFightPostCode499) actionFightMyNameActionFightPostRes() {}

// ActionFightMyNameActionFightPostCode598 is response for ActionFightMyNameActionFightPost operation.
type ActionFightMyNameActionFightPostCode598 struct{}

func (*ActionFightMyNameActionFightPostCode598) actionFightMyNameActionFightPostRes() {}

// ActionGatheringMyNameActionGatheringPostCode486 is response for ActionGatheringMyNameActionGatheringPost operation.
type ActionGatheringMyNameActionGatheringPostCode486 struct{}

func (*ActionGatheringMyNameActionGatheringPostCode486) actionGatheringMyNameActionGatheringPostRes() {
}

// ActionGatheringMyNameActionGatheringPostCode493 is response for ActionGatheringMyNameActionGatheringPost operation.
type ActionGatheringMyNameActionGatheringPostCode493 struct{}

func (*ActionGatheringMyNameActionGatheringPostCode493) actionGatheringMyNameActionGatheringPostRes() {
}

// ActionGatheringMyNameActionGatheringPostCode497 is response for ActionGatheringMyNameActionGatheringPost operation.
type ActionGatheringMyNameActionGatheringPostCode497 struct{}

func (*ActionGatheringMyNameActionGatheringPostCode497) actionGatheringMyNameActionGatheringPostRes() {
}

// ActionGatheringMyNameActionGatheringPostCode498 is response for ActionGatheringMyNameActionGatheringPost operation.
type ActionGatheringMyNameActionGatheringPostCode498 struct{}

func (*ActionGatheringMyNameActionGatheringPostCode498) actionGatheringMyNameActionGatheringPostRes() {
}

// ActionGatheringMyNameActionGatheringPostCode499 is response for ActionGatheringMyNameActionGatheringPost operation.
type ActionGatheringMyNameActionGatheringPostCode499 struct{}

func (*ActionGatheringMyNameActionGatheringPostCode499) actionGatheringMyNameActionGatheringPostRes() {
}

// ActionGatheringMyNameActionGatheringPostCode598 is response for ActionGatheringMyNameActionGatheringPost operation.
type ActionGatheringMyNameActionGatheringPostCode598 struct{}

func (*ActionGatheringMyNameActionGatheringPostCode598) actionGatheringMyNameActionGatheringPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode434 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode434 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode434) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode435 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode435 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode435) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode436 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode436 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode436) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode486 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode486 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode486) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode492 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode492 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode492) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode497 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode497 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode497) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode498 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode498 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode498) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode499 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode499 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode499) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode598 is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode598 struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode598) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostNotFound is response for ActionGeBuyItemMyNameActionGrandexchangeBuyPost operation.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostNotFound struct{}

func (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostNotFound) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode436 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode436 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode436) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode438 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode438 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode438) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode486 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode486 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode486) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode497 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode497 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode497) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode498 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode498 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode498) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode499 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode499 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode499) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode598 is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode598 struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode598) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostNotFound is response for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost operation.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostNotFound struct{}

func (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostNotFound) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode433 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode433 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode433) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode437 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode437 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode437) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode478 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode478 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode478) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode486 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode486 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode486) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode492 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode492 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode492) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode498 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode498 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode498) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode499 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode499 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode499) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode598 is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode598 struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode598) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostNotFound is response for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost operation.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostNotFound struct{}

func (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostNotFound) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// ActionMoveMyNameActionMovePostCode486 is response for ActionMoveMyNameActionMovePost operation.
type ActionMoveMyNameActionMovePostCode486 struct{}

func (*ActionMoveMyNameActionMovePostCode486) actionMoveMyNameActionMovePostRes() {}

// ActionMoveMyNameActionMovePostCode490 is response for ActionMoveMyNameActionMovePost operation.
type ActionMoveMyNameActionMovePostCode490 struct{}

func (*ActionMoveMyNameActionMovePostCode490) actionMoveMyNameActionMovePostRes() {}

// ActionMoveMyNameActionMovePostCode498 is response for ActionMoveMyNameActionMovePost operation.
type ActionMoveMyNameActionMovePostCode498 struct{}

func (*ActionMoveMyNameActionMovePostCode498) actionMoveMyNameActionMovePostRes() {}

// ActionMoveMyNameActionMovePostCode499 is response for ActionMoveMyNameActionMovePost operation.
type ActionMoveMyNameActionMovePostCode499 struct{}

func (*ActionMoveMyNameActionMovePostCode499) actionMoveMyNameActionMovePostRes() {}

// ActionMoveMyNameActionMovePostNotFound is response for ActionMoveMyNameActionMovePost operation.
type ActionMoveMyNameActionMovePostNotFound struct{}

func (*ActionMoveMyNameActionMovePostNotFound) actionMoveMyNameActionMovePostRes() {}

// ActionRecyclingMyNameActionRecyclingPostCode473 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode473 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode473) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode478 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode478 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode478) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode486 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode486 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode486) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode493 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode493 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode493) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode497 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode497 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode497) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode498 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode498 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode498) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode499 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode499 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode499) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostCode598 is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostCode598 struct{}

func (*ActionRecyclingMyNameActionRecyclingPostCode598) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRecyclingMyNameActionRecyclingPostNotFound is response for ActionRecyclingMyNameActionRecyclingPost operation.
type ActionRecyclingMyNameActionRecyclingPostNotFound struct{}

func (*ActionRecyclingMyNameActionRecyclingPostNotFound) actionRecyclingMyNameActionRecyclingPostRes() {
}

// ActionRestMyNameActionRestPostCode486 is response for ActionRestMyNameActionRestPost operation.
type ActionRestMyNameActionRestPostCode486 struct{}

func (*ActionRestMyNameActionRestPostCode486) actionRestMyNameActionRestPostRes() {}

// ActionRestMyNameActionRestPostCode498 is response for ActionRestMyNameActionRestPost operation.
type ActionRestMyNameActionRestPostCode498 struct{}

func (*ActionRestMyNameActionRestPostCode498) actionRestMyNameActionRestPostRes() {}

// ActionRestMyNameActionRestPostCode499 is response for ActionRestMyNameActionRestPost operation.
type ActionRestMyNameActionRestPostCode499 struct{}

func (*ActionRestMyNameActionRestPostCode499) actionRestMyNameActionRestPostRes() {}

// ActionTaskCancelMyNameActionTaskCancelPostCode478 is response for ActionTaskCancelMyNameActionTaskCancelPost operation.
type ActionTaskCancelMyNameActionTaskCancelPostCode478 struct{}

func (*ActionTaskCancelMyNameActionTaskCancelPostCode478) actionTaskCancelMyNameActionTaskCancelPostRes() {
}

// ActionTaskCancelMyNameActionTaskCancelPostCode486 is response for ActionTaskCancelMyNameActionTaskCancelPost operation.
type ActionTaskCancelMyNameActionTaskCancelPostCode486 struct{}

func (*ActionTaskCancelMyNameActionTaskCancelPostCode486) actionTaskCancelMyNameActionTaskCancelPostRes() {
}

// ActionTaskCancelMyNameActionTaskCancelPostCode498 is response for ActionTaskCancelMyNameActionTaskCancelPost operation.
type ActionTaskCancelMyNameActionTaskCancelPostCode498 struct{}

func (*ActionTaskCancelMyNameActionTaskCancelPostCode498) actionTaskCancelMyNameActionTaskCancelPostRes() {
}

// ActionTaskCancelMyNameActionTaskCancelPostCode499 is response for ActionTaskCancelMyNameActionTaskCancelPost operation.
type ActionTaskCancelMyNameActionTaskCancelPostCode499 struct{}

func (*ActionTaskCancelMyNameActionTaskCancelPostCode499) actionTaskCancelMyNameActionTaskCancelPostRes() {
}

// ActionTaskCancelMyNameActionTaskCancelPostCode598 is response for ActionTaskCancelMyNameActionTaskCancelPost operation.
type ActionTaskCancelMyNameActionTaskCancelPostCode598 struct{}

func (*ActionTaskCancelMyNameActionTaskCancelPostCode598) actionTaskCancelMyNameActionTaskCancelPostRes() {
}

// ActionTaskExchangeMyNameActionTaskExchangePostCode478 is response for ActionTaskExchangeMyNameActionTaskExchangePost operation.
type ActionTaskExchangeMyNameActionTaskExchangePostCode478 struct{}

func (*ActionTaskExchangeMyNameActionTaskExchangePostCode478) actionTaskExchangeMyNameActionTaskExchangePostRes() {
}

// ActionTaskExchangeMyNameActionTaskExchangePostCode486 is response for ActionTaskExchangeMyNameActionTaskExchangePost operation.
type ActionTaskExchangeMyNameActionTaskExchangePostCode486 struct{}

func (*ActionTaskExchangeMyNameActionTaskExchangePostCode486) actionTaskExchangeMyNameActionTaskExchangePostRes() {
}

// ActionTaskExchangeMyNameActionTaskExchangePostCode497 is response for ActionTaskExchangeMyNameActionTaskExchangePost operation.
type ActionTaskExchangeMyNameActionTaskExchangePostCode497 struct{}

func (*ActionTaskExchangeMyNameActionTaskExchangePostCode497) actionTaskExchangeMyNameActionTaskExchangePostRes() {
}

// ActionTaskExchangeMyNameActionTaskExchangePostCode498 is response for ActionTaskExchangeMyNameActionTaskExchangePost operation.
type ActionTaskExchangeMyNameActionTaskExchangePostCode498 struct{}

func (*ActionTaskExchangeMyNameActionTaskExchangePostCode498) actionTaskExchangeMyNameActionTaskExchangePostRes() {
}

// ActionTaskExchangeMyNameActionTaskExchangePostCode499 is response for ActionTaskExchangeMyNameActionTaskExchangePost operation.
type ActionTaskExchangeMyNameActionTaskExchangePostCode499 struct{}

func (*ActionTaskExchangeMyNameActionTaskExchangePostCode499) actionTaskExchangeMyNameActionTaskExchangePostRes() {
}

// ActionTaskExchangeMyNameActionTaskExchangePostCode598 is response for ActionTaskExchangeMyNameActionTaskExchangePost operation.
type ActionTaskExchangeMyNameActionTaskExchangePostCode598 struct{}

func (*ActionTaskExchangeMyNameActionTaskExchangePostCode598) actionTaskExchangeMyNameActionTaskExchangePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode474 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode474 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode474) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode475 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode475 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode475) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode478 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode478 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode478) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode486 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode486 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode486) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode498 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode498 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode498) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode499 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode499 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode499) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionTaskTradeMyNameActionTaskTradePostCode598 is response for ActionTaskTradeMyNameActionTaskTradePost operation.
type ActionTaskTradeMyNameActionTaskTradePostCode598 struct{}

func (*ActionTaskTradeMyNameActionTaskTradePostCode598) actionTaskTradeMyNameActionTaskTradePostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode478 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode478 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode478) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode483 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode483 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode483) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode486 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode486 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode486) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode491 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode491 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode491) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode497 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode497 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode497) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode498 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode498 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode498) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostCode499 is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostCode499 struct{}

func (*ActionUnequipItemMyNameActionUnequipPostCode499) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUnequipItemMyNameActionUnequipPostNotFound is response for ActionUnequipItemMyNameActionUnequipPost operation.
type ActionUnequipItemMyNameActionUnequipPostNotFound struct{}

func (*ActionUnequipItemMyNameActionUnequipPostNotFound) actionUnequipItemMyNameActionUnequipPostRes() {
}

// ActionUseItemMyNameActionUsePostCode476 is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostCode476 struct{}

func (*ActionUseItemMyNameActionUsePostCode476) actionUseItemMyNameActionUsePostRes() {}

// ActionUseItemMyNameActionUsePostCode478 is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostCode478 struct{}

func (*ActionUseItemMyNameActionUsePostCode478) actionUseItemMyNameActionUsePostRes() {}

// ActionUseItemMyNameActionUsePostCode486 is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostCode486 struct{}

func (*ActionUseItemMyNameActionUsePostCode486) actionUseItemMyNameActionUsePostRes() {}

// ActionUseItemMyNameActionUsePostCode496 is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostCode496 struct{}

func (*ActionUseItemMyNameActionUsePostCode496) actionUseItemMyNameActionUsePostRes() {}

// ActionUseItemMyNameActionUsePostCode498 is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostCode498 struct{}

func (*ActionUseItemMyNameActionUsePostCode498) actionUseItemMyNameActionUsePostRes() {}

// ActionUseItemMyNameActionUsePostCode499 is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostCode499 struct{}

func (*ActionUseItemMyNameActionUsePostCode499) actionUseItemMyNameActionUsePostRes() {}

// ActionUseItemMyNameActionUsePostNotFound is response for ActionUseItemMyNameActionUsePost operation.
type ActionUseItemMyNameActionUsePostNotFound struct{}

func (*ActionUseItemMyNameActionUsePostNotFound) actionUseItemMyNameActionUsePostRes() {}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode460 is response for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost operation.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode460 struct{}

func (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode460) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode461 is response for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost operation.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode461 struct{}

func (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode461) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode486 is response for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost operation.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode486 struct{}

func (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode486) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode498 is response for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost operation.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode498 struct{}

func (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode498) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode499 is response for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost operation.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode499 struct{}

func (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode499) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode598 is response for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost operation.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode598 struct{}

func (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode598) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode461 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode461 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode461) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode478 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode478 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode478) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode486 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode486 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode486) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode497 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode497 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode497) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode498 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode498 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode498) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode499 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode499 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode499) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostCode598 is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostCode598 struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostCode598) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// ActionWithdrawBankMyNameActionBankWithdrawPostNotFound is response for ActionWithdrawBankMyNameActionBankWithdrawPost operation.
type ActionWithdrawBankMyNameActionBankWithdrawPostNotFound struct{}

func (*ActionWithdrawBankMyNameActionBankWithdrawPostNotFound) actionWithdrawBankMyNameActionBankWithdrawPostRes() {
}

// Ref: #/components/schemas/ActiveEventSchema
type ActiveEventSchema struct {
	// Name of the event.
	Name string `json:"name"`
	// Code of the event. This is the event's unique identifier (ID).
	Code string `json:"code"`
	// Map of the event.
	Map ActiveEventSchemaMap `json:"map"`
	// Previous map skin.
	PreviousSkin string `json:"previous_skin"`
	// Duration in minutes.
	Duration int `json:"duration"`
	// Expiration datetime.
	Expiration time.Time `json:"expiration"`
	// Start datetime.
	CreatedAt time.Time `json:"created_at"`
}

// GetName returns the value of Name.
func (s *ActiveEventSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ActiveEventSchema) GetCode() string {
	return s.Code
}

// GetMap returns the value of Map.
func (s *ActiveEventSchema) GetMap() ActiveEventSchemaMap {
	return s.Map
}

// GetPreviousSkin returns the value of PreviousSkin.
func (s *ActiveEventSchema) GetPreviousSkin() string {
	return s.PreviousSkin
}

// GetDuration returns the value of Duration.
func (s *ActiveEventSchema) GetDuration() int {
	return s.Duration
}

// GetExpiration returns the value of Expiration.
func (s *ActiveEventSchema) GetExpiration() time.Time {
	return s.Expiration
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ActiveEventSchema) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetName sets the value of Name.
func (s *ActiveEventSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ActiveEventSchema) SetCode(val string) {
	s.Code = val
}

// SetMap sets the value of Map.
func (s *ActiveEventSchema) SetMap(val ActiveEventSchemaMap) {
	s.Map = val
}

// SetPreviousSkin sets the value of PreviousSkin.
func (s *ActiveEventSchema) SetPreviousSkin(val string) {
	s.PreviousSkin = val
}

// SetDuration sets the value of Duration.
func (s *ActiveEventSchema) SetDuration(val int) {
	s.Duration = val
}

// SetExpiration sets the value of Expiration.
func (s *ActiveEventSchema) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ActiveEventSchema) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

type ActiveEventSchemaMap struct {
	// Name of the map.
	Name string `json:"name"`
	// Skin of the map.
	Skin string `json:"skin"`
	// Position X of the map.
	X int `json:"x"`
	// Position Y of the map.
	Y int `json:"y"`
	// Content of the map.
	Content ActiveEventSchemaMapContent `json:"content"`
}

// GetName returns the value of Name.
func (s *ActiveEventSchemaMap) GetName() string {
	return s.Name
}

// GetSkin returns the value of Skin.
func (s *ActiveEventSchemaMap) GetSkin() string {
	return s.Skin
}

// GetX returns the value of X.
func (s *ActiveEventSchemaMap) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *ActiveEventSchemaMap) GetY() int {
	return s.Y
}

// GetContent returns the value of Content.
func (s *ActiveEventSchemaMap) GetContent() ActiveEventSchemaMapContent {
	return s.Content
}

// SetName sets the value of Name.
func (s *ActiveEventSchemaMap) SetName(val string) {
	s.Name = val
}

// SetSkin sets the value of Skin.
func (s *ActiveEventSchemaMap) SetSkin(val string) {
	s.Skin = val
}

// SetX sets the value of X.
func (s *ActiveEventSchemaMap) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *ActiveEventSchemaMap) SetY(val int) {
	s.Y = val
}

// SetContent sets the value of Content.
func (s *ActiveEventSchemaMap) SetContent(val ActiveEventSchemaMapContent) {
	s.Content = val
}

// Content of the map.
// ActiveEventSchemaMapContent represents sum type.
type ActiveEventSchemaMapContent struct {
	Type             ActiveEventSchemaMapContentType // switch on this field
	MapContentSchema MapContentSchema
	Null             struct{}
}

// ActiveEventSchemaMapContentType is oneOf type of ActiveEventSchemaMapContent.
type ActiveEventSchemaMapContentType string

// Possible values for ActiveEventSchemaMapContentType.
const (
	MapContentSchemaActiveEventSchemaMapContent ActiveEventSchemaMapContentType = "MapContentSchema"
	NullActiveEventSchemaMapContent             ActiveEventSchemaMapContentType = "struct{}"
)

// IsMapContentSchema reports whether ActiveEventSchemaMapContent is MapContentSchema.
func (s ActiveEventSchemaMapContent) IsMapContentSchema() bool {
	return s.Type == MapContentSchemaActiveEventSchemaMapContent
}

// IsNull reports whether ActiveEventSchemaMapContent is struct{}.
func (s ActiveEventSchemaMapContent) IsNull() bool { return s.Type == NullActiveEventSchemaMapContent }

// SetMapContentSchema sets ActiveEventSchemaMapContent to MapContentSchema.
func (s *ActiveEventSchemaMapContent) SetMapContentSchema(v MapContentSchema) {
	s.Type = MapContentSchemaActiveEventSchemaMapContent
	s.MapContentSchema = v
}

// GetMapContentSchema returns MapContentSchema and true boolean if ActiveEventSchemaMapContent is MapContentSchema.
func (s ActiveEventSchemaMapContent) GetMapContentSchema() (v MapContentSchema, ok bool) {
	if !s.IsMapContentSchema() {
		return v, false
	}
	return s.MapContentSchema, true
}

// NewMapContentSchemaActiveEventSchemaMapContent returns new ActiveEventSchemaMapContent from MapContentSchema.
func NewMapContentSchemaActiveEventSchemaMapContent(v MapContentSchema) ActiveEventSchemaMapContent {
	var s ActiveEventSchemaMapContent
	s.SetMapContentSchema(v)
	return s
}

// SetNull sets ActiveEventSchemaMapContent to struct{}.
func (s *ActiveEventSchemaMapContent) SetNull(v struct{}) {
	s.Type = NullActiveEventSchemaMapContent
	s.Null = v
}

// GetNull returns struct{} and true boolean if ActiveEventSchemaMapContent is struct{}.
func (s ActiveEventSchemaMapContent) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullActiveEventSchemaMapContent returns new ActiveEventSchemaMapContent from struct{}.
func NewNullActiveEventSchemaMapContent(v struct{}) ActiveEventSchemaMapContent {
	var s ActiveEventSchemaMapContent
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/AddAccountSchema
type AddAccountSchema struct {
	// Your desired username.
	Username string `json:"username"`
	// Your password.
	Password string `json:"password"`
	// Your email.
	Email string `json:"email"`
}

// GetUsername returns the value of Username.
func (s *AddAccountSchema) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *AddAccountSchema) GetPassword() string {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *AddAccountSchema) GetEmail() string {
	return s.Email
}

// SetUsername sets the value of Username.
func (s *AddAccountSchema) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *AddAccountSchema) SetPassword(val string) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *AddAccountSchema) SetEmail(val string) {
	s.Email = val
}

// Ref: #/components/schemas/AddCharacterSchema
type AddCharacterSchema struct {
	// Your desired character name. It's unique and all players can see it.
	Name string `json:"name"`
	// Your desired skin.
	Skin AddCharacterSchemaSkin `json:"skin"`
}

// GetName returns the value of Name.
func (s *AddCharacterSchema) GetName() string {
	return s.Name
}

// GetSkin returns the value of Skin.
func (s *AddCharacterSchema) GetSkin() AddCharacterSchemaSkin {
	return s.Skin
}

// SetName sets the value of Name.
func (s *AddCharacterSchema) SetName(val string) {
	s.Name = val
}

// SetSkin sets the value of Skin.
func (s *AddCharacterSchema) SetSkin(val AddCharacterSchemaSkin) {
	s.Skin = val
}

type AddCharacterSchemaSkin string

const (
	AddCharacterSchemaSkinMen1   AddCharacterSchemaSkin = "men1"
	AddCharacterSchemaSkinMen2   AddCharacterSchemaSkin = "men2"
	AddCharacterSchemaSkinMen3   AddCharacterSchemaSkin = "men3"
	AddCharacterSchemaSkinWomen1 AddCharacterSchemaSkin = "women1"
	AddCharacterSchemaSkinWomen2 AddCharacterSchemaSkin = "women2"
	AddCharacterSchemaSkinWomen3 AddCharacterSchemaSkin = "women3"
)

// AllValues returns all AddCharacterSchemaSkin values.
func (AddCharacterSchemaSkin) AllValues() []AddCharacterSchemaSkin {
	return []AddCharacterSchemaSkin{
		AddCharacterSchemaSkinMen1,
		AddCharacterSchemaSkinMen2,
		AddCharacterSchemaSkinMen3,
		AddCharacterSchemaSkinWomen1,
		AddCharacterSchemaSkinWomen2,
		AddCharacterSchemaSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddCharacterSchemaSkin) MarshalText() ([]byte, error) {
	switch s {
	case AddCharacterSchemaSkinMen1:
		return []byte(s), nil
	case AddCharacterSchemaSkinMen2:
		return []byte(s), nil
	case AddCharacterSchemaSkinMen3:
		return []byte(s), nil
	case AddCharacterSchemaSkinWomen1:
		return []byte(s), nil
	case AddCharacterSchemaSkinWomen2:
		return []byte(s), nil
	case AddCharacterSchemaSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddCharacterSchemaSkin) UnmarshalText(data []byte) error {
	switch AddCharacterSchemaSkin(data) {
	case AddCharacterSchemaSkinMen1:
		*s = AddCharacterSchemaSkinMen1
		return nil
	case AddCharacterSchemaSkinMen2:
		*s = AddCharacterSchemaSkinMen2
		return nil
	case AddCharacterSchemaSkinMen3:
		*s = AddCharacterSchemaSkinMen3
		return nil
	case AddCharacterSchemaSkinWomen1:
		*s = AddCharacterSchemaSkinWomen1
		return nil
	case AddCharacterSchemaSkinWomen2:
		*s = AddCharacterSchemaSkinWomen2
		return nil
	case AddCharacterSchemaSkinWomen3:
		*s = AddCharacterSchemaSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AnnouncementSchema
type AnnouncementSchema struct {
	// Announcement text.
	Message string `json:"message"`
	// Datetime of the announcement.
	CreatedAt OptDateTime `json:"created_at"`
}

// GetMessage returns the value of Message.
func (s *AnnouncementSchema) GetMessage() string {
	return s.Message
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AnnouncementSchema) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetMessage sets the value of Message.
func (s *AnnouncementSchema) SetMessage(val string) {
	s.Message = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AnnouncementSchema) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/BankExtensionTransactionResponseSchema
type BankExtensionTransactionResponseSchema struct {
	Data BankExtensionTransactionSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *BankExtensionTransactionResponseSchema) GetData() BankExtensionTransactionSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *BankExtensionTransactionResponseSchema) SetData(val BankExtensionTransactionSchema) {
	s.Data = val
}

func (*BankExtensionTransactionResponseSchema) actionBuyBankExpansionMyNameActionBankBuyExpansionPostRes() {
}

// Ref: #/components/schemas/BankExtensionTransactionSchema
type BankExtensionTransactionSchema struct {
	// Cooldown details.
	Cooldown BankExtensionTransactionSchemaCooldown `json:"cooldown"`
	// Transaction details.
	Transaction BankExtensionTransactionSchemaTransaction `json:"transaction"`
	// Player details.
	Character BankExtensionTransactionSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *BankExtensionTransactionSchema) GetCooldown() BankExtensionTransactionSchemaCooldown {
	return s.Cooldown
}

// GetTransaction returns the value of Transaction.
func (s *BankExtensionTransactionSchema) GetTransaction() BankExtensionTransactionSchemaTransaction {
	return s.Transaction
}

// GetCharacter returns the value of Character.
func (s *BankExtensionTransactionSchema) GetCharacter() BankExtensionTransactionSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *BankExtensionTransactionSchema) SetCooldown(val BankExtensionTransactionSchemaCooldown) {
	s.Cooldown = val
}

// SetTransaction sets the value of Transaction.
func (s *BankExtensionTransactionSchema) SetTransaction(val BankExtensionTransactionSchemaTransaction) {
	s.Transaction = val
}

// SetCharacter sets the value of Character.
func (s *BankExtensionTransactionSchema) SetCharacter(val BankExtensionTransactionSchemaCharacter) {
	s.Character = val
}

type BankExtensionTransactionSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin BankExtensionTransactionSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *BankExtensionTransactionSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *BankExtensionTransactionSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *BankExtensionTransactionSchemaCharacter) GetSkin() BankExtensionTransactionSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *BankExtensionTransactionSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *BankExtensionTransactionSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *BankExtensionTransactionSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *BankExtensionTransactionSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *BankExtensionTransactionSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *BankExtensionTransactionSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *BankExtensionTransactionSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *BankExtensionTransactionSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *BankExtensionTransactionSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *BankExtensionTransactionSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *BankExtensionTransactionSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *BankExtensionTransactionSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *BankExtensionTransactionSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *BankExtensionTransactionSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *BankExtensionTransactionSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *BankExtensionTransactionSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *BankExtensionTransactionSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *BankExtensionTransactionSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *BankExtensionTransactionSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *BankExtensionTransactionSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *BankExtensionTransactionSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *BankExtensionTransactionSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *BankExtensionTransactionSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *BankExtensionTransactionSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *BankExtensionTransactionSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *BankExtensionTransactionSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *BankExtensionTransactionSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *BankExtensionTransactionSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *BankExtensionTransactionSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *BankExtensionTransactionSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *BankExtensionTransactionSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *BankExtensionTransactionSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *BankExtensionTransactionSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *BankExtensionTransactionSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *BankExtensionTransactionSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *BankExtensionTransactionSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *BankExtensionTransactionSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *BankExtensionTransactionSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *BankExtensionTransactionSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *BankExtensionTransactionSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *BankExtensionTransactionSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *BankExtensionTransactionSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *BankExtensionTransactionSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *BankExtensionTransactionSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *BankExtensionTransactionSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *BankExtensionTransactionSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *BankExtensionTransactionSchemaCharacter) SetSkin(val BankExtensionTransactionSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *BankExtensionTransactionSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *BankExtensionTransactionSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *BankExtensionTransactionSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *BankExtensionTransactionSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *BankExtensionTransactionSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *BankExtensionTransactionSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *BankExtensionTransactionSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *BankExtensionTransactionSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *BankExtensionTransactionSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *BankExtensionTransactionSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *BankExtensionTransactionSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *BankExtensionTransactionSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *BankExtensionTransactionSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *BankExtensionTransactionSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *BankExtensionTransactionSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *BankExtensionTransactionSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *BankExtensionTransactionSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *BankExtensionTransactionSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *BankExtensionTransactionSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *BankExtensionTransactionSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *BankExtensionTransactionSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *BankExtensionTransactionSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *BankExtensionTransactionSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *BankExtensionTransactionSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *BankExtensionTransactionSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *BankExtensionTransactionSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *BankExtensionTransactionSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *BankExtensionTransactionSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *BankExtensionTransactionSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *BankExtensionTransactionSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *BankExtensionTransactionSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *BankExtensionTransactionSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *BankExtensionTransactionSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *BankExtensionTransactionSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *BankExtensionTransactionSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *BankExtensionTransactionSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *BankExtensionTransactionSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *BankExtensionTransactionSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *BankExtensionTransactionSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *BankExtensionTransactionSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *BankExtensionTransactionSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *BankExtensionTransactionSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *BankExtensionTransactionSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *BankExtensionTransactionSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *BankExtensionTransactionSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type BankExtensionTransactionSchemaCharacterSkin string

const (
	BankExtensionTransactionSchemaCharacterSkinMen1   BankExtensionTransactionSchemaCharacterSkin = "men1"
	BankExtensionTransactionSchemaCharacterSkinMen2   BankExtensionTransactionSchemaCharacterSkin = "men2"
	BankExtensionTransactionSchemaCharacterSkinMen3   BankExtensionTransactionSchemaCharacterSkin = "men3"
	BankExtensionTransactionSchemaCharacterSkinWomen1 BankExtensionTransactionSchemaCharacterSkin = "women1"
	BankExtensionTransactionSchemaCharacterSkinWomen2 BankExtensionTransactionSchemaCharacterSkin = "women2"
	BankExtensionTransactionSchemaCharacterSkinWomen3 BankExtensionTransactionSchemaCharacterSkin = "women3"
)

// AllValues returns all BankExtensionTransactionSchemaCharacterSkin values.
func (BankExtensionTransactionSchemaCharacterSkin) AllValues() []BankExtensionTransactionSchemaCharacterSkin {
	return []BankExtensionTransactionSchemaCharacterSkin{
		BankExtensionTransactionSchemaCharacterSkinMen1,
		BankExtensionTransactionSchemaCharacterSkinMen2,
		BankExtensionTransactionSchemaCharacterSkinMen3,
		BankExtensionTransactionSchemaCharacterSkinWomen1,
		BankExtensionTransactionSchemaCharacterSkinWomen2,
		BankExtensionTransactionSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BankExtensionTransactionSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case BankExtensionTransactionSchemaCharacterSkinMen1:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCharacterSkinMen2:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCharacterSkinMen3:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BankExtensionTransactionSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch BankExtensionTransactionSchemaCharacterSkin(data) {
	case BankExtensionTransactionSchemaCharacterSkinMen1:
		*s = BankExtensionTransactionSchemaCharacterSkinMen1
		return nil
	case BankExtensionTransactionSchemaCharacterSkinMen2:
		*s = BankExtensionTransactionSchemaCharacterSkinMen2
		return nil
	case BankExtensionTransactionSchemaCharacterSkinMen3:
		*s = BankExtensionTransactionSchemaCharacterSkinMen3
		return nil
	case BankExtensionTransactionSchemaCharacterSkinWomen1:
		*s = BankExtensionTransactionSchemaCharacterSkinWomen1
		return nil
	case BankExtensionTransactionSchemaCharacterSkinWomen2:
		*s = BankExtensionTransactionSchemaCharacterSkinWomen2
		return nil
	case BankExtensionTransactionSchemaCharacterSkinWomen3:
		*s = BankExtensionTransactionSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BankExtensionTransactionSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason BankExtensionTransactionSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *BankExtensionTransactionSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *BankExtensionTransactionSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *BankExtensionTransactionSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *BankExtensionTransactionSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *BankExtensionTransactionSchemaCooldown) GetReason() BankExtensionTransactionSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *BankExtensionTransactionSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *BankExtensionTransactionSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *BankExtensionTransactionSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *BankExtensionTransactionSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *BankExtensionTransactionSchemaCooldown) SetReason(val BankExtensionTransactionSchemaCooldownReason) {
	s.Reason = val
}

type BankExtensionTransactionSchemaCooldownReason string

const (
	BankExtensionTransactionSchemaCooldownReasonMovement         BankExtensionTransactionSchemaCooldownReason = "movement"
	BankExtensionTransactionSchemaCooldownReasonFight            BankExtensionTransactionSchemaCooldownReason = "fight"
	BankExtensionTransactionSchemaCooldownReasonCrafting         BankExtensionTransactionSchemaCooldownReason = "crafting"
	BankExtensionTransactionSchemaCooldownReasonGathering        BankExtensionTransactionSchemaCooldownReason = "gathering"
	BankExtensionTransactionSchemaCooldownReasonBuyGe            BankExtensionTransactionSchemaCooldownReason = "buy_ge"
	BankExtensionTransactionSchemaCooldownReasonSellGe           BankExtensionTransactionSchemaCooldownReason = "sell_ge"
	BankExtensionTransactionSchemaCooldownReasonCancelGe         BankExtensionTransactionSchemaCooldownReason = "cancel_ge"
	BankExtensionTransactionSchemaCooldownReasonDeleteItem       BankExtensionTransactionSchemaCooldownReason = "delete_item"
	BankExtensionTransactionSchemaCooldownReasonDeposit          BankExtensionTransactionSchemaCooldownReason = "deposit"
	BankExtensionTransactionSchemaCooldownReasonWithdraw         BankExtensionTransactionSchemaCooldownReason = "withdraw"
	BankExtensionTransactionSchemaCooldownReasonDepositGold      BankExtensionTransactionSchemaCooldownReason = "deposit_gold"
	BankExtensionTransactionSchemaCooldownReasonWithdrawGold     BankExtensionTransactionSchemaCooldownReason = "withdraw_gold"
	BankExtensionTransactionSchemaCooldownReasonEquip            BankExtensionTransactionSchemaCooldownReason = "equip"
	BankExtensionTransactionSchemaCooldownReasonUnequip          BankExtensionTransactionSchemaCooldownReason = "unequip"
	BankExtensionTransactionSchemaCooldownReasonTask             BankExtensionTransactionSchemaCooldownReason = "task"
	BankExtensionTransactionSchemaCooldownReasonRecycling        BankExtensionTransactionSchemaCooldownReason = "recycling"
	BankExtensionTransactionSchemaCooldownReasonRest             BankExtensionTransactionSchemaCooldownReason = "rest"
	BankExtensionTransactionSchemaCooldownReasonUse              BankExtensionTransactionSchemaCooldownReason = "use"
	BankExtensionTransactionSchemaCooldownReasonBuyBankExpansion BankExtensionTransactionSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all BankExtensionTransactionSchemaCooldownReason values.
func (BankExtensionTransactionSchemaCooldownReason) AllValues() []BankExtensionTransactionSchemaCooldownReason {
	return []BankExtensionTransactionSchemaCooldownReason{
		BankExtensionTransactionSchemaCooldownReasonMovement,
		BankExtensionTransactionSchemaCooldownReasonFight,
		BankExtensionTransactionSchemaCooldownReasonCrafting,
		BankExtensionTransactionSchemaCooldownReasonGathering,
		BankExtensionTransactionSchemaCooldownReasonBuyGe,
		BankExtensionTransactionSchemaCooldownReasonSellGe,
		BankExtensionTransactionSchemaCooldownReasonCancelGe,
		BankExtensionTransactionSchemaCooldownReasonDeleteItem,
		BankExtensionTransactionSchemaCooldownReasonDeposit,
		BankExtensionTransactionSchemaCooldownReasonWithdraw,
		BankExtensionTransactionSchemaCooldownReasonDepositGold,
		BankExtensionTransactionSchemaCooldownReasonWithdrawGold,
		BankExtensionTransactionSchemaCooldownReasonEquip,
		BankExtensionTransactionSchemaCooldownReasonUnequip,
		BankExtensionTransactionSchemaCooldownReasonTask,
		BankExtensionTransactionSchemaCooldownReasonRecycling,
		BankExtensionTransactionSchemaCooldownReasonRest,
		BankExtensionTransactionSchemaCooldownReasonUse,
		BankExtensionTransactionSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BankExtensionTransactionSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case BankExtensionTransactionSchemaCooldownReasonMovement:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonFight:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonGathering:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonEquip:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonTask:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonRest:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonUse:
		return []byte(s), nil
	case BankExtensionTransactionSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BankExtensionTransactionSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch BankExtensionTransactionSchemaCooldownReason(data) {
	case BankExtensionTransactionSchemaCooldownReasonMovement:
		*s = BankExtensionTransactionSchemaCooldownReasonMovement
		return nil
	case BankExtensionTransactionSchemaCooldownReasonFight:
		*s = BankExtensionTransactionSchemaCooldownReasonFight
		return nil
	case BankExtensionTransactionSchemaCooldownReasonCrafting:
		*s = BankExtensionTransactionSchemaCooldownReasonCrafting
		return nil
	case BankExtensionTransactionSchemaCooldownReasonGathering:
		*s = BankExtensionTransactionSchemaCooldownReasonGathering
		return nil
	case BankExtensionTransactionSchemaCooldownReasonBuyGe:
		*s = BankExtensionTransactionSchemaCooldownReasonBuyGe
		return nil
	case BankExtensionTransactionSchemaCooldownReasonSellGe:
		*s = BankExtensionTransactionSchemaCooldownReasonSellGe
		return nil
	case BankExtensionTransactionSchemaCooldownReasonCancelGe:
		*s = BankExtensionTransactionSchemaCooldownReasonCancelGe
		return nil
	case BankExtensionTransactionSchemaCooldownReasonDeleteItem:
		*s = BankExtensionTransactionSchemaCooldownReasonDeleteItem
		return nil
	case BankExtensionTransactionSchemaCooldownReasonDeposit:
		*s = BankExtensionTransactionSchemaCooldownReasonDeposit
		return nil
	case BankExtensionTransactionSchemaCooldownReasonWithdraw:
		*s = BankExtensionTransactionSchemaCooldownReasonWithdraw
		return nil
	case BankExtensionTransactionSchemaCooldownReasonDepositGold:
		*s = BankExtensionTransactionSchemaCooldownReasonDepositGold
		return nil
	case BankExtensionTransactionSchemaCooldownReasonWithdrawGold:
		*s = BankExtensionTransactionSchemaCooldownReasonWithdrawGold
		return nil
	case BankExtensionTransactionSchemaCooldownReasonEquip:
		*s = BankExtensionTransactionSchemaCooldownReasonEquip
		return nil
	case BankExtensionTransactionSchemaCooldownReasonUnequip:
		*s = BankExtensionTransactionSchemaCooldownReasonUnequip
		return nil
	case BankExtensionTransactionSchemaCooldownReasonTask:
		*s = BankExtensionTransactionSchemaCooldownReasonTask
		return nil
	case BankExtensionTransactionSchemaCooldownReasonRecycling:
		*s = BankExtensionTransactionSchemaCooldownReasonRecycling
		return nil
	case BankExtensionTransactionSchemaCooldownReasonRest:
		*s = BankExtensionTransactionSchemaCooldownReasonRest
		return nil
	case BankExtensionTransactionSchemaCooldownReasonUse:
		*s = BankExtensionTransactionSchemaCooldownReasonUse
		return nil
	case BankExtensionTransactionSchemaCooldownReasonBuyBankExpansion:
		*s = BankExtensionTransactionSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BankExtensionTransactionSchemaTransaction struct {
	// Price of the bank extension.
	Price int `json:"price"`
}

// GetPrice returns the value of Price.
func (s *BankExtensionTransactionSchemaTransaction) GetPrice() int {
	return s.Price
}

// SetPrice sets the value of Price.
func (s *BankExtensionTransactionSchemaTransaction) SetPrice(val int) {
	s.Price = val
}

// Ref: #/components/schemas/BankGoldTransactionResponseSchema
type BankGoldTransactionResponseSchema struct {
	Data BankGoldTransactionSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *BankGoldTransactionResponseSchema) GetData() BankGoldTransactionSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *BankGoldTransactionResponseSchema) SetData(val BankGoldTransactionSchema) {
	s.Data = val
}

func (*BankGoldTransactionResponseSchema) actionDepositBankGoldMyNameActionBankDepositGoldPostRes() {}
func (*BankGoldTransactionResponseSchema) actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes() {
}

// Ref: #/components/schemas/BankGoldTransactionSchema
type BankGoldTransactionSchema struct {
	// Cooldown details.
	Cooldown BankGoldTransactionSchemaCooldown `json:"cooldown"`
	// Bank details.
	Bank BankGoldTransactionSchemaBank `json:"bank"`
	// Player details.
	Character BankGoldTransactionSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *BankGoldTransactionSchema) GetCooldown() BankGoldTransactionSchemaCooldown {
	return s.Cooldown
}

// GetBank returns the value of Bank.
func (s *BankGoldTransactionSchema) GetBank() BankGoldTransactionSchemaBank {
	return s.Bank
}

// GetCharacter returns the value of Character.
func (s *BankGoldTransactionSchema) GetCharacter() BankGoldTransactionSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *BankGoldTransactionSchema) SetCooldown(val BankGoldTransactionSchemaCooldown) {
	s.Cooldown = val
}

// SetBank sets the value of Bank.
func (s *BankGoldTransactionSchema) SetBank(val BankGoldTransactionSchemaBank) {
	s.Bank = val
}

// SetCharacter sets the value of Character.
func (s *BankGoldTransactionSchema) SetCharacter(val BankGoldTransactionSchemaCharacter) {
	s.Character = val
}

type BankGoldTransactionSchemaBank struct {
	// Quantity of gold.
	Quantity int `json:"quantity"`
}

// GetQuantity returns the value of Quantity.
func (s *BankGoldTransactionSchemaBank) GetQuantity() int {
	return s.Quantity
}

// SetQuantity sets the value of Quantity.
func (s *BankGoldTransactionSchemaBank) SetQuantity(val int) {
	s.Quantity = val
}

type BankGoldTransactionSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin BankGoldTransactionSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *BankGoldTransactionSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *BankGoldTransactionSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *BankGoldTransactionSchemaCharacter) GetSkin() BankGoldTransactionSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *BankGoldTransactionSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *BankGoldTransactionSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *BankGoldTransactionSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *BankGoldTransactionSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *BankGoldTransactionSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *BankGoldTransactionSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *BankGoldTransactionSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *BankGoldTransactionSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *BankGoldTransactionSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *BankGoldTransactionSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *BankGoldTransactionSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *BankGoldTransactionSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *BankGoldTransactionSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *BankGoldTransactionSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *BankGoldTransactionSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *BankGoldTransactionSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *BankGoldTransactionSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *BankGoldTransactionSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *BankGoldTransactionSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *BankGoldTransactionSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *BankGoldTransactionSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *BankGoldTransactionSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *BankGoldTransactionSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *BankGoldTransactionSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *BankGoldTransactionSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *BankGoldTransactionSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *BankGoldTransactionSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *BankGoldTransactionSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *BankGoldTransactionSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *BankGoldTransactionSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *BankGoldTransactionSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *BankGoldTransactionSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *BankGoldTransactionSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *BankGoldTransactionSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *BankGoldTransactionSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *BankGoldTransactionSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *BankGoldTransactionSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *BankGoldTransactionSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *BankGoldTransactionSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *BankGoldTransactionSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *BankGoldTransactionSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *BankGoldTransactionSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *BankGoldTransactionSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *BankGoldTransactionSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *BankGoldTransactionSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *BankGoldTransactionSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *BankGoldTransactionSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *BankGoldTransactionSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *BankGoldTransactionSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *BankGoldTransactionSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *BankGoldTransactionSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *BankGoldTransactionSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *BankGoldTransactionSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *BankGoldTransactionSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *BankGoldTransactionSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *BankGoldTransactionSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *BankGoldTransactionSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *BankGoldTransactionSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *BankGoldTransactionSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *BankGoldTransactionSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *BankGoldTransactionSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *BankGoldTransactionSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *BankGoldTransactionSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *BankGoldTransactionSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *BankGoldTransactionSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *BankGoldTransactionSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *BankGoldTransactionSchemaCharacter) SetSkin(val BankGoldTransactionSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *BankGoldTransactionSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *BankGoldTransactionSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *BankGoldTransactionSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *BankGoldTransactionSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *BankGoldTransactionSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *BankGoldTransactionSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *BankGoldTransactionSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *BankGoldTransactionSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *BankGoldTransactionSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *BankGoldTransactionSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *BankGoldTransactionSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *BankGoldTransactionSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *BankGoldTransactionSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *BankGoldTransactionSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *BankGoldTransactionSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *BankGoldTransactionSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *BankGoldTransactionSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *BankGoldTransactionSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *BankGoldTransactionSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *BankGoldTransactionSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *BankGoldTransactionSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *BankGoldTransactionSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *BankGoldTransactionSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *BankGoldTransactionSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *BankGoldTransactionSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *BankGoldTransactionSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *BankGoldTransactionSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *BankGoldTransactionSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *BankGoldTransactionSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *BankGoldTransactionSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *BankGoldTransactionSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *BankGoldTransactionSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *BankGoldTransactionSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *BankGoldTransactionSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *BankGoldTransactionSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *BankGoldTransactionSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *BankGoldTransactionSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *BankGoldTransactionSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *BankGoldTransactionSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *BankGoldTransactionSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *BankGoldTransactionSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *BankGoldTransactionSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *BankGoldTransactionSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *BankGoldTransactionSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *BankGoldTransactionSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *BankGoldTransactionSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *BankGoldTransactionSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *BankGoldTransactionSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *BankGoldTransactionSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *BankGoldTransactionSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *BankGoldTransactionSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *BankGoldTransactionSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *BankGoldTransactionSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *BankGoldTransactionSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *BankGoldTransactionSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *BankGoldTransactionSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *BankGoldTransactionSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *BankGoldTransactionSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *BankGoldTransactionSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *BankGoldTransactionSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *BankGoldTransactionSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *BankGoldTransactionSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *BankGoldTransactionSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *BankGoldTransactionSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type BankGoldTransactionSchemaCharacterSkin string

const (
	BankGoldTransactionSchemaCharacterSkinMen1   BankGoldTransactionSchemaCharacterSkin = "men1"
	BankGoldTransactionSchemaCharacterSkinMen2   BankGoldTransactionSchemaCharacterSkin = "men2"
	BankGoldTransactionSchemaCharacterSkinMen3   BankGoldTransactionSchemaCharacterSkin = "men3"
	BankGoldTransactionSchemaCharacterSkinWomen1 BankGoldTransactionSchemaCharacterSkin = "women1"
	BankGoldTransactionSchemaCharacterSkinWomen2 BankGoldTransactionSchemaCharacterSkin = "women2"
	BankGoldTransactionSchemaCharacterSkinWomen3 BankGoldTransactionSchemaCharacterSkin = "women3"
)

// AllValues returns all BankGoldTransactionSchemaCharacterSkin values.
func (BankGoldTransactionSchemaCharacterSkin) AllValues() []BankGoldTransactionSchemaCharacterSkin {
	return []BankGoldTransactionSchemaCharacterSkin{
		BankGoldTransactionSchemaCharacterSkinMen1,
		BankGoldTransactionSchemaCharacterSkinMen2,
		BankGoldTransactionSchemaCharacterSkinMen3,
		BankGoldTransactionSchemaCharacterSkinWomen1,
		BankGoldTransactionSchemaCharacterSkinWomen2,
		BankGoldTransactionSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BankGoldTransactionSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case BankGoldTransactionSchemaCharacterSkinMen1:
		return []byte(s), nil
	case BankGoldTransactionSchemaCharacterSkinMen2:
		return []byte(s), nil
	case BankGoldTransactionSchemaCharacterSkinMen3:
		return []byte(s), nil
	case BankGoldTransactionSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case BankGoldTransactionSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case BankGoldTransactionSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BankGoldTransactionSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch BankGoldTransactionSchemaCharacterSkin(data) {
	case BankGoldTransactionSchemaCharacterSkinMen1:
		*s = BankGoldTransactionSchemaCharacterSkinMen1
		return nil
	case BankGoldTransactionSchemaCharacterSkinMen2:
		*s = BankGoldTransactionSchemaCharacterSkinMen2
		return nil
	case BankGoldTransactionSchemaCharacterSkinMen3:
		*s = BankGoldTransactionSchemaCharacterSkinMen3
		return nil
	case BankGoldTransactionSchemaCharacterSkinWomen1:
		*s = BankGoldTransactionSchemaCharacterSkinWomen1
		return nil
	case BankGoldTransactionSchemaCharacterSkinWomen2:
		*s = BankGoldTransactionSchemaCharacterSkinWomen2
		return nil
	case BankGoldTransactionSchemaCharacterSkinWomen3:
		*s = BankGoldTransactionSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BankGoldTransactionSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason BankGoldTransactionSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *BankGoldTransactionSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *BankGoldTransactionSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *BankGoldTransactionSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *BankGoldTransactionSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *BankGoldTransactionSchemaCooldown) GetReason() BankGoldTransactionSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *BankGoldTransactionSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *BankGoldTransactionSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *BankGoldTransactionSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *BankGoldTransactionSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *BankGoldTransactionSchemaCooldown) SetReason(val BankGoldTransactionSchemaCooldownReason) {
	s.Reason = val
}

type BankGoldTransactionSchemaCooldownReason string

const (
	BankGoldTransactionSchemaCooldownReasonMovement         BankGoldTransactionSchemaCooldownReason = "movement"
	BankGoldTransactionSchemaCooldownReasonFight            BankGoldTransactionSchemaCooldownReason = "fight"
	BankGoldTransactionSchemaCooldownReasonCrafting         BankGoldTransactionSchemaCooldownReason = "crafting"
	BankGoldTransactionSchemaCooldownReasonGathering        BankGoldTransactionSchemaCooldownReason = "gathering"
	BankGoldTransactionSchemaCooldownReasonBuyGe            BankGoldTransactionSchemaCooldownReason = "buy_ge"
	BankGoldTransactionSchemaCooldownReasonSellGe           BankGoldTransactionSchemaCooldownReason = "sell_ge"
	BankGoldTransactionSchemaCooldownReasonCancelGe         BankGoldTransactionSchemaCooldownReason = "cancel_ge"
	BankGoldTransactionSchemaCooldownReasonDeleteItem       BankGoldTransactionSchemaCooldownReason = "delete_item"
	BankGoldTransactionSchemaCooldownReasonDeposit          BankGoldTransactionSchemaCooldownReason = "deposit"
	BankGoldTransactionSchemaCooldownReasonWithdraw         BankGoldTransactionSchemaCooldownReason = "withdraw"
	BankGoldTransactionSchemaCooldownReasonDepositGold      BankGoldTransactionSchemaCooldownReason = "deposit_gold"
	BankGoldTransactionSchemaCooldownReasonWithdrawGold     BankGoldTransactionSchemaCooldownReason = "withdraw_gold"
	BankGoldTransactionSchemaCooldownReasonEquip            BankGoldTransactionSchemaCooldownReason = "equip"
	BankGoldTransactionSchemaCooldownReasonUnequip          BankGoldTransactionSchemaCooldownReason = "unequip"
	BankGoldTransactionSchemaCooldownReasonTask             BankGoldTransactionSchemaCooldownReason = "task"
	BankGoldTransactionSchemaCooldownReasonRecycling        BankGoldTransactionSchemaCooldownReason = "recycling"
	BankGoldTransactionSchemaCooldownReasonRest             BankGoldTransactionSchemaCooldownReason = "rest"
	BankGoldTransactionSchemaCooldownReasonUse              BankGoldTransactionSchemaCooldownReason = "use"
	BankGoldTransactionSchemaCooldownReasonBuyBankExpansion BankGoldTransactionSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all BankGoldTransactionSchemaCooldownReason values.
func (BankGoldTransactionSchemaCooldownReason) AllValues() []BankGoldTransactionSchemaCooldownReason {
	return []BankGoldTransactionSchemaCooldownReason{
		BankGoldTransactionSchemaCooldownReasonMovement,
		BankGoldTransactionSchemaCooldownReasonFight,
		BankGoldTransactionSchemaCooldownReasonCrafting,
		BankGoldTransactionSchemaCooldownReasonGathering,
		BankGoldTransactionSchemaCooldownReasonBuyGe,
		BankGoldTransactionSchemaCooldownReasonSellGe,
		BankGoldTransactionSchemaCooldownReasonCancelGe,
		BankGoldTransactionSchemaCooldownReasonDeleteItem,
		BankGoldTransactionSchemaCooldownReasonDeposit,
		BankGoldTransactionSchemaCooldownReasonWithdraw,
		BankGoldTransactionSchemaCooldownReasonDepositGold,
		BankGoldTransactionSchemaCooldownReasonWithdrawGold,
		BankGoldTransactionSchemaCooldownReasonEquip,
		BankGoldTransactionSchemaCooldownReasonUnequip,
		BankGoldTransactionSchemaCooldownReasonTask,
		BankGoldTransactionSchemaCooldownReasonRecycling,
		BankGoldTransactionSchemaCooldownReasonRest,
		BankGoldTransactionSchemaCooldownReasonUse,
		BankGoldTransactionSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BankGoldTransactionSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case BankGoldTransactionSchemaCooldownReasonMovement:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonFight:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonGathering:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonEquip:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonTask:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonRest:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonUse:
		return []byte(s), nil
	case BankGoldTransactionSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BankGoldTransactionSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch BankGoldTransactionSchemaCooldownReason(data) {
	case BankGoldTransactionSchemaCooldownReasonMovement:
		*s = BankGoldTransactionSchemaCooldownReasonMovement
		return nil
	case BankGoldTransactionSchemaCooldownReasonFight:
		*s = BankGoldTransactionSchemaCooldownReasonFight
		return nil
	case BankGoldTransactionSchemaCooldownReasonCrafting:
		*s = BankGoldTransactionSchemaCooldownReasonCrafting
		return nil
	case BankGoldTransactionSchemaCooldownReasonGathering:
		*s = BankGoldTransactionSchemaCooldownReasonGathering
		return nil
	case BankGoldTransactionSchemaCooldownReasonBuyGe:
		*s = BankGoldTransactionSchemaCooldownReasonBuyGe
		return nil
	case BankGoldTransactionSchemaCooldownReasonSellGe:
		*s = BankGoldTransactionSchemaCooldownReasonSellGe
		return nil
	case BankGoldTransactionSchemaCooldownReasonCancelGe:
		*s = BankGoldTransactionSchemaCooldownReasonCancelGe
		return nil
	case BankGoldTransactionSchemaCooldownReasonDeleteItem:
		*s = BankGoldTransactionSchemaCooldownReasonDeleteItem
		return nil
	case BankGoldTransactionSchemaCooldownReasonDeposit:
		*s = BankGoldTransactionSchemaCooldownReasonDeposit
		return nil
	case BankGoldTransactionSchemaCooldownReasonWithdraw:
		*s = BankGoldTransactionSchemaCooldownReasonWithdraw
		return nil
	case BankGoldTransactionSchemaCooldownReasonDepositGold:
		*s = BankGoldTransactionSchemaCooldownReasonDepositGold
		return nil
	case BankGoldTransactionSchemaCooldownReasonWithdrawGold:
		*s = BankGoldTransactionSchemaCooldownReasonWithdrawGold
		return nil
	case BankGoldTransactionSchemaCooldownReasonEquip:
		*s = BankGoldTransactionSchemaCooldownReasonEquip
		return nil
	case BankGoldTransactionSchemaCooldownReasonUnequip:
		*s = BankGoldTransactionSchemaCooldownReasonUnequip
		return nil
	case BankGoldTransactionSchemaCooldownReasonTask:
		*s = BankGoldTransactionSchemaCooldownReasonTask
		return nil
	case BankGoldTransactionSchemaCooldownReasonRecycling:
		*s = BankGoldTransactionSchemaCooldownReasonRecycling
		return nil
	case BankGoldTransactionSchemaCooldownReasonRest:
		*s = BankGoldTransactionSchemaCooldownReasonRest
		return nil
	case BankGoldTransactionSchemaCooldownReasonUse:
		*s = BankGoldTransactionSchemaCooldownReasonUse
		return nil
	case BankGoldTransactionSchemaCooldownReasonBuyBankExpansion:
		*s = BankGoldTransactionSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BankItemTransactionResponseSchema
type BankItemTransactionResponseSchema struct {
	Data BankItemTransactionSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *BankItemTransactionResponseSchema) GetData() BankItemTransactionSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *BankItemTransactionResponseSchema) SetData(val BankItemTransactionSchema) {
	s.Data = val
}

func (*BankItemTransactionResponseSchema) actionDepositBankMyNameActionBankDepositPostRes()   {}
func (*BankItemTransactionResponseSchema) actionWithdrawBankMyNameActionBankWithdrawPostRes() {}

// Ref: #/components/schemas/BankItemTransactionSchema
type BankItemTransactionSchema struct {
	// Cooldown details.
	Cooldown BankItemTransactionSchemaCooldown `json:"cooldown"`
	// Item details.
	Item BankItemTransactionSchemaItem `json:"item"`
	// Items in your banks.
	Bank []SimpleItemSchema `json:"bank"`
	// Player details.
	Character BankItemTransactionSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *BankItemTransactionSchema) GetCooldown() BankItemTransactionSchemaCooldown {
	return s.Cooldown
}

// GetItem returns the value of Item.
func (s *BankItemTransactionSchema) GetItem() BankItemTransactionSchemaItem {
	return s.Item
}

// GetBank returns the value of Bank.
func (s *BankItemTransactionSchema) GetBank() []SimpleItemSchema {
	return s.Bank
}

// GetCharacter returns the value of Character.
func (s *BankItemTransactionSchema) GetCharacter() BankItemTransactionSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *BankItemTransactionSchema) SetCooldown(val BankItemTransactionSchemaCooldown) {
	s.Cooldown = val
}

// SetItem sets the value of Item.
func (s *BankItemTransactionSchema) SetItem(val BankItemTransactionSchemaItem) {
	s.Item = val
}

// SetBank sets the value of Bank.
func (s *BankItemTransactionSchema) SetBank(val []SimpleItemSchema) {
	s.Bank = val
}

// SetCharacter sets the value of Character.
func (s *BankItemTransactionSchema) SetCharacter(val BankItemTransactionSchemaCharacter) {
	s.Character = val
}

type BankItemTransactionSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin BankItemTransactionSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *BankItemTransactionSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *BankItemTransactionSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *BankItemTransactionSchemaCharacter) GetSkin() BankItemTransactionSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *BankItemTransactionSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *BankItemTransactionSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *BankItemTransactionSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *BankItemTransactionSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *BankItemTransactionSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *BankItemTransactionSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *BankItemTransactionSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *BankItemTransactionSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *BankItemTransactionSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *BankItemTransactionSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *BankItemTransactionSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *BankItemTransactionSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *BankItemTransactionSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *BankItemTransactionSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *BankItemTransactionSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *BankItemTransactionSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *BankItemTransactionSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *BankItemTransactionSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *BankItemTransactionSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *BankItemTransactionSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *BankItemTransactionSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *BankItemTransactionSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *BankItemTransactionSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *BankItemTransactionSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *BankItemTransactionSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *BankItemTransactionSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *BankItemTransactionSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *BankItemTransactionSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *BankItemTransactionSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *BankItemTransactionSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *BankItemTransactionSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *BankItemTransactionSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *BankItemTransactionSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *BankItemTransactionSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *BankItemTransactionSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *BankItemTransactionSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *BankItemTransactionSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *BankItemTransactionSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *BankItemTransactionSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *BankItemTransactionSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *BankItemTransactionSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *BankItemTransactionSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *BankItemTransactionSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *BankItemTransactionSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *BankItemTransactionSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *BankItemTransactionSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *BankItemTransactionSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *BankItemTransactionSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *BankItemTransactionSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *BankItemTransactionSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *BankItemTransactionSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *BankItemTransactionSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *BankItemTransactionSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *BankItemTransactionSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *BankItemTransactionSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *BankItemTransactionSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *BankItemTransactionSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *BankItemTransactionSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *BankItemTransactionSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *BankItemTransactionSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *BankItemTransactionSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *BankItemTransactionSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *BankItemTransactionSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *BankItemTransactionSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *BankItemTransactionSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *BankItemTransactionSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *BankItemTransactionSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *BankItemTransactionSchemaCharacter) SetSkin(val BankItemTransactionSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *BankItemTransactionSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *BankItemTransactionSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *BankItemTransactionSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *BankItemTransactionSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *BankItemTransactionSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *BankItemTransactionSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *BankItemTransactionSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *BankItemTransactionSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *BankItemTransactionSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *BankItemTransactionSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *BankItemTransactionSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *BankItemTransactionSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *BankItemTransactionSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *BankItemTransactionSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *BankItemTransactionSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *BankItemTransactionSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *BankItemTransactionSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *BankItemTransactionSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *BankItemTransactionSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *BankItemTransactionSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *BankItemTransactionSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *BankItemTransactionSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *BankItemTransactionSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *BankItemTransactionSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *BankItemTransactionSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *BankItemTransactionSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *BankItemTransactionSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *BankItemTransactionSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *BankItemTransactionSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *BankItemTransactionSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *BankItemTransactionSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *BankItemTransactionSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *BankItemTransactionSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *BankItemTransactionSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *BankItemTransactionSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *BankItemTransactionSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *BankItemTransactionSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *BankItemTransactionSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *BankItemTransactionSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *BankItemTransactionSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *BankItemTransactionSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *BankItemTransactionSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *BankItemTransactionSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *BankItemTransactionSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *BankItemTransactionSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *BankItemTransactionSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *BankItemTransactionSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *BankItemTransactionSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *BankItemTransactionSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *BankItemTransactionSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *BankItemTransactionSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *BankItemTransactionSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *BankItemTransactionSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *BankItemTransactionSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *BankItemTransactionSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *BankItemTransactionSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *BankItemTransactionSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *BankItemTransactionSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *BankItemTransactionSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *BankItemTransactionSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *BankItemTransactionSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *BankItemTransactionSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *BankItemTransactionSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *BankItemTransactionSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *BankItemTransactionSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type BankItemTransactionSchemaCharacterSkin string

const (
	BankItemTransactionSchemaCharacterSkinMen1   BankItemTransactionSchemaCharacterSkin = "men1"
	BankItemTransactionSchemaCharacterSkinMen2   BankItemTransactionSchemaCharacterSkin = "men2"
	BankItemTransactionSchemaCharacterSkinMen3   BankItemTransactionSchemaCharacterSkin = "men3"
	BankItemTransactionSchemaCharacterSkinWomen1 BankItemTransactionSchemaCharacterSkin = "women1"
	BankItemTransactionSchemaCharacterSkinWomen2 BankItemTransactionSchemaCharacterSkin = "women2"
	BankItemTransactionSchemaCharacterSkinWomen3 BankItemTransactionSchemaCharacterSkin = "women3"
)

// AllValues returns all BankItemTransactionSchemaCharacterSkin values.
func (BankItemTransactionSchemaCharacterSkin) AllValues() []BankItemTransactionSchemaCharacterSkin {
	return []BankItemTransactionSchemaCharacterSkin{
		BankItemTransactionSchemaCharacterSkinMen1,
		BankItemTransactionSchemaCharacterSkinMen2,
		BankItemTransactionSchemaCharacterSkinMen3,
		BankItemTransactionSchemaCharacterSkinWomen1,
		BankItemTransactionSchemaCharacterSkinWomen2,
		BankItemTransactionSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BankItemTransactionSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case BankItemTransactionSchemaCharacterSkinMen1:
		return []byte(s), nil
	case BankItemTransactionSchemaCharacterSkinMen2:
		return []byte(s), nil
	case BankItemTransactionSchemaCharacterSkinMen3:
		return []byte(s), nil
	case BankItemTransactionSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case BankItemTransactionSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case BankItemTransactionSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BankItemTransactionSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch BankItemTransactionSchemaCharacterSkin(data) {
	case BankItemTransactionSchemaCharacterSkinMen1:
		*s = BankItemTransactionSchemaCharacterSkinMen1
		return nil
	case BankItemTransactionSchemaCharacterSkinMen2:
		*s = BankItemTransactionSchemaCharacterSkinMen2
		return nil
	case BankItemTransactionSchemaCharacterSkinMen3:
		*s = BankItemTransactionSchemaCharacterSkinMen3
		return nil
	case BankItemTransactionSchemaCharacterSkinWomen1:
		*s = BankItemTransactionSchemaCharacterSkinWomen1
		return nil
	case BankItemTransactionSchemaCharacterSkinWomen2:
		*s = BankItemTransactionSchemaCharacterSkinWomen2
		return nil
	case BankItemTransactionSchemaCharacterSkinWomen3:
		*s = BankItemTransactionSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BankItemTransactionSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason BankItemTransactionSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *BankItemTransactionSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *BankItemTransactionSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *BankItemTransactionSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *BankItemTransactionSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *BankItemTransactionSchemaCooldown) GetReason() BankItemTransactionSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *BankItemTransactionSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *BankItemTransactionSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *BankItemTransactionSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *BankItemTransactionSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *BankItemTransactionSchemaCooldown) SetReason(val BankItemTransactionSchemaCooldownReason) {
	s.Reason = val
}

type BankItemTransactionSchemaCooldownReason string

const (
	BankItemTransactionSchemaCooldownReasonMovement         BankItemTransactionSchemaCooldownReason = "movement"
	BankItemTransactionSchemaCooldownReasonFight            BankItemTransactionSchemaCooldownReason = "fight"
	BankItemTransactionSchemaCooldownReasonCrafting         BankItemTransactionSchemaCooldownReason = "crafting"
	BankItemTransactionSchemaCooldownReasonGathering        BankItemTransactionSchemaCooldownReason = "gathering"
	BankItemTransactionSchemaCooldownReasonBuyGe            BankItemTransactionSchemaCooldownReason = "buy_ge"
	BankItemTransactionSchemaCooldownReasonSellGe           BankItemTransactionSchemaCooldownReason = "sell_ge"
	BankItemTransactionSchemaCooldownReasonCancelGe         BankItemTransactionSchemaCooldownReason = "cancel_ge"
	BankItemTransactionSchemaCooldownReasonDeleteItem       BankItemTransactionSchemaCooldownReason = "delete_item"
	BankItemTransactionSchemaCooldownReasonDeposit          BankItemTransactionSchemaCooldownReason = "deposit"
	BankItemTransactionSchemaCooldownReasonWithdraw         BankItemTransactionSchemaCooldownReason = "withdraw"
	BankItemTransactionSchemaCooldownReasonDepositGold      BankItemTransactionSchemaCooldownReason = "deposit_gold"
	BankItemTransactionSchemaCooldownReasonWithdrawGold     BankItemTransactionSchemaCooldownReason = "withdraw_gold"
	BankItemTransactionSchemaCooldownReasonEquip            BankItemTransactionSchemaCooldownReason = "equip"
	BankItemTransactionSchemaCooldownReasonUnequip          BankItemTransactionSchemaCooldownReason = "unequip"
	BankItemTransactionSchemaCooldownReasonTask             BankItemTransactionSchemaCooldownReason = "task"
	BankItemTransactionSchemaCooldownReasonRecycling        BankItemTransactionSchemaCooldownReason = "recycling"
	BankItemTransactionSchemaCooldownReasonRest             BankItemTransactionSchemaCooldownReason = "rest"
	BankItemTransactionSchemaCooldownReasonUse              BankItemTransactionSchemaCooldownReason = "use"
	BankItemTransactionSchemaCooldownReasonBuyBankExpansion BankItemTransactionSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all BankItemTransactionSchemaCooldownReason values.
func (BankItemTransactionSchemaCooldownReason) AllValues() []BankItemTransactionSchemaCooldownReason {
	return []BankItemTransactionSchemaCooldownReason{
		BankItemTransactionSchemaCooldownReasonMovement,
		BankItemTransactionSchemaCooldownReasonFight,
		BankItemTransactionSchemaCooldownReasonCrafting,
		BankItemTransactionSchemaCooldownReasonGathering,
		BankItemTransactionSchemaCooldownReasonBuyGe,
		BankItemTransactionSchemaCooldownReasonSellGe,
		BankItemTransactionSchemaCooldownReasonCancelGe,
		BankItemTransactionSchemaCooldownReasonDeleteItem,
		BankItemTransactionSchemaCooldownReasonDeposit,
		BankItemTransactionSchemaCooldownReasonWithdraw,
		BankItemTransactionSchemaCooldownReasonDepositGold,
		BankItemTransactionSchemaCooldownReasonWithdrawGold,
		BankItemTransactionSchemaCooldownReasonEquip,
		BankItemTransactionSchemaCooldownReasonUnequip,
		BankItemTransactionSchemaCooldownReasonTask,
		BankItemTransactionSchemaCooldownReasonRecycling,
		BankItemTransactionSchemaCooldownReasonRest,
		BankItemTransactionSchemaCooldownReasonUse,
		BankItemTransactionSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BankItemTransactionSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case BankItemTransactionSchemaCooldownReasonMovement:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonFight:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonGathering:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonEquip:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonTask:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonRest:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonUse:
		return []byte(s), nil
	case BankItemTransactionSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BankItemTransactionSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch BankItemTransactionSchemaCooldownReason(data) {
	case BankItemTransactionSchemaCooldownReasonMovement:
		*s = BankItemTransactionSchemaCooldownReasonMovement
		return nil
	case BankItemTransactionSchemaCooldownReasonFight:
		*s = BankItemTransactionSchemaCooldownReasonFight
		return nil
	case BankItemTransactionSchemaCooldownReasonCrafting:
		*s = BankItemTransactionSchemaCooldownReasonCrafting
		return nil
	case BankItemTransactionSchemaCooldownReasonGathering:
		*s = BankItemTransactionSchemaCooldownReasonGathering
		return nil
	case BankItemTransactionSchemaCooldownReasonBuyGe:
		*s = BankItemTransactionSchemaCooldownReasonBuyGe
		return nil
	case BankItemTransactionSchemaCooldownReasonSellGe:
		*s = BankItemTransactionSchemaCooldownReasonSellGe
		return nil
	case BankItemTransactionSchemaCooldownReasonCancelGe:
		*s = BankItemTransactionSchemaCooldownReasonCancelGe
		return nil
	case BankItemTransactionSchemaCooldownReasonDeleteItem:
		*s = BankItemTransactionSchemaCooldownReasonDeleteItem
		return nil
	case BankItemTransactionSchemaCooldownReasonDeposit:
		*s = BankItemTransactionSchemaCooldownReasonDeposit
		return nil
	case BankItemTransactionSchemaCooldownReasonWithdraw:
		*s = BankItemTransactionSchemaCooldownReasonWithdraw
		return nil
	case BankItemTransactionSchemaCooldownReasonDepositGold:
		*s = BankItemTransactionSchemaCooldownReasonDepositGold
		return nil
	case BankItemTransactionSchemaCooldownReasonWithdrawGold:
		*s = BankItemTransactionSchemaCooldownReasonWithdrawGold
		return nil
	case BankItemTransactionSchemaCooldownReasonEquip:
		*s = BankItemTransactionSchemaCooldownReasonEquip
		return nil
	case BankItemTransactionSchemaCooldownReasonUnequip:
		*s = BankItemTransactionSchemaCooldownReasonUnequip
		return nil
	case BankItemTransactionSchemaCooldownReasonTask:
		*s = BankItemTransactionSchemaCooldownReasonTask
		return nil
	case BankItemTransactionSchemaCooldownReasonRecycling:
		*s = BankItemTransactionSchemaCooldownReasonRecycling
		return nil
	case BankItemTransactionSchemaCooldownReasonRest:
		*s = BankItemTransactionSchemaCooldownReasonRest
		return nil
	case BankItemTransactionSchemaCooldownReasonUse:
		*s = BankItemTransactionSchemaCooldownReasonUse
		return nil
	case BankItemTransactionSchemaCooldownReasonBuyBankExpansion:
		*s = BankItemTransactionSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BankItemTransactionSchemaItem struct {
	// Item name.
	Name string `json:"name"`
	// Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`
	// Item level.
	Level int `json:"level"`
	// Item type.
	Type string `json:"type"`
	// Item subtype.
	Subtype string `json:"subtype"`
	// Item description.
	Description string `json:"description"`
	// List of object effects. For equipment, it will include item stats.
	Effects []ItemEffectSchema `json:"effects"`
	// Craft information. If applicable.
	Craft OptBankItemTransactionSchemaItemCraft `json:"craft"`
	// Item tradeable status. A non-tradeable item cannot be exchanged or sold.
	Tradeable bool `json:"tradeable"`
}

// GetName returns the value of Name.
func (s *BankItemTransactionSchemaItem) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *BankItemTransactionSchemaItem) GetCode() string {
	return s.Code
}

// GetLevel returns the value of Level.
func (s *BankItemTransactionSchemaItem) GetLevel() int {
	return s.Level
}

// GetType returns the value of Type.
func (s *BankItemTransactionSchemaItem) GetType() string {
	return s.Type
}

// GetSubtype returns the value of Subtype.
func (s *BankItemTransactionSchemaItem) GetSubtype() string {
	return s.Subtype
}

// GetDescription returns the value of Description.
func (s *BankItemTransactionSchemaItem) GetDescription() string {
	return s.Description
}

// GetEffects returns the value of Effects.
func (s *BankItemTransactionSchemaItem) GetEffects() []ItemEffectSchema {
	return s.Effects
}

// GetCraft returns the value of Craft.
func (s *BankItemTransactionSchemaItem) GetCraft() OptBankItemTransactionSchemaItemCraft {
	return s.Craft
}

// GetTradeable returns the value of Tradeable.
func (s *BankItemTransactionSchemaItem) GetTradeable() bool {
	return s.Tradeable
}

// SetName sets the value of Name.
func (s *BankItemTransactionSchemaItem) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *BankItemTransactionSchemaItem) SetCode(val string) {
	s.Code = val
}

// SetLevel sets the value of Level.
func (s *BankItemTransactionSchemaItem) SetLevel(val int) {
	s.Level = val
}

// SetType sets the value of Type.
func (s *BankItemTransactionSchemaItem) SetType(val string) {
	s.Type = val
}

// SetSubtype sets the value of Subtype.
func (s *BankItemTransactionSchemaItem) SetSubtype(val string) {
	s.Subtype = val
}

// SetDescription sets the value of Description.
func (s *BankItemTransactionSchemaItem) SetDescription(val string) {
	s.Description = val
}

// SetEffects sets the value of Effects.
func (s *BankItemTransactionSchemaItem) SetEffects(val []ItemEffectSchema) {
	s.Effects = val
}

// SetCraft sets the value of Craft.
func (s *BankItemTransactionSchemaItem) SetCraft(val OptBankItemTransactionSchemaItemCraft) {
	s.Craft = val
}

// SetTradeable sets the value of Tradeable.
func (s *BankItemTransactionSchemaItem) SetTradeable(val bool) {
	s.Tradeable = val
}

// Craft information. If applicable.
// BankItemTransactionSchemaItemCraft represents sum type.
type BankItemTransactionSchemaItemCraft struct {
	Type        BankItemTransactionSchemaItemCraftType // switch on this field
	CraftSchema CraftSchema
	Null        struct{}
}

// BankItemTransactionSchemaItemCraftType is oneOf type of BankItemTransactionSchemaItemCraft.
type BankItemTransactionSchemaItemCraftType string

// Possible values for BankItemTransactionSchemaItemCraftType.
const (
	CraftSchemaBankItemTransactionSchemaItemCraft BankItemTransactionSchemaItemCraftType = "CraftSchema"
	NullBankItemTransactionSchemaItemCraft        BankItemTransactionSchemaItemCraftType = "struct{}"
)

// IsCraftSchema reports whether BankItemTransactionSchemaItemCraft is CraftSchema.
func (s BankItemTransactionSchemaItemCraft) IsCraftSchema() bool {
	return s.Type == CraftSchemaBankItemTransactionSchemaItemCraft
}

// IsNull reports whether BankItemTransactionSchemaItemCraft is struct{}.
func (s BankItemTransactionSchemaItemCraft) IsNull() bool {
	return s.Type == NullBankItemTransactionSchemaItemCraft
}

// SetCraftSchema sets BankItemTransactionSchemaItemCraft to CraftSchema.
func (s *BankItemTransactionSchemaItemCraft) SetCraftSchema(v CraftSchema) {
	s.Type = CraftSchemaBankItemTransactionSchemaItemCraft
	s.CraftSchema = v
}

// GetCraftSchema returns CraftSchema and true boolean if BankItemTransactionSchemaItemCraft is CraftSchema.
func (s BankItemTransactionSchemaItemCraft) GetCraftSchema() (v CraftSchema, ok bool) {
	if !s.IsCraftSchema() {
		return v, false
	}
	return s.CraftSchema, true
}

// NewCraftSchemaBankItemTransactionSchemaItemCraft returns new BankItemTransactionSchemaItemCraft from CraftSchema.
func NewCraftSchemaBankItemTransactionSchemaItemCraft(v CraftSchema) BankItemTransactionSchemaItemCraft {
	var s BankItemTransactionSchemaItemCraft
	s.SetCraftSchema(v)
	return s
}

// SetNull sets BankItemTransactionSchemaItemCraft to struct{}.
func (s *BankItemTransactionSchemaItemCraft) SetNull(v struct{}) {
	s.Type = NullBankItemTransactionSchemaItemCraft
	s.Null = v
}

// GetNull returns struct{} and true boolean if BankItemTransactionSchemaItemCraft is struct{}.
func (s BankItemTransactionSchemaItemCraft) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullBankItemTransactionSchemaItemCraft returns new BankItemTransactionSchemaItemCraft from struct{}.
func NewNullBankItemTransactionSchemaItemCraft(v struct{}) BankItemTransactionSchemaItemCraft {
	var s BankItemTransactionSchemaItemCraft
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/BankResponseSchema
type BankResponseSchema struct {
	Data BankSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *BankResponseSchema) GetData() BankSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *BankResponseSchema) SetData(val BankSchema) {
	s.Data = val
}

// Ref: #/components/schemas/BankSchema
type BankSchema struct {
	// Maximum slots in your bank.
	Slots int `json:"slots"`
	// Bank expansions.
	Expansions int `json:"expansions"`
	// Next expansion cost.
	NextExpansionCost int `json:"next_expansion_cost"`
	// Quantity of gold in your bank.
	Gold int `json:"gold"`
}

// GetSlots returns the value of Slots.
func (s *BankSchema) GetSlots() int {
	return s.Slots
}

// GetExpansions returns the value of Expansions.
func (s *BankSchema) GetExpansions() int {
	return s.Expansions
}

// GetNextExpansionCost returns the value of NextExpansionCost.
func (s *BankSchema) GetNextExpansionCost() int {
	return s.NextExpansionCost
}

// GetGold returns the value of Gold.
func (s *BankSchema) GetGold() int {
	return s.Gold
}

// SetSlots sets the value of Slots.
func (s *BankSchema) SetSlots(val int) {
	s.Slots = val
}

// SetExpansions sets the value of Expansions.
func (s *BankSchema) SetExpansions(val int) {
	s.Expansions = val
}

// SetNextExpansionCost sets the value of NextExpansionCost.
func (s *BankSchema) SetNextExpansionCost(val int) {
	s.NextExpansionCost = val
}

// SetGold sets the value of Gold.
func (s *BankSchema) SetGold(val int) {
	s.Gold = val
}

// Ref: #/components/schemas/ChangePassword
type ChangePassword struct {
	// Your password.
	CurrentPassword string `json:"current_password"`
	// New password.
	NewPassword string `json:"new_password"`
}

// GetCurrentPassword returns the value of CurrentPassword.
func (s *ChangePassword) GetCurrentPassword() string {
	return s.CurrentPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *ChangePassword) GetNewPassword() string {
	return s.NewPassword
}

// SetCurrentPassword sets the value of CurrentPassword.
func (s *ChangePassword) SetCurrentPassword(val string) {
	s.CurrentPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *ChangePassword) SetNewPassword(val string) {
	s.NewPassword = val
}

// ChangePasswordMyChangePasswordPostCode458 is response for ChangePasswordMyChangePasswordPost operation.
type ChangePasswordMyChangePasswordPostCode458 struct{}

func (*ChangePasswordMyChangePasswordPostCode458) changePasswordMyChangePasswordPostRes() {}

// Ref: #/components/schemas/CharacterFightDataSchema
type CharacterFightDataSchema struct {
	// Cooldown details.
	Cooldown CharacterFightDataSchemaCooldown `json:"cooldown"`
	// Fight details.
	Fight CharacterFightDataSchemaFight `json:"fight"`
	// Player details.
	Character CharacterFightDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterFightDataSchema) GetCooldown() CharacterFightDataSchemaCooldown {
	return s.Cooldown
}

// GetFight returns the value of Fight.
func (s *CharacterFightDataSchema) GetFight() CharacterFightDataSchemaFight {
	return s.Fight
}

// GetCharacter returns the value of Character.
func (s *CharacterFightDataSchema) GetCharacter() CharacterFightDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterFightDataSchema) SetCooldown(val CharacterFightDataSchemaCooldown) {
	s.Cooldown = val
}

// SetFight sets the value of Fight.
func (s *CharacterFightDataSchema) SetFight(val CharacterFightDataSchemaFight) {
	s.Fight = val
}

// SetCharacter sets the value of Character.
func (s *CharacterFightDataSchema) SetCharacter(val CharacterFightDataSchemaCharacter) {
	s.Character = val
}

type CharacterFightDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin CharacterFightDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *CharacterFightDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *CharacterFightDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *CharacterFightDataSchemaCharacter) GetSkin() CharacterFightDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *CharacterFightDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *CharacterFightDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *CharacterFightDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *CharacterFightDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *CharacterFightDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *CharacterFightDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *CharacterFightDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *CharacterFightDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *CharacterFightDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *CharacterFightDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *CharacterFightDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *CharacterFightDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *CharacterFightDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *CharacterFightDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *CharacterFightDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *CharacterFightDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *CharacterFightDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *CharacterFightDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *CharacterFightDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *CharacterFightDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *CharacterFightDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *CharacterFightDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *CharacterFightDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *CharacterFightDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *CharacterFightDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *CharacterFightDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *CharacterFightDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *CharacterFightDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *CharacterFightDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *CharacterFightDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *CharacterFightDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *CharacterFightDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *CharacterFightDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *CharacterFightDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *CharacterFightDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *CharacterFightDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *CharacterFightDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *CharacterFightDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *CharacterFightDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *CharacterFightDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *CharacterFightDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterFightDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *CharacterFightDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *CharacterFightDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *CharacterFightDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *CharacterFightDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *CharacterFightDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *CharacterFightDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *CharacterFightDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *CharacterFightDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *CharacterFightDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *CharacterFightDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *CharacterFightDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *CharacterFightDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *CharacterFightDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *CharacterFightDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *CharacterFightDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *CharacterFightDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *CharacterFightDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *CharacterFightDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *CharacterFightDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *CharacterFightDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *CharacterFightDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *CharacterFightDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *CharacterFightDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *CharacterFightDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *CharacterFightDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *CharacterFightDataSchemaCharacter) SetSkin(val CharacterFightDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *CharacterFightDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *CharacterFightDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *CharacterFightDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *CharacterFightDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *CharacterFightDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *CharacterFightDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *CharacterFightDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *CharacterFightDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *CharacterFightDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *CharacterFightDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *CharacterFightDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *CharacterFightDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *CharacterFightDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *CharacterFightDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *CharacterFightDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *CharacterFightDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *CharacterFightDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *CharacterFightDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *CharacterFightDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *CharacterFightDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *CharacterFightDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *CharacterFightDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *CharacterFightDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *CharacterFightDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *CharacterFightDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *CharacterFightDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *CharacterFightDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *CharacterFightDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *CharacterFightDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *CharacterFightDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *CharacterFightDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *CharacterFightDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *CharacterFightDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *CharacterFightDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *CharacterFightDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *CharacterFightDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *CharacterFightDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *CharacterFightDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *CharacterFightDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *CharacterFightDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *CharacterFightDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterFightDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *CharacterFightDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *CharacterFightDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *CharacterFightDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *CharacterFightDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *CharacterFightDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *CharacterFightDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *CharacterFightDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *CharacterFightDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *CharacterFightDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *CharacterFightDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *CharacterFightDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *CharacterFightDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *CharacterFightDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *CharacterFightDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *CharacterFightDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *CharacterFightDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *CharacterFightDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *CharacterFightDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *CharacterFightDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *CharacterFightDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *CharacterFightDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *CharacterFightDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *CharacterFightDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type CharacterFightDataSchemaCharacterSkin string

const (
	CharacterFightDataSchemaCharacterSkinMen1   CharacterFightDataSchemaCharacterSkin = "men1"
	CharacterFightDataSchemaCharacterSkinMen2   CharacterFightDataSchemaCharacterSkin = "men2"
	CharacterFightDataSchemaCharacterSkinMen3   CharacterFightDataSchemaCharacterSkin = "men3"
	CharacterFightDataSchemaCharacterSkinWomen1 CharacterFightDataSchemaCharacterSkin = "women1"
	CharacterFightDataSchemaCharacterSkinWomen2 CharacterFightDataSchemaCharacterSkin = "women2"
	CharacterFightDataSchemaCharacterSkinWomen3 CharacterFightDataSchemaCharacterSkin = "women3"
)

// AllValues returns all CharacterFightDataSchemaCharacterSkin values.
func (CharacterFightDataSchemaCharacterSkin) AllValues() []CharacterFightDataSchemaCharacterSkin {
	return []CharacterFightDataSchemaCharacterSkin{
		CharacterFightDataSchemaCharacterSkinMen1,
		CharacterFightDataSchemaCharacterSkinMen2,
		CharacterFightDataSchemaCharacterSkinMen3,
		CharacterFightDataSchemaCharacterSkinWomen1,
		CharacterFightDataSchemaCharacterSkinWomen2,
		CharacterFightDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterFightDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case CharacterFightDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case CharacterFightDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case CharacterFightDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case CharacterFightDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case CharacterFightDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case CharacterFightDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterFightDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch CharacterFightDataSchemaCharacterSkin(data) {
	case CharacterFightDataSchemaCharacterSkinMen1:
		*s = CharacterFightDataSchemaCharacterSkinMen1
		return nil
	case CharacterFightDataSchemaCharacterSkinMen2:
		*s = CharacterFightDataSchemaCharacterSkinMen2
		return nil
	case CharacterFightDataSchemaCharacterSkinMen3:
		*s = CharacterFightDataSchemaCharacterSkinMen3
		return nil
	case CharacterFightDataSchemaCharacterSkinWomen1:
		*s = CharacterFightDataSchemaCharacterSkinWomen1
		return nil
	case CharacterFightDataSchemaCharacterSkinWomen2:
		*s = CharacterFightDataSchemaCharacterSkinWomen2
		return nil
	case CharacterFightDataSchemaCharacterSkinWomen3:
		*s = CharacterFightDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CharacterFightDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason CharacterFightDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *CharacterFightDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *CharacterFightDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *CharacterFightDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *CharacterFightDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *CharacterFightDataSchemaCooldown) GetReason() CharacterFightDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *CharacterFightDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *CharacterFightDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *CharacterFightDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *CharacterFightDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *CharacterFightDataSchemaCooldown) SetReason(val CharacterFightDataSchemaCooldownReason) {
	s.Reason = val
}

type CharacterFightDataSchemaCooldownReason string

const (
	CharacterFightDataSchemaCooldownReasonMovement         CharacterFightDataSchemaCooldownReason = "movement"
	CharacterFightDataSchemaCooldownReasonFight            CharacterFightDataSchemaCooldownReason = "fight"
	CharacterFightDataSchemaCooldownReasonCrafting         CharacterFightDataSchemaCooldownReason = "crafting"
	CharacterFightDataSchemaCooldownReasonGathering        CharacterFightDataSchemaCooldownReason = "gathering"
	CharacterFightDataSchemaCooldownReasonBuyGe            CharacterFightDataSchemaCooldownReason = "buy_ge"
	CharacterFightDataSchemaCooldownReasonSellGe           CharacterFightDataSchemaCooldownReason = "sell_ge"
	CharacterFightDataSchemaCooldownReasonCancelGe         CharacterFightDataSchemaCooldownReason = "cancel_ge"
	CharacterFightDataSchemaCooldownReasonDeleteItem       CharacterFightDataSchemaCooldownReason = "delete_item"
	CharacterFightDataSchemaCooldownReasonDeposit          CharacterFightDataSchemaCooldownReason = "deposit"
	CharacterFightDataSchemaCooldownReasonWithdraw         CharacterFightDataSchemaCooldownReason = "withdraw"
	CharacterFightDataSchemaCooldownReasonDepositGold      CharacterFightDataSchemaCooldownReason = "deposit_gold"
	CharacterFightDataSchemaCooldownReasonWithdrawGold     CharacterFightDataSchemaCooldownReason = "withdraw_gold"
	CharacterFightDataSchemaCooldownReasonEquip            CharacterFightDataSchemaCooldownReason = "equip"
	CharacterFightDataSchemaCooldownReasonUnequip          CharacterFightDataSchemaCooldownReason = "unequip"
	CharacterFightDataSchemaCooldownReasonTask             CharacterFightDataSchemaCooldownReason = "task"
	CharacterFightDataSchemaCooldownReasonRecycling        CharacterFightDataSchemaCooldownReason = "recycling"
	CharacterFightDataSchemaCooldownReasonRest             CharacterFightDataSchemaCooldownReason = "rest"
	CharacterFightDataSchemaCooldownReasonUse              CharacterFightDataSchemaCooldownReason = "use"
	CharacterFightDataSchemaCooldownReasonBuyBankExpansion CharacterFightDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all CharacterFightDataSchemaCooldownReason values.
func (CharacterFightDataSchemaCooldownReason) AllValues() []CharacterFightDataSchemaCooldownReason {
	return []CharacterFightDataSchemaCooldownReason{
		CharacterFightDataSchemaCooldownReasonMovement,
		CharacterFightDataSchemaCooldownReasonFight,
		CharacterFightDataSchemaCooldownReasonCrafting,
		CharacterFightDataSchemaCooldownReasonGathering,
		CharacterFightDataSchemaCooldownReasonBuyGe,
		CharacterFightDataSchemaCooldownReasonSellGe,
		CharacterFightDataSchemaCooldownReasonCancelGe,
		CharacterFightDataSchemaCooldownReasonDeleteItem,
		CharacterFightDataSchemaCooldownReasonDeposit,
		CharacterFightDataSchemaCooldownReasonWithdraw,
		CharacterFightDataSchemaCooldownReasonDepositGold,
		CharacterFightDataSchemaCooldownReasonWithdrawGold,
		CharacterFightDataSchemaCooldownReasonEquip,
		CharacterFightDataSchemaCooldownReasonUnequip,
		CharacterFightDataSchemaCooldownReasonTask,
		CharacterFightDataSchemaCooldownReasonRecycling,
		CharacterFightDataSchemaCooldownReasonRest,
		CharacterFightDataSchemaCooldownReasonUse,
		CharacterFightDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterFightDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case CharacterFightDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case CharacterFightDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterFightDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch CharacterFightDataSchemaCooldownReason(data) {
	case CharacterFightDataSchemaCooldownReasonMovement:
		*s = CharacterFightDataSchemaCooldownReasonMovement
		return nil
	case CharacterFightDataSchemaCooldownReasonFight:
		*s = CharacterFightDataSchemaCooldownReasonFight
		return nil
	case CharacterFightDataSchemaCooldownReasonCrafting:
		*s = CharacterFightDataSchemaCooldownReasonCrafting
		return nil
	case CharacterFightDataSchemaCooldownReasonGathering:
		*s = CharacterFightDataSchemaCooldownReasonGathering
		return nil
	case CharacterFightDataSchemaCooldownReasonBuyGe:
		*s = CharacterFightDataSchemaCooldownReasonBuyGe
		return nil
	case CharacterFightDataSchemaCooldownReasonSellGe:
		*s = CharacterFightDataSchemaCooldownReasonSellGe
		return nil
	case CharacterFightDataSchemaCooldownReasonCancelGe:
		*s = CharacterFightDataSchemaCooldownReasonCancelGe
		return nil
	case CharacterFightDataSchemaCooldownReasonDeleteItem:
		*s = CharacterFightDataSchemaCooldownReasonDeleteItem
		return nil
	case CharacterFightDataSchemaCooldownReasonDeposit:
		*s = CharacterFightDataSchemaCooldownReasonDeposit
		return nil
	case CharacterFightDataSchemaCooldownReasonWithdraw:
		*s = CharacterFightDataSchemaCooldownReasonWithdraw
		return nil
	case CharacterFightDataSchemaCooldownReasonDepositGold:
		*s = CharacterFightDataSchemaCooldownReasonDepositGold
		return nil
	case CharacterFightDataSchemaCooldownReasonWithdrawGold:
		*s = CharacterFightDataSchemaCooldownReasonWithdrawGold
		return nil
	case CharacterFightDataSchemaCooldownReasonEquip:
		*s = CharacterFightDataSchemaCooldownReasonEquip
		return nil
	case CharacterFightDataSchemaCooldownReasonUnequip:
		*s = CharacterFightDataSchemaCooldownReasonUnequip
		return nil
	case CharacterFightDataSchemaCooldownReasonTask:
		*s = CharacterFightDataSchemaCooldownReasonTask
		return nil
	case CharacterFightDataSchemaCooldownReasonRecycling:
		*s = CharacterFightDataSchemaCooldownReasonRecycling
		return nil
	case CharacterFightDataSchemaCooldownReasonRest:
		*s = CharacterFightDataSchemaCooldownReasonRest
		return nil
	case CharacterFightDataSchemaCooldownReasonUse:
		*s = CharacterFightDataSchemaCooldownReasonUse
		return nil
	case CharacterFightDataSchemaCooldownReasonBuyBankExpansion:
		*s = CharacterFightDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CharacterFightDataSchemaFight struct {
	// The amount of xp gained by the fight.
	Xp int `json:"xp"`
	// The amount of gold gained by the fight.
	Gold int `json:"gold"`
	// The items dropped by the fight.
	Drops []DropSchema `json:"drops"`
	// Numbers of the turns of the combat.
	Turns int `json:"turns"`
	// The amount of blocked hits by the monster.
	MonsterBlockedHits CharacterFightDataSchemaFightMonsterBlockedHits `json:"monster_blocked_hits"`
	// The amount of blocked hits by the player.
	PlayerBlockedHits CharacterFightDataSchemaFightPlayerBlockedHits `json:"player_blocked_hits"`
	// The fight logs.
	Logs []string `json:"logs"`
	// The result of the fight.
	Result CharacterFightDataSchemaFightResult `json:"result"`
}

// GetXp returns the value of Xp.
func (s *CharacterFightDataSchemaFight) GetXp() int {
	return s.Xp
}

// GetGold returns the value of Gold.
func (s *CharacterFightDataSchemaFight) GetGold() int {
	return s.Gold
}

// GetDrops returns the value of Drops.
func (s *CharacterFightDataSchemaFight) GetDrops() []DropSchema {
	return s.Drops
}

// GetTurns returns the value of Turns.
func (s *CharacterFightDataSchemaFight) GetTurns() int {
	return s.Turns
}

// GetMonsterBlockedHits returns the value of MonsterBlockedHits.
func (s *CharacterFightDataSchemaFight) GetMonsterBlockedHits() CharacterFightDataSchemaFightMonsterBlockedHits {
	return s.MonsterBlockedHits
}

// GetPlayerBlockedHits returns the value of PlayerBlockedHits.
func (s *CharacterFightDataSchemaFight) GetPlayerBlockedHits() CharacterFightDataSchemaFightPlayerBlockedHits {
	return s.PlayerBlockedHits
}

// GetLogs returns the value of Logs.
func (s *CharacterFightDataSchemaFight) GetLogs() []string {
	return s.Logs
}

// GetResult returns the value of Result.
func (s *CharacterFightDataSchemaFight) GetResult() CharacterFightDataSchemaFightResult {
	return s.Result
}

// SetXp sets the value of Xp.
func (s *CharacterFightDataSchemaFight) SetXp(val int) {
	s.Xp = val
}

// SetGold sets the value of Gold.
func (s *CharacterFightDataSchemaFight) SetGold(val int) {
	s.Gold = val
}

// SetDrops sets the value of Drops.
func (s *CharacterFightDataSchemaFight) SetDrops(val []DropSchema) {
	s.Drops = val
}

// SetTurns sets the value of Turns.
func (s *CharacterFightDataSchemaFight) SetTurns(val int) {
	s.Turns = val
}

// SetMonsterBlockedHits sets the value of MonsterBlockedHits.
func (s *CharacterFightDataSchemaFight) SetMonsterBlockedHits(val CharacterFightDataSchemaFightMonsterBlockedHits) {
	s.MonsterBlockedHits = val
}

// SetPlayerBlockedHits sets the value of PlayerBlockedHits.
func (s *CharacterFightDataSchemaFight) SetPlayerBlockedHits(val CharacterFightDataSchemaFightPlayerBlockedHits) {
	s.PlayerBlockedHits = val
}

// SetLogs sets the value of Logs.
func (s *CharacterFightDataSchemaFight) SetLogs(val []string) {
	s.Logs = val
}

// SetResult sets the value of Result.
func (s *CharacterFightDataSchemaFight) SetResult(val CharacterFightDataSchemaFightResult) {
	s.Result = val
}

type CharacterFightDataSchemaFightMonsterBlockedHits struct {
	// The amount of fire hits blocked.
	Fire int `json:"fire"`
	// The amount of earth hits blocked.
	Earth int `json:"earth"`
	// The amount of water hits blocked.
	Water int `json:"water"`
	// The amount of air hits blocked.
	Air int `json:"air"`
	// The amount of total hits blocked.
	Total int `json:"total"`
}

// GetFire returns the value of Fire.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) GetFire() int {
	return s.Fire
}

// GetEarth returns the value of Earth.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) GetEarth() int {
	return s.Earth
}

// GetWater returns the value of Water.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) GetWater() int {
	return s.Water
}

// GetAir returns the value of Air.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) GetAir() int {
	return s.Air
}

// GetTotal returns the value of Total.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) GetTotal() int {
	return s.Total
}

// SetFire sets the value of Fire.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) SetFire(val int) {
	s.Fire = val
}

// SetEarth sets the value of Earth.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) SetEarth(val int) {
	s.Earth = val
}

// SetWater sets the value of Water.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) SetWater(val int) {
	s.Water = val
}

// SetAir sets the value of Air.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) SetAir(val int) {
	s.Air = val
}

// SetTotal sets the value of Total.
func (s *CharacterFightDataSchemaFightMonsterBlockedHits) SetTotal(val int) {
	s.Total = val
}

type CharacterFightDataSchemaFightPlayerBlockedHits struct {
	// The amount of fire hits blocked.
	Fire int `json:"fire"`
	// The amount of earth hits blocked.
	Earth int `json:"earth"`
	// The amount of water hits blocked.
	Water int `json:"water"`
	// The amount of air hits blocked.
	Air int `json:"air"`
	// The amount of total hits blocked.
	Total int `json:"total"`
}

// GetFire returns the value of Fire.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) GetFire() int {
	return s.Fire
}

// GetEarth returns the value of Earth.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) GetEarth() int {
	return s.Earth
}

// GetWater returns the value of Water.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) GetWater() int {
	return s.Water
}

// GetAir returns the value of Air.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) GetAir() int {
	return s.Air
}

// GetTotal returns the value of Total.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) GetTotal() int {
	return s.Total
}

// SetFire sets the value of Fire.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) SetFire(val int) {
	s.Fire = val
}

// SetEarth sets the value of Earth.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) SetEarth(val int) {
	s.Earth = val
}

// SetWater sets the value of Water.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) SetWater(val int) {
	s.Water = val
}

// SetAir sets the value of Air.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) SetAir(val int) {
	s.Air = val
}

// SetTotal sets the value of Total.
func (s *CharacterFightDataSchemaFightPlayerBlockedHits) SetTotal(val int) {
	s.Total = val
}

type CharacterFightDataSchemaFightResult string

const (
	CharacterFightDataSchemaFightResultWin  CharacterFightDataSchemaFightResult = "win"
	CharacterFightDataSchemaFightResultLoss CharacterFightDataSchemaFightResult = "loss"
)

// AllValues returns all CharacterFightDataSchemaFightResult values.
func (CharacterFightDataSchemaFightResult) AllValues() []CharacterFightDataSchemaFightResult {
	return []CharacterFightDataSchemaFightResult{
		CharacterFightDataSchemaFightResultWin,
		CharacterFightDataSchemaFightResultLoss,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterFightDataSchemaFightResult) MarshalText() ([]byte, error) {
	switch s {
	case CharacterFightDataSchemaFightResultWin:
		return []byte(s), nil
	case CharacterFightDataSchemaFightResultLoss:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterFightDataSchemaFightResult) UnmarshalText(data []byte) error {
	switch CharacterFightDataSchemaFightResult(data) {
	case CharacterFightDataSchemaFightResultWin:
		*s = CharacterFightDataSchemaFightResultWin
		return nil
	case CharacterFightDataSchemaFightResultLoss:
		*s = CharacterFightDataSchemaFightResultLoss
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CharacterFightResponseSchema
type CharacterFightResponseSchema struct {
	Data CharacterFightDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *CharacterFightResponseSchema) GetData() CharacterFightDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *CharacterFightResponseSchema) SetData(val CharacterFightDataSchema) {
	s.Data = val
}

func (*CharacterFightResponseSchema) actionFightMyNameActionFightPostRes() {}

// Ref: #/components/schemas/CharacterLeaderboardSchema
type CharacterLeaderboardSchema struct {
	// Position in the leaderboard.
	Position int `json:"position"`
	// Character name.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin string `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// Total XP of your character.
	TotalXp int `json:"total_xp"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// Mining total xp.
	MiningTotalXp int `json:"mining_total_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// Woodcutting total xp.
	WoodcuttingTotalXp int `json:"woodcutting_total_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// Fishing total xp.
	FishingTotalXp int `json:"fishing_total_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// Weaponcrafting total xp.
	WeaponcraftingTotalXp int `json:"weaponcrafting_total_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// Gearcrafting total xp.
	GearcraftingTotalXp int `json:"gearcrafting_total_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// Jewelrycrafting total xp.
	JewelrycraftingTotalXp int `json:"jewelrycrafting_total_xp"`
	// Cooking level.
	CookingLevel int `json:"cooking_level"`
	// Cooking total xp.
	CookingTotalXp int `json:"cooking_total_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy total xp.
	AlchemyTotalXp int `json:"alchemy_total_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
}

// GetPosition returns the value of Position.
func (s *CharacterLeaderboardSchema) GetPosition() int {
	return s.Position
}

// GetName returns the value of Name.
func (s *CharacterLeaderboardSchema) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *CharacterLeaderboardSchema) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *CharacterLeaderboardSchema) GetSkin() string {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *CharacterLeaderboardSchema) GetLevel() int {
	return s.Level
}

// GetTotalXp returns the value of TotalXp.
func (s *CharacterLeaderboardSchema) GetTotalXp() int {
	return s.TotalXp
}

// GetMiningLevel returns the value of MiningLevel.
func (s *CharacterLeaderboardSchema) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningTotalXp returns the value of MiningTotalXp.
func (s *CharacterLeaderboardSchema) GetMiningTotalXp() int {
	return s.MiningTotalXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *CharacterLeaderboardSchema) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingTotalXp returns the value of WoodcuttingTotalXp.
func (s *CharacterLeaderboardSchema) GetWoodcuttingTotalXp() int {
	return s.WoodcuttingTotalXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *CharacterLeaderboardSchema) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingTotalXp returns the value of FishingTotalXp.
func (s *CharacterLeaderboardSchema) GetFishingTotalXp() int {
	return s.FishingTotalXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *CharacterLeaderboardSchema) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingTotalXp returns the value of WeaponcraftingTotalXp.
func (s *CharacterLeaderboardSchema) GetWeaponcraftingTotalXp() int {
	return s.WeaponcraftingTotalXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *CharacterLeaderboardSchema) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingTotalXp returns the value of GearcraftingTotalXp.
func (s *CharacterLeaderboardSchema) GetGearcraftingTotalXp() int {
	return s.GearcraftingTotalXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *CharacterLeaderboardSchema) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingTotalXp returns the value of JewelrycraftingTotalXp.
func (s *CharacterLeaderboardSchema) GetJewelrycraftingTotalXp() int {
	return s.JewelrycraftingTotalXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *CharacterLeaderboardSchema) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingTotalXp returns the value of CookingTotalXp.
func (s *CharacterLeaderboardSchema) GetCookingTotalXp() int {
	return s.CookingTotalXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *CharacterLeaderboardSchema) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyTotalXp returns the value of AlchemyTotalXp.
func (s *CharacterLeaderboardSchema) GetAlchemyTotalXp() int {
	return s.AlchemyTotalXp
}

// GetGold returns the value of Gold.
func (s *CharacterLeaderboardSchema) GetGold() int {
	return s.Gold
}

// SetPosition sets the value of Position.
func (s *CharacterLeaderboardSchema) SetPosition(val int) {
	s.Position = val
}

// SetName sets the value of Name.
func (s *CharacterLeaderboardSchema) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *CharacterLeaderboardSchema) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *CharacterLeaderboardSchema) SetSkin(val string) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *CharacterLeaderboardSchema) SetLevel(val int) {
	s.Level = val
}

// SetTotalXp sets the value of TotalXp.
func (s *CharacterLeaderboardSchema) SetTotalXp(val int) {
	s.TotalXp = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *CharacterLeaderboardSchema) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningTotalXp sets the value of MiningTotalXp.
func (s *CharacterLeaderboardSchema) SetMiningTotalXp(val int) {
	s.MiningTotalXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *CharacterLeaderboardSchema) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingTotalXp sets the value of WoodcuttingTotalXp.
func (s *CharacterLeaderboardSchema) SetWoodcuttingTotalXp(val int) {
	s.WoodcuttingTotalXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *CharacterLeaderboardSchema) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingTotalXp sets the value of FishingTotalXp.
func (s *CharacterLeaderboardSchema) SetFishingTotalXp(val int) {
	s.FishingTotalXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *CharacterLeaderboardSchema) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingTotalXp sets the value of WeaponcraftingTotalXp.
func (s *CharacterLeaderboardSchema) SetWeaponcraftingTotalXp(val int) {
	s.WeaponcraftingTotalXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *CharacterLeaderboardSchema) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingTotalXp sets the value of GearcraftingTotalXp.
func (s *CharacterLeaderboardSchema) SetGearcraftingTotalXp(val int) {
	s.GearcraftingTotalXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *CharacterLeaderboardSchema) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingTotalXp sets the value of JewelrycraftingTotalXp.
func (s *CharacterLeaderboardSchema) SetJewelrycraftingTotalXp(val int) {
	s.JewelrycraftingTotalXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *CharacterLeaderboardSchema) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingTotalXp sets the value of CookingTotalXp.
func (s *CharacterLeaderboardSchema) SetCookingTotalXp(val int) {
	s.CookingTotalXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *CharacterLeaderboardSchema) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyTotalXp sets the value of AlchemyTotalXp.
func (s *CharacterLeaderboardSchema) SetAlchemyTotalXp(val int) {
	s.AlchemyTotalXp = val
}

// SetGold sets the value of Gold.
func (s *CharacterLeaderboardSchema) SetGold(val int) {
	s.Gold = val
}

// Ref: #/components/schemas/CharacterMovementDataSchema
type CharacterMovementDataSchema struct {
	// Cooldown details.
	Cooldown CharacterMovementDataSchemaCooldown `json:"cooldown"`
	// Destination details.
	Destination CharacterMovementDataSchemaDestination `json:"destination"`
	// Character details.
	Character CharacterMovementDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterMovementDataSchema) GetCooldown() CharacterMovementDataSchemaCooldown {
	return s.Cooldown
}

// GetDestination returns the value of Destination.
func (s *CharacterMovementDataSchema) GetDestination() CharacterMovementDataSchemaDestination {
	return s.Destination
}

// GetCharacter returns the value of Character.
func (s *CharacterMovementDataSchema) GetCharacter() CharacterMovementDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterMovementDataSchema) SetCooldown(val CharacterMovementDataSchemaCooldown) {
	s.Cooldown = val
}

// SetDestination sets the value of Destination.
func (s *CharacterMovementDataSchema) SetDestination(val CharacterMovementDataSchemaDestination) {
	s.Destination = val
}

// SetCharacter sets the value of Character.
func (s *CharacterMovementDataSchema) SetCharacter(val CharacterMovementDataSchemaCharacter) {
	s.Character = val
}

type CharacterMovementDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin CharacterMovementDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *CharacterMovementDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *CharacterMovementDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *CharacterMovementDataSchemaCharacter) GetSkin() CharacterMovementDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *CharacterMovementDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *CharacterMovementDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *CharacterMovementDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *CharacterMovementDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *CharacterMovementDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *CharacterMovementDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *CharacterMovementDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *CharacterMovementDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *CharacterMovementDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *CharacterMovementDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *CharacterMovementDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *CharacterMovementDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *CharacterMovementDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *CharacterMovementDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *CharacterMovementDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *CharacterMovementDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *CharacterMovementDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *CharacterMovementDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *CharacterMovementDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *CharacterMovementDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *CharacterMovementDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *CharacterMovementDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *CharacterMovementDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *CharacterMovementDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *CharacterMovementDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *CharacterMovementDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *CharacterMovementDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *CharacterMovementDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *CharacterMovementDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *CharacterMovementDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *CharacterMovementDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *CharacterMovementDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *CharacterMovementDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *CharacterMovementDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *CharacterMovementDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *CharacterMovementDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *CharacterMovementDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *CharacterMovementDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *CharacterMovementDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *CharacterMovementDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterMovementDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *CharacterMovementDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *CharacterMovementDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *CharacterMovementDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *CharacterMovementDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *CharacterMovementDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *CharacterMovementDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *CharacterMovementDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *CharacterMovementDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *CharacterMovementDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *CharacterMovementDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *CharacterMovementDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *CharacterMovementDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *CharacterMovementDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *CharacterMovementDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *CharacterMovementDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *CharacterMovementDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *CharacterMovementDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *CharacterMovementDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *CharacterMovementDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *CharacterMovementDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *CharacterMovementDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *CharacterMovementDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *CharacterMovementDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *CharacterMovementDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *CharacterMovementDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *CharacterMovementDataSchemaCharacter) SetSkin(val CharacterMovementDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *CharacterMovementDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *CharacterMovementDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *CharacterMovementDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *CharacterMovementDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *CharacterMovementDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *CharacterMovementDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *CharacterMovementDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *CharacterMovementDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *CharacterMovementDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *CharacterMovementDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *CharacterMovementDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *CharacterMovementDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *CharacterMovementDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *CharacterMovementDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *CharacterMovementDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *CharacterMovementDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *CharacterMovementDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *CharacterMovementDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *CharacterMovementDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *CharacterMovementDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *CharacterMovementDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *CharacterMovementDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *CharacterMovementDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *CharacterMovementDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *CharacterMovementDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *CharacterMovementDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *CharacterMovementDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *CharacterMovementDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *CharacterMovementDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *CharacterMovementDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *CharacterMovementDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *CharacterMovementDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *CharacterMovementDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *CharacterMovementDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *CharacterMovementDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *CharacterMovementDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *CharacterMovementDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *CharacterMovementDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *CharacterMovementDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *CharacterMovementDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterMovementDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *CharacterMovementDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *CharacterMovementDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *CharacterMovementDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *CharacterMovementDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *CharacterMovementDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *CharacterMovementDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *CharacterMovementDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *CharacterMovementDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *CharacterMovementDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *CharacterMovementDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *CharacterMovementDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *CharacterMovementDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *CharacterMovementDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *CharacterMovementDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *CharacterMovementDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *CharacterMovementDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *CharacterMovementDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *CharacterMovementDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *CharacterMovementDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *CharacterMovementDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *CharacterMovementDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *CharacterMovementDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *CharacterMovementDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type CharacterMovementDataSchemaCharacterSkin string

const (
	CharacterMovementDataSchemaCharacterSkinMen1   CharacterMovementDataSchemaCharacterSkin = "men1"
	CharacterMovementDataSchemaCharacterSkinMen2   CharacterMovementDataSchemaCharacterSkin = "men2"
	CharacterMovementDataSchemaCharacterSkinMen3   CharacterMovementDataSchemaCharacterSkin = "men3"
	CharacterMovementDataSchemaCharacterSkinWomen1 CharacterMovementDataSchemaCharacterSkin = "women1"
	CharacterMovementDataSchemaCharacterSkinWomen2 CharacterMovementDataSchemaCharacterSkin = "women2"
	CharacterMovementDataSchemaCharacterSkinWomen3 CharacterMovementDataSchemaCharacterSkin = "women3"
)

// AllValues returns all CharacterMovementDataSchemaCharacterSkin values.
func (CharacterMovementDataSchemaCharacterSkin) AllValues() []CharacterMovementDataSchemaCharacterSkin {
	return []CharacterMovementDataSchemaCharacterSkin{
		CharacterMovementDataSchemaCharacterSkinMen1,
		CharacterMovementDataSchemaCharacterSkinMen2,
		CharacterMovementDataSchemaCharacterSkinMen3,
		CharacterMovementDataSchemaCharacterSkinWomen1,
		CharacterMovementDataSchemaCharacterSkinWomen2,
		CharacterMovementDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterMovementDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case CharacterMovementDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case CharacterMovementDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case CharacterMovementDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case CharacterMovementDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case CharacterMovementDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case CharacterMovementDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterMovementDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch CharacterMovementDataSchemaCharacterSkin(data) {
	case CharacterMovementDataSchemaCharacterSkinMen1:
		*s = CharacterMovementDataSchemaCharacterSkinMen1
		return nil
	case CharacterMovementDataSchemaCharacterSkinMen2:
		*s = CharacterMovementDataSchemaCharacterSkinMen2
		return nil
	case CharacterMovementDataSchemaCharacterSkinMen3:
		*s = CharacterMovementDataSchemaCharacterSkinMen3
		return nil
	case CharacterMovementDataSchemaCharacterSkinWomen1:
		*s = CharacterMovementDataSchemaCharacterSkinWomen1
		return nil
	case CharacterMovementDataSchemaCharacterSkinWomen2:
		*s = CharacterMovementDataSchemaCharacterSkinWomen2
		return nil
	case CharacterMovementDataSchemaCharacterSkinWomen3:
		*s = CharacterMovementDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CharacterMovementDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason CharacterMovementDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *CharacterMovementDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *CharacterMovementDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *CharacterMovementDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *CharacterMovementDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *CharacterMovementDataSchemaCooldown) GetReason() CharacterMovementDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *CharacterMovementDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *CharacterMovementDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *CharacterMovementDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *CharacterMovementDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *CharacterMovementDataSchemaCooldown) SetReason(val CharacterMovementDataSchemaCooldownReason) {
	s.Reason = val
}

type CharacterMovementDataSchemaCooldownReason string

const (
	CharacterMovementDataSchemaCooldownReasonMovement         CharacterMovementDataSchemaCooldownReason = "movement"
	CharacterMovementDataSchemaCooldownReasonFight            CharacterMovementDataSchemaCooldownReason = "fight"
	CharacterMovementDataSchemaCooldownReasonCrafting         CharacterMovementDataSchemaCooldownReason = "crafting"
	CharacterMovementDataSchemaCooldownReasonGathering        CharacterMovementDataSchemaCooldownReason = "gathering"
	CharacterMovementDataSchemaCooldownReasonBuyGe            CharacterMovementDataSchemaCooldownReason = "buy_ge"
	CharacterMovementDataSchemaCooldownReasonSellGe           CharacterMovementDataSchemaCooldownReason = "sell_ge"
	CharacterMovementDataSchemaCooldownReasonCancelGe         CharacterMovementDataSchemaCooldownReason = "cancel_ge"
	CharacterMovementDataSchemaCooldownReasonDeleteItem       CharacterMovementDataSchemaCooldownReason = "delete_item"
	CharacterMovementDataSchemaCooldownReasonDeposit          CharacterMovementDataSchemaCooldownReason = "deposit"
	CharacterMovementDataSchemaCooldownReasonWithdraw         CharacterMovementDataSchemaCooldownReason = "withdraw"
	CharacterMovementDataSchemaCooldownReasonDepositGold      CharacterMovementDataSchemaCooldownReason = "deposit_gold"
	CharacterMovementDataSchemaCooldownReasonWithdrawGold     CharacterMovementDataSchemaCooldownReason = "withdraw_gold"
	CharacterMovementDataSchemaCooldownReasonEquip            CharacterMovementDataSchemaCooldownReason = "equip"
	CharacterMovementDataSchemaCooldownReasonUnequip          CharacterMovementDataSchemaCooldownReason = "unequip"
	CharacterMovementDataSchemaCooldownReasonTask             CharacterMovementDataSchemaCooldownReason = "task"
	CharacterMovementDataSchemaCooldownReasonRecycling        CharacterMovementDataSchemaCooldownReason = "recycling"
	CharacterMovementDataSchemaCooldownReasonRest             CharacterMovementDataSchemaCooldownReason = "rest"
	CharacterMovementDataSchemaCooldownReasonUse              CharacterMovementDataSchemaCooldownReason = "use"
	CharacterMovementDataSchemaCooldownReasonBuyBankExpansion CharacterMovementDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all CharacterMovementDataSchemaCooldownReason values.
func (CharacterMovementDataSchemaCooldownReason) AllValues() []CharacterMovementDataSchemaCooldownReason {
	return []CharacterMovementDataSchemaCooldownReason{
		CharacterMovementDataSchemaCooldownReasonMovement,
		CharacterMovementDataSchemaCooldownReasonFight,
		CharacterMovementDataSchemaCooldownReasonCrafting,
		CharacterMovementDataSchemaCooldownReasonGathering,
		CharacterMovementDataSchemaCooldownReasonBuyGe,
		CharacterMovementDataSchemaCooldownReasonSellGe,
		CharacterMovementDataSchemaCooldownReasonCancelGe,
		CharacterMovementDataSchemaCooldownReasonDeleteItem,
		CharacterMovementDataSchemaCooldownReasonDeposit,
		CharacterMovementDataSchemaCooldownReasonWithdraw,
		CharacterMovementDataSchemaCooldownReasonDepositGold,
		CharacterMovementDataSchemaCooldownReasonWithdrawGold,
		CharacterMovementDataSchemaCooldownReasonEquip,
		CharacterMovementDataSchemaCooldownReasonUnequip,
		CharacterMovementDataSchemaCooldownReasonTask,
		CharacterMovementDataSchemaCooldownReasonRecycling,
		CharacterMovementDataSchemaCooldownReasonRest,
		CharacterMovementDataSchemaCooldownReasonUse,
		CharacterMovementDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterMovementDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case CharacterMovementDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case CharacterMovementDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterMovementDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch CharacterMovementDataSchemaCooldownReason(data) {
	case CharacterMovementDataSchemaCooldownReasonMovement:
		*s = CharacterMovementDataSchemaCooldownReasonMovement
		return nil
	case CharacterMovementDataSchemaCooldownReasonFight:
		*s = CharacterMovementDataSchemaCooldownReasonFight
		return nil
	case CharacterMovementDataSchemaCooldownReasonCrafting:
		*s = CharacterMovementDataSchemaCooldownReasonCrafting
		return nil
	case CharacterMovementDataSchemaCooldownReasonGathering:
		*s = CharacterMovementDataSchemaCooldownReasonGathering
		return nil
	case CharacterMovementDataSchemaCooldownReasonBuyGe:
		*s = CharacterMovementDataSchemaCooldownReasonBuyGe
		return nil
	case CharacterMovementDataSchemaCooldownReasonSellGe:
		*s = CharacterMovementDataSchemaCooldownReasonSellGe
		return nil
	case CharacterMovementDataSchemaCooldownReasonCancelGe:
		*s = CharacterMovementDataSchemaCooldownReasonCancelGe
		return nil
	case CharacterMovementDataSchemaCooldownReasonDeleteItem:
		*s = CharacterMovementDataSchemaCooldownReasonDeleteItem
		return nil
	case CharacterMovementDataSchemaCooldownReasonDeposit:
		*s = CharacterMovementDataSchemaCooldownReasonDeposit
		return nil
	case CharacterMovementDataSchemaCooldownReasonWithdraw:
		*s = CharacterMovementDataSchemaCooldownReasonWithdraw
		return nil
	case CharacterMovementDataSchemaCooldownReasonDepositGold:
		*s = CharacterMovementDataSchemaCooldownReasonDepositGold
		return nil
	case CharacterMovementDataSchemaCooldownReasonWithdrawGold:
		*s = CharacterMovementDataSchemaCooldownReasonWithdrawGold
		return nil
	case CharacterMovementDataSchemaCooldownReasonEquip:
		*s = CharacterMovementDataSchemaCooldownReasonEquip
		return nil
	case CharacterMovementDataSchemaCooldownReasonUnequip:
		*s = CharacterMovementDataSchemaCooldownReasonUnequip
		return nil
	case CharacterMovementDataSchemaCooldownReasonTask:
		*s = CharacterMovementDataSchemaCooldownReasonTask
		return nil
	case CharacterMovementDataSchemaCooldownReasonRecycling:
		*s = CharacterMovementDataSchemaCooldownReasonRecycling
		return nil
	case CharacterMovementDataSchemaCooldownReasonRest:
		*s = CharacterMovementDataSchemaCooldownReasonRest
		return nil
	case CharacterMovementDataSchemaCooldownReasonUse:
		*s = CharacterMovementDataSchemaCooldownReasonUse
		return nil
	case CharacterMovementDataSchemaCooldownReasonBuyBankExpansion:
		*s = CharacterMovementDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CharacterMovementDataSchemaDestination struct {
	// Name of the map.
	Name string `json:"name"`
	// Skin of the map.
	Skin string `json:"skin"`
	// Position X of the map.
	X int `json:"x"`
	// Position Y of the map.
	Y int `json:"y"`
	// Content of the map.
	Content CharacterMovementDataSchemaDestinationContent `json:"content"`
}

// GetName returns the value of Name.
func (s *CharacterMovementDataSchemaDestination) GetName() string {
	return s.Name
}

// GetSkin returns the value of Skin.
func (s *CharacterMovementDataSchemaDestination) GetSkin() string {
	return s.Skin
}

// GetX returns the value of X.
func (s *CharacterMovementDataSchemaDestination) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *CharacterMovementDataSchemaDestination) GetY() int {
	return s.Y
}

// GetContent returns the value of Content.
func (s *CharacterMovementDataSchemaDestination) GetContent() CharacterMovementDataSchemaDestinationContent {
	return s.Content
}

// SetName sets the value of Name.
func (s *CharacterMovementDataSchemaDestination) SetName(val string) {
	s.Name = val
}

// SetSkin sets the value of Skin.
func (s *CharacterMovementDataSchemaDestination) SetSkin(val string) {
	s.Skin = val
}

// SetX sets the value of X.
func (s *CharacterMovementDataSchemaDestination) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *CharacterMovementDataSchemaDestination) SetY(val int) {
	s.Y = val
}

// SetContent sets the value of Content.
func (s *CharacterMovementDataSchemaDestination) SetContent(val CharacterMovementDataSchemaDestinationContent) {
	s.Content = val
}

// Content of the map.
// CharacterMovementDataSchemaDestinationContent represents sum type.
type CharacterMovementDataSchemaDestinationContent struct {
	Type             CharacterMovementDataSchemaDestinationContentType // switch on this field
	MapContentSchema MapContentSchema
	Null             struct{}
}

// CharacterMovementDataSchemaDestinationContentType is oneOf type of CharacterMovementDataSchemaDestinationContent.
type CharacterMovementDataSchemaDestinationContentType string

// Possible values for CharacterMovementDataSchemaDestinationContentType.
const (
	MapContentSchemaCharacterMovementDataSchemaDestinationContent CharacterMovementDataSchemaDestinationContentType = "MapContentSchema"
	NullCharacterMovementDataSchemaDestinationContent             CharacterMovementDataSchemaDestinationContentType = "struct{}"
)

// IsMapContentSchema reports whether CharacterMovementDataSchemaDestinationContent is MapContentSchema.
func (s CharacterMovementDataSchemaDestinationContent) IsMapContentSchema() bool {
	return s.Type == MapContentSchemaCharacterMovementDataSchemaDestinationContent
}

// IsNull reports whether CharacterMovementDataSchemaDestinationContent is struct{}.
func (s CharacterMovementDataSchemaDestinationContent) IsNull() bool {
	return s.Type == NullCharacterMovementDataSchemaDestinationContent
}

// SetMapContentSchema sets CharacterMovementDataSchemaDestinationContent to MapContentSchema.
func (s *CharacterMovementDataSchemaDestinationContent) SetMapContentSchema(v MapContentSchema) {
	s.Type = MapContentSchemaCharacterMovementDataSchemaDestinationContent
	s.MapContentSchema = v
}

// GetMapContentSchema returns MapContentSchema and true boolean if CharacterMovementDataSchemaDestinationContent is MapContentSchema.
func (s CharacterMovementDataSchemaDestinationContent) GetMapContentSchema() (v MapContentSchema, ok bool) {
	if !s.IsMapContentSchema() {
		return v, false
	}
	return s.MapContentSchema, true
}

// NewMapContentSchemaCharacterMovementDataSchemaDestinationContent returns new CharacterMovementDataSchemaDestinationContent from MapContentSchema.
func NewMapContentSchemaCharacterMovementDataSchemaDestinationContent(v MapContentSchema) CharacterMovementDataSchemaDestinationContent {
	var s CharacterMovementDataSchemaDestinationContent
	s.SetMapContentSchema(v)
	return s
}

// SetNull sets CharacterMovementDataSchemaDestinationContent to struct{}.
func (s *CharacterMovementDataSchemaDestinationContent) SetNull(v struct{}) {
	s.Type = NullCharacterMovementDataSchemaDestinationContent
	s.Null = v
}

// GetNull returns struct{} and true boolean if CharacterMovementDataSchemaDestinationContent is struct{}.
func (s CharacterMovementDataSchemaDestinationContent) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullCharacterMovementDataSchemaDestinationContent returns new CharacterMovementDataSchemaDestinationContent from struct{}.
func NewNullCharacterMovementDataSchemaDestinationContent(v struct{}) CharacterMovementDataSchemaDestinationContent {
	var s CharacterMovementDataSchemaDestinationContent
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/CharacterMovementResponseSchema
type CharacterMovementResponseSchema struct {
	Data CharacterMovementDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *CharacterMovementResponseSchema) GetData() CharacterMovementDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *CharacterMovementResponseSchema) SetData(val CharacterMovementDataSchema) {
	s.Data = val
}

func (*CharacterMovementResponseSchema) actionMoveMyNameActionMovePostRes() {}

// Ref: #/components/schemas/CharacterResponseSchema
type CharacterResponseSchema struct {
	Data CharacterSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *CharacterResponseSchema) GetData() CharacterSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *CharacterResponseSchema) SetData(val CharacterSchema) {
	s.Data = val
}

func (*CharacterResponseSchema) createCharacterCharactersCreatePostRes() {}
func (*CharacterResponseSchema) deleteCharacterCharactersDeletePostRes() {}
func (*CharacterResponseSchema) getCharacterCharactersNameGetRes()       {}

// Ref: #/components/schemas/CharacterRestDataSchema
type CharacterRestDataSchema struct {
	// Cooldown details.
	Cooldown CharacterRestDataSchemaCooldown `json:"cooldown"`
	// The amount of HP restored.
	HpRestored int `json:"hp_restored"`
	// Character details.
	Character CharacterRestDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterRestDataSchema) GetCooldown() CharacterRestDataSchemaCooldown {
	return s.Cooldown
}

// GetHpRestored returns the value of HpRestored.
func (s *CharacterRestDataSchema) GetHpRestored() int {
	return s.HpRestored
}

// GetCharacter returns the value of Character.
func (s *CharacterRestDataSchema) GetCharacter() CharacterRestDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterRestDataSchema) SetCooldown(val CharacterRestDataSchemaCooldown) {
	s.Cooldown = val
}

// SetHpRestored sets the value of HpRestored.
func (s *CharacterRestDataSchema) SetHpRestored(val int) {
	s.HpRestored = val
}

// SetCharacter sets the value of Character.
func (s *CharacterRestDataSchema) SetCharacter(val CharacterRestDataSchemaCharacter) {
	s.Character = val
}

type CharacterRestDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin CharacterRestDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *CharacterRestDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *CharacterRestDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *CharacterRestDataSchemaCharacter) GetSkin() CharacterRestDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *CharacterRestDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *CharacterRestDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *CharacterRestDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *CharacterRestDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *CharacterRestDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *CharacterRestDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *CharacterRestDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *CharacterRestDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *CharacterRestDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *CharacterRestDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *CharacterRestDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *CharacterRestDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *CharacterRestDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *CharacterRestDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *CharacterRestDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *CharacterRestDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *CharacterRestDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *CharacterRestDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *CharacterRestDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *CharacterRestDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *CharacterRestDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *CharacterRestDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *CharacterRestDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *CharacterRestDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *CharacterRestDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *CharacterRestDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *CharacterRestDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *CharacterRestDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *CharacterRestDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *CharacterRestDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *CharacterRestDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *CharacterRestDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *CharacterRestDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *CharacterRestDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *CharacterRestDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *CharacterRestDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *CharacterRestDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *CharacterRestDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *CharacterRestDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *CharacterRestDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *CharacterRestDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterRestDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *CharacterRestDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *CharacterRestDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *CharacterRestDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *CharacterRestDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *CharacterRestDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *CharacterRestDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *CharacterRestDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *CharacterRestDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *CharacterRestDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *CharacterRestDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *CharacterRestDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *CharacterRestDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *CharacterRestDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *CharacterRestDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *CharacterRestDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *CharacterRestDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *CharacterRestDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *CharacterRestDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *CharacterRestDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *CharacterRestDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *CharacterRestDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *CharacterRestDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *CharacterRestDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *CharacterRestDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *CharacterRestDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *CharacterRestDataSchemaCharacter) SetSkin(val CharacterRestDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *CharacterRestDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *CharacterRestDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *CharacterRestDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *CharacterRestDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *CharacterRestDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *CharacterRestDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *CharacterRestDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *CharacterRestDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *CharacterRestDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *CharacterRestDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *CharacterRestDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *CharacterRestDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *CharacterRestDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *CharacterRestDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *CharacterRestDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *CharacterRestDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *CharacterRestDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *CharacterRestDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *CharacterRestDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *CharacterRestDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *CharacterRestDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *CharacterRestDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *CharacterRestDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *CharacterRestDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *CharacterRestDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *CharacterRestDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *CharacterRestDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *CharacterRestDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *CharacterRestDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *CharacterRestDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *CharacterRestDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *CharacterRestDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *CharacterRestDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *CharacterRestDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *CharacterRestDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *CharacterRestDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *CharacterRestDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *CharacterRestDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *CharacterRestDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *CharacterRestDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *CharacterRestDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterRestDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *CharacterRestDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *CharacterRestDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *CharacterRestDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *CharacterRestDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *CharacterRestDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *CharacterRestDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *CharacterRestDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *CharacterRestDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *CharacterRestDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *CharacterRestDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *CharacterRestDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *CharacterRestDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *CharacterRestDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *CharacterRestDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *CharacterRestDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *CharacterRestDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *CharacterRestDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *CharacterRestDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *CharacterRestDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *CharacterRestDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *CharacterRestDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *CharacterRestDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *CharacterRestDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type CharacterRestDataSchemaCharacterSkin string

const (
	CharacterRestDataSchemaCharacterSkinMen1   CharacterRestDataSchemaCharacterSkin = "men1"
	CharacterRestDataSchemaCharacterSkinMen2   CharacterRestDataSchemaCharacterSkin = "men2"
	CharacterRestDataSchemaCharacterSkinMen3   CharacterRestDataSchemaCharacterSkin = "men3"
	CharacterRestDataSchemaCharacterSkinWomen1 CharacterRestDataSchemaCharacterSkin = "women1"
	CharacterRestDataSchemaCharacterSkinWomen2 CharacterRestDataSchemaCharacterSkin = "women2"
	CharacterRestDataSchemaCharacterSkinWomen3 CharacterRestDataSchemaCharacterSkin = "women3"
)

// AllValues returns all CharacterRestDataSchemaCharacterSkin values.
func (CharacterRestDataSchemaCharacterSkin) AllValues() []CharacterRestDataSchemaCharacterSkin {
	return []CharacterRestDataSchemaCharacterSkin{
		CharacterRestDataSchemaCharacterSkinMen1,
		CharacterRestDataSchemaCharacterSkinMen2,
		CharacterRestDataSchemaCharacterSkinMen3,
		CharacterRestDataSchemaCharacterSkinWomen1,
		CharacterRestDataSchemaCharacterSkinWomen2,
		CharacterRestDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterRestDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case CharacterRestDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case CharacterRestDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case CharacterRestDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case CharacterRestDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case CharacterRestDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case CharacterRestDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterRestDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch CharacterRestDataSchemaCharacterSkin(data) {
	case CharacterRestDataSchemaCharacterSkinMen1:
		*s = CharacterRestDataSchemaCharacterSkinMen1
		return nil
	case CharacterRestDataSchemaCharacterSkinMen2:
		*s = CharacterRestDataSchemaCharacterSkinMen2
		return nil
	case CharacterRestDataSchemaCharacterSkinMen3:
		*s = CharacterRestDataSchemaCharacterSkinMen3
		return nil
	case CharacterRestDataSchemaCharacterSkinWomen1:
		*s = CharacterRestDataSchemaCharacterSkinWomen1
		return nil
	case CharacterRestDataSchemaCharacterSkinWomen2:
		*s = CharacterRestDataSchemaCharacterSkinWomen2
		return nil
	case CharacterRestDataSchemaCharacterSkinWomen3:
		*s = CharacterRestDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CharacterRestDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason CharacterRestDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *CharacterRestDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *CharacterRestDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *CharacterRestDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *CharacterRestDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *CharacterRestDataSchemaCooldown) GetReason() CharacterRestDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *CharacterRestDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *CharacterRestDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *CharacterRestDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *CharacterRestDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *CharacterRestDataSchemaCooldown) SetReason(val CharacterRestDataSchemaCooldownReason) {
	s.Reason = val
}

type CharacterRestDataSchemaCooldownReason string

const (
	CharacterRestDataSchemaCooldownReasonMovement         CharacterRestDataSchemaCooldownReason = "movement"
	CharacterRestDataSchemaCooldownReasonFight            CharacterRestDataSchemaCooldownReason = "fight"
	CharacterRestDataSchemaCooldownReasonCrafting         CharacterRestDataSchemaCooldownReason = "crafting"
	CharacterRestDataSchemaCooldownReasonGathering        CharacterRestDataSchemaCooldownReason = "gathering"
	CharacterRestDataSchemaCooldownReasonBuyGe            CharacterRestDataSchemaCooldownReason = "buy_ge"
	CharacterRestDataSchemaCooldownReasonSellGe           CharacterRestDataSchemaCooldownReason = "sell_ge"
	CharacterRestDataSchemaCooldownReasonCancelGe         CharacterRestDataSchemaCooldownReason = "cancel_ge"
	CharacterRestDataSchemaCooldownReasonDeleteItem       CharacterRestDataSchemaCooldownReason = "delete_item"
	CharacterRestDataSchemaCooldownReasonDeposit          CharacterRestDataSchemaCooldownReason = "deposit"
	CharacterRestDataSchemaCooldownReasonWithdraw         CharacterRestDataSchemaCooldownReason = "withdraw"
	CharacterRestDataSchemaCooldownReasonDepositGold      CharacterRestDataSchemaCooldownReason = "deposit_gold"
	CharacterRestDataSchemaCooldownReasonWithdrawGold     CharacterRestDataSchemaCooldownReason = "withdraw_gold"
	CharacterRestDataSchemaCooldownReasonEquip            CharacterRestDataSchemaCooldownReason = "equip"
	CharacterRestDataSchemaCooldownReasonUnequip          CharacterRestDataSchemaCooldownReason = "unequip"
	CharacterRestDataSchemaCooldownReasonTask             CharacterRestDataSchemaCooldownReason = "task"
	CharacterRestDataSchemaCooldownReasonRecycling        CharacterRestDataSchemaCooldownReason = "recycling"
	CharacterRestDataSchemaCooldownReasonRest             CharacterRestDataSchemaCooldownReason = "rest"
	CharacterRestDataSchemaCooldownReasonUse              CharacterRestDataSchemaCooldownReason = "use"
	CharacterRestDataSchemaCooldownReasonBuyBankExpansion CharacterRestDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all CharacterRestDataSchemaCooldownReason values.
func (CharacterRestDataSchemaCooldownReason) AllValues() []CharacterRestDataSchemaCooldownReason {
	return []CharacterRestDataSchemaCooldownReason{
		CharacterRestDataSchemaCooldownReasonMovement,
		CharacterRestDataSchemaCooldownReasonFight,
		CharacterRestDataSchemaCooldownReasonCrafting,
		CharacterRestDataSchemaCooldownReasonGathering,
		CharacterRestDataSchemaCooldownReasonBuyGe,
		CharacterRestDataSchemaCooldownReasonSellGe,
		CharacterRestDataSchemaCooldownReasonCancelGe,
		CharacterRestDataSchemaCooldownReasonDeleteItem,
		CharacterRestDataSchemaCooldownReasonDeposit,
		CharacterRestDataSchemaCooldownReasonWithdraw,
		CharacterRestDataSchemaCooldownReasonDepositGold,
		CharacterRestDataSchemaCooldownReasonWithdrawGold,
		CharacterRestDataSchemaCooldownReasonEquip,
		CharacterRestDataSchemaCooldownReasonUnequip,
		CharacterRestDataSchemaCooldownReasonTask,
		CharacterRestDataSchemaCooldownReasonRecycling,
		CharacterRestDataSchemaCooldownReasonRest,
		CharacterRestDataSchemaCooldownReasonUse,
		CharacterRestDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterRestDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case CharacterRestDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case CharacterRestDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterRestDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch CharacterRestDataSchemaCooldownReason(data) {
	case CharacterRestDataSchemaCooldownReasonMovement:
		*s = CharacterRestDataSchemaCooldownReasonMovement
		return nil
	case CharacterRestDataSchemaCooldownReasonFight:
		*s = CharacterRestDataSchemaCooldownReasonFight
		return nil
	case CharacterRestDataSchemaCooldownReasonCrafting:
		*s = CharacterRestDataSchemaCooldownReasonCrafting
		return nil
	case CharacterRestDataSchemaCooldownReasonGathering:
		*s = CharacterRestDataSchemaCooldownReasonGathering
		return nil
	case CharacterRestDataSchemaCooldownReasonBuyGe:
		*s = CharacterRestDataSchemaCooldownReasonBuyGe
		return nil
	case CharacterRestDataSchemaCooldownReasonSellGe:
		*s = CharacterRestDataSchemaCooldownReasonSellGe
		return nil
	case CharacterRestDataSchemaCooldownReasonCancelGe:
		*s = CharacterRestDataSchemaCooldownReasonCancelGe
		return nil
	case CharacterRestDataSchemaCooldownReasonDeleteItem:
		*s = CharacterRestDataSchemaCooldownReasonDeleteItem
		return nil
	case CharacterRestDataSchemaCooldownReasonDeposit:
		*s = CharacterRestDataSchemaCooldownReasonDeposit
		return nil
	case CharacterRestDataSchemaCooldownReasonWithdraw:
		*s = CharacterRestDataSchemaCooldownReasonWithdraw
		return nil
	case CharacterRestDataSchemaCooldownReasonDepositGold:
		*s = CharacterRestDataSchemaCooldownReasonDepositGold
		return nil
	case CharacterRestDataSchemaCooldownReasonWithdrawGold:
		*s = CharacterRestDataSchemaCooldownReasonWithdrawGold
		return nil
	case CharacterRestDataSchemaCooldownReasonEquip:
		*s = CharacterRestDataSchemaCooldownReasonEquip
		return nil
	case CharacterRestDataSchemaCooldownReasonUnequip:
		*s = CharacterRestDataSchemaCooldownReasonUnequip
		return nil
	case CharacterRestDataSchemaCooldownReasonTask:
		*s = CharacterRestDataSchemaCooldownReasonTask
		return nil
	case CharacterRestDataSchemaCooldownReasonRecycling:
		*s = CharacterRestDataSchemaCooldownReasonRecycling
		return nil
	case CharacterRestDataSchemaCooldownReasonRest:
		*s = CharacterRestDataSchemaCooldownReasonRest
		return nil
	case CharacterRestDataSchemaCooldownReasonUse:
		*s = CharacterRestDataSchemaCooldownReasonUse
		return nil
	case CharacterRestDataSchemaCooldownReasonBuyBankExpansion:
		*s = CharacterRestDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CharacterRestResponseSchema
type CharacterRestResponseSchema struct {
	Data CharacterRestDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *CharacterRestResponseSchema) GetData() CharacterRestDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *CharacterRestResponseSchema) SetData(val CharacterRestDataSchema) {
	s.Data = val
}

func (*CharacterRestResponseSchema) actionRestMyNameActionRestPostRes() {}

// Ref: #/components/schemas/CharacterSchema
type CharacterSchema struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin CharacterSchemaSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *CharacterSchema) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *CharacterSchema) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *CharacterSchema) GetSkin() CharacterSchemaSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *CharacterSchema) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *CharacterSchema) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *CharacterSchema) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *CharacterSchema) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *CharacterSchema) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *CharacterSchema) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *CharacterSchema) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *CharacterSchema) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *CharacterSchema) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *CharacterSchema) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *CharacterSchema) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *CharacterSchema) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *CharacterSchema) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *CharacterSchema) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *CharacterSchema) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *CharacterSchema) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *CharacterSchema) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *CharacterSchema) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *CharacterSchema) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *CharacterSchema) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *CharacterSchema) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *CharacterSchema) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *CharacterSchema) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *CharacterSchema) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *CharacterSchema) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *CharacterSchema) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *CharacterSchema) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *CharacterSchema) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *CharacterSchema) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *CharacterSchema) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *CharacterSchema) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *CharacterSchema) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *CharacterSchema) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *CharacterSchema) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *CharacterSchema) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *CharacterSchema) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *CharacterSchema) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *CharacterSchema) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *CharacterSchema) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *CharacterSchema) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *CharacterSchema) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *CharacterSchema) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *CharacterSchema) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *CharacterSchema) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *CharacterSchema) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *CharacterSchema) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *CharacterSchema) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *CharacterSchema) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *CharacterSchema) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *CharacterSchema) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *CharacterSchema) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *CharacterSchema) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *CharacterSchema) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *CharacterSchema) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *CharacterSchema) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *CharacterSchema) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *CharacterSchema) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *CharacterSchema) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *CharacterSchema) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *CharacterSchema) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *CharacterSchema) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *CharacterSchema) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *CharacterSchema) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *CharacterSchema) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *CharacterSchema) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *CharacterSchema) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *CharacterSchema) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *CharacterSchema) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *CharacterSchema) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *CharacterSchema) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *CharacterSchema) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *CharacterSchema) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *CharacterSchema) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *CharacterSchema) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *CharacterSchema) SetSkin(val CharacterSchemaSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *CharacterSchema) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *CharacterSchema) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *CharacterSchema) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *CharacterSchema) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *CharacterSchema) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *CharacterSchema) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *CharacterSchema) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *CharacterSchema) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *CharacterSchema) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *CharacterSchema) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *CharacterSchema) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *CharacterSchema) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *CharacterSchema) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *CharacterSchema) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *CharacterSchema) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *CharacterSchema) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *CharacterSchema) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *CharacterSchema) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *CharacterSchema) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *CharacterSchema) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *CharacterSchema) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *CharacterSchema) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *CharacterSchema) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *CharacterSchema) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *CharacterSchema) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *CharacterSchema) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *CharacterSchema) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *CharacterSchema) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *CharacterSchema) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *CharacterSchema) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *CharacterSchema) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *CharacterSchema) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *CharacterSchema) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *CharacterSchema) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *CharacterSchema) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *CharacterSchema) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *CharacterSchema) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *CharacterSchema) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *CharacterSchema) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *CharacterSchema) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *CharacterSchema) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *CharacterSchema) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *CharacterSchema) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *CharacterSchema) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *CharacterSchema) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *CharacterSchema) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *CharacterSchema) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *CharacterSchema) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *CharacterSchema) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *CharacterSchema) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *CharacterSchema) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *CharacterSchema) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *CharacterSchema) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *CharacterSchema) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *CharacterSchema) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *CharacterSchema) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *CharacterSchema) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *CharacterSchema) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *CharacterSchema) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *CharacterSchema) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *CharacterSchema) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *CharacterSchema) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *CharacterSchema) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *CharacterSchema) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *CharacterSchema) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *CharacterSchema) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *CharacterSchema) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *CharacterSchema) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *CharacterSchema) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *CharacterSchema) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *CharacterSchema) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *CharacterSchema) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type CharacterSchemaSkin string

const (
	CharacterSchemaSkinMen1   CharacterSchemaSkin = "men1"
	CharacterSchemaSkinMen2   CharacterSchemaSkin = "men2"
	CharacterSchemaSkinMen3   CharacterSchemaSkin = "men3"
	CharacterSchemaSkinWomen1 CharacterSchemaSkin = "women1"
	CharacterSchemaSkinWomen2 CharacterSchemaSkin = "women2"
	CharacterSchemaSkinWomen3 CharacterSchemaSkin = "women3"
)

// AllValues returns all CharacterSchemaSkin values.
func (CharacterSchemaSkin) AllValues() []CharacterSchemaSkin {
	return []CharacterSchemaSkin{
		CharacterSchemaSkinMen1,
		CharacterSchemaSkinMen2,
		CharacterSchemaSkinMen3,
		CharacterSchemaSkinWomen1,
		CharacterSchemaSkinWomen2,
		CharacterSchemaSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CharacterSchemaSkin) MarshalText() ([]byte, error) {
	switch s {
	case CharacterSchemaSkinMen1:
		return []byte(s), nil
	case CharacterSchemaSkinMen2:
		return []byte(s), nil
	case CharacterSchemaSkinMen3:
		return []byte(s), nil
	case CharacterSchemaSkinWomen1:
		return []byte(s), nil
	case CharacterSchemaSkinWomen2:
		return []byte(s), nil
	case CharacterSchemaSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CharacterSchemaSkin) UnmarshalText(data []byte) error {
	switch CharacterSchemaSkin(data) {
	case CharacterSchemaSkinMen1:
		*s = CharacterSchemaSkinMen1
		return nil
	case CharacterSchemaSkinMen2:
		*s = CharacterSchemaSkinMen2
		return nil
	case CharacterSchemaSkinMen3:
		*s = CharacterSchemaSkinMen3
		return nil
	case CharacterSchemaSkinWomen1:
		*s = CharacterSchemaSkinWomen1
		return nil
	case CharacterSchemaSkinWomen2:
		*s = CharacterSchemaSkinWomen2
		return nil
	case CharacterSchemaSkinWomen3:
		*s = CharacterSchemaSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CraftSchema
type CraftSchema struct {
	// Skill required to craft the item.
	Skill OptCraftSchemaSkill `json:"skill"`
	// The skill level required to craft the item.
	Level OptInt `json:"level"`
	// List of items required to craft the item.
	Items []SimpleItemSchema `json:"items"`
	// Quantity of items crafted.
	Quantity OptInt `json:"quantity"`
}

// GetSkill returns the value of Skill.
func (s *CraftSchema) GetSkill() OptCraftSchemaSkill {
	return s.Skill
}

// GetLevel returns the value of Level.
func (s *CraftSchema) GetLevel() OptInt {
	return s.Level
}

// GetItems returns the value of Items.
func (s *CraftSchema) GetItems() []SimpleItemSchema {
	return s.Items
}

// GetQuantity returns the value of Quantity.
func (s *CraftSchema) GetQuantity() OptInt {
	return s.Quantity
}

// SetSkill sets the value of Skill.
func (s *CraftSchema) SetSkill(val OptCraftSchemaSkill) {
	s.Skill = val
}

// SetLevel sets the value of Level.
func (s *CraftSchema) SetLevel(val OptInt) {
	s.Level = val
}

// SetItems sets the value of Items.
func (s *CraftSchema) SetItems(val []SimpleItemSchema) {
	s.Items = val
}

// SetQuantity sets the value of Quantity.
func (s *CraftSchema) SetQuantity(val OptInt) {
	s.Quantity = val
}

type CraftSchemaSkill string

const (
	CraftSchemaSkillWeaponcrafting  CraftSchemaSkill = "weaponcrafting"
	CraftSchemaSkillGearcrafting    CraftSchemaSkill = "gearcrafting"
	CraftSchemaSkillJewelrycrafting CraftSchemaSkill = "jewelrycrafting"
	CraftSchemaSkillCooking         CraftSchemaSkill = "cooking"
	CraftSchemaSkillWoodcutting     CraftSchemaSkill = "woodcutting"
	CraftSchemaSkillMining          CraftSchemaSkill = "mining"
	CraftSchemaSkillAlchemy         CraftSchemaSkill = "alchemy"
)

// AllValues returns all CraftSchemaSkill values.
func (CraftSchemaSkill) AllValues() []CraftSchemaSkill {
	return []CraftSchemaSkill{
		CraftSchemaSkillWeaponcrafting,
		CraftSchemaSkillGearcrafting,
		CraftSchemaSkillJewelrycrafting,
		CraftSchemaSkillCooking,
		CraftSchemaSkillWoodcutting,
		CraftSchemaSkillMining,
		CraftSchemaSkillAlchemy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CraftSchemaSkill) MarshalText() ([]byte, error) {
	switch s {
	case CraftSchemaSkillWeaponcrafting:
		return []byte(s), nil
	case CraftSchemaSkillGearcrafting:
		return []byte(s), nil
	case CraftSchemaSkillJewelrycrafting:
		return []byte(s), nil
	case CraftSchemaSkillCooking:
		return []byte(s), nil
	case CraftSchemaSkillWoodcutting:
		return []byte(s), nil
	case CraftSchemaSkillMining:
		return []byte(s), nil
	case CraftSchemaSkillAlchemy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CraftSchemaSkill) UnmarshalText(data []byte) error {
	switch CraftSchemaSkill(data) {
	case CraftSchemaSkillWeaponcrafting:
		*s = CraftSchemaSkillWeaponcrafting
		return nil
	case CraftSchemaSkillGearcrafting:
		*s = CraftSchemaSkillGearcrafting
		return nil
	case CraftSchemaSkillJewelrycrafting:
		*s = CraftSchemaSkillJewelrycrafting
		return nil
	case CraftSchemaSkillCooking:
		*s = CraftSchemaSkillCooking
		return nil
	case CraftSchemaSkillWoodcutting:
		*s = CraftSchemaSkillWoodcutting
		return nil
	case CraftSchemaSkillMining:
		*s = CraftSchemaSkillMining
		return nil
	case CraftSchemaSkillAlchemy:
		*s = CraftSchemaSkillAlchemy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CraftingSchema
type CraftingSchema struct {
	// Craft code.
	Code string `json:"code"`
	// Quantity of items to craft.
	Quantity OptInt `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *CraftingSchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *CraftingSchema) GetQuantity() OptInt {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *CraftingSchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *CraftingSchema) SetQuantity(val OptInt) {
	s.Quantity = val
}

// CreateAccountAccountsCreatePostCode456 is response for CreateAccountAccountsCreatePost operation.
type CreateAccountAccountsCreatePostCode456 struct{}

func (*CreateAccountAccountsCreatePostCode456) createAccountAccountsCreatePostRes() {}

// CreateAccountAccountsCreatePostCode457 is response for CreateAccountAccountsCreatePost operation.
type CreateAccountAccountsCreatePostCode457 struct{}

func (*CreateAccountAccountsCreatePostCode457) createAccountAccountsCreatePostRes() {}

// CreateCharacterCharactersCreatePostCode494 is response for CreateCharacterCharactersCreatePost operation.
type CreateCharacterCharactersCreatePostCode494 struct{}

func (*CreateCharacterCharactersCreatePostCode494) createCharacterCharactersCreatePostRes() {}

// CreateCharacterCharactersCreatePostCode495 is response for CreateCharacterCharactersCreatePost operation.
type CreateCharacterCharactersCreatePostCode495 struct{}

func (*CreateCharacterCharactersCreatePostCode495) createCharacterCharactersCreatePostRes() {}

// Ref: #/components/schemas/DataPage_AccountAchievementSchema_
type DataPageAccountAchievementSchema struct {
	Data  []AccountAchievementSchema               `json:"data"`
	Total DataPageAccountAchievementSchemaTotal    `json:"total"`
	Page  DataPageAccountAchievementSchemaPage     `json:"page"`
	Size  DataPageAccountAchievementSchemaSize     `json:"size"`
	Pages OptDataPageAccountAchievementSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageAccountAchievementSchema) GetData() []AccountAchievementSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageAccountAchievementSchema) GetTotal() DataPageAccountAchievementSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageAccountAchievementSchema) GetPage() DataPageAccountAchievementSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageAccountAchievementSchema) GetSize() DataPageAccountAchievementSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageAccountAchievementSchema) GetPages() OptDataPageAccountAchievementSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageAccountAchievementSchema) SetData(val []AccountAchievementSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageAccountAchievementSchema) SetTotal(val DataPageAccountAchievementSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageAccountAchievementSchema) SetPage(val DataPageAccountAchievementSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageAccountAchievementSchema) SetSize(val DataPageAccountAchievementSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageAccountAchievementSchema) SetPages(val OptDataPageAccountAchievementSchemaPages) {
	s.Pages = val
}

func (*DataPageAccountAchievementSchema) getAccountAchievementsAccountsAccountAchievementsGetRes() {}

// DataPageAccountAchievementSchemaPage represents sum type.
type DataPageAccountAchievementSchemaPage struct {
	Type DataPageAccountAchievementSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountAchievementSchemaPageType is oneOf type of DataPageAccountAchievementSchemaPage.
type DataPageAccountAchievementSchemaPageType string

// Possible values for DataPageAccountAchievementSchemaPageType.
const (
	IntDataPageAccountAchievementSchemaPage  DataPageAccountAchievementSchemaPageType = "int"
	NullDataPageAccountAchievementSchemaPage DataPageAccountAchievementSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageAccountAchievementSchemaPage is int.
func (s DataPageAccountAchievementSchemaPage) IsInt() bool {
	return s.Type == IntDataPageAccountAchievementSchemaPage
}

// IsNull reports whether DataPageAccountAchievementSchemaPage is struct{}.
func (s DataPageAccountAchievementSchemaPage) IsNull() bool {
	return s.Type == NullDataPageAccountAchievementSchemaPage
}

// SetInt sets DataPageAccountAchievementSchemaPage to int.
func (s *DataPageAccountAchievementSchemaPage) SetInt(v int) {
	s.Type = IntDataPageAccountAchievementSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountAchievementSchemaPage is int.
func (s DataPageAccountAchievementSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountAchievementSchemaPage returns new DataPageAccountAchievementSchemaPage from int.
func NewIntDataPageAccountAchievementSchemaPage(v int) DataPageAccountAchievementSchemaPage {
	var s DataPageAccountAchievementSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountAchievementSchemaPage to struct{}.
func (s *DataPageAccountAchievementSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageAccountAchievementSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountAchievementSchemaPage is struct{}.
func (s DataPageAccountAchievementSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountAchievementSchemaPage returns new DataPageAccountAchievementSchemaPage from struct{}.
func NewNullDataPageAccountAchievementSchemaPage(v struct{}) DataPageAccountAchievementSchemaPage {
	var s DataPageAccountAchievementSchemaPage
	s.SetNull(v)
	return s
}

// DataPageAccountAchievementSchemaPages represents sum type.
type DataPageAccountAchievementSchemaPages struct {
	Type DataPageAccountAchievementSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountAchievementSchemaPagesType is oneOf type of DataPageAccountAchievementSchemaPages.
type DataPageAccountAchievementSchemaPagesType string

// Possible values for DataPageAccountAchievementSchemaPagesType.
const (
	IntDataPageAccountAchievementSchemaPages  DataPageAccountAchievementSchemaPagesType = "int"
	NullDataPageAccountAchievementSchemaPages DataPageAccountAchievementSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageAccountAchievementSchemaPages is int.
func (s DataPageAccountAchievementSchemaPages) IsInt() bool {
	return s.Type == IntDataPageAccountAchievementSchemaPages
}

// IsNull reports whether DataPageAccountAchievementSchemaPages is struct{}.
func (s DataPageAccountAchievementSchemaPages) IsNull() bool {
	return s.Type == NullDataPageAccountAchievementSchemaPages
}

// SetInt sets DataPageAccountAchievementSchemaPages to int.
func (s *DataPageAccountAchievementSchemaPages) SetInt(v int) {
	s.Type = IntDataPageAccountAchievementSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountAchievementSchemaPages is int.
func (s DataPageAccountAchievementSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountAchievementSchemaPages returns new DataPageAccountAchievementSchemaPages from int.
func NewIntDataPageAccountAchievementSchemaPages(v int) DataPageAccountAchievementSchemaPages {
	var s DataPageAccountAchievementSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountAchievementSchemaPages to struct{}.
func (s *DataPageAccountAchievementSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageAccountAchievementSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountAchievementSchemaPages is struct{}.
func (s DataPageAccountAchievementSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountAchievementSchemaPages returns new DataPageAccountAchievementSchemaPages from struct{}.
func NewNullDataPageAccountAchievementSchemaPages(v struct{}) DataPageAccountAchievementSchemaPages {
	var s DataPageAccountAchievementSchemaPages
	s.SetNull(v)
	return s
}

// DataPageAccountAchievementSchemaSize represents sum type.
type DataPageAccountAchievementSchemaSize struct {
	Type DataPageAccountAchievementSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountAchievementSchemaSizeType is oneOf type of DataPageAccountAchievementSchemaSize.
type DataPageAccountAchievementSchemaSizeType string

// Possible values for DataPageAccountAchievementSchemaSizeType.
const (
	IntDataPageAccountAchievementSchemaSize  DataPageAccountAchievementSchemaSizeType = "int"
	NullDataPageAccountAchievementSchemaSize DataPageAccountAchievementSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageAccountAchievementSchemaSize is int.
func (s DataPageAccountAchievementSchemaSize) IsInt() bool {
	return s.Type == IntDataPageAccountAchievementSchemaSize
}

// IsNull reports whether DataPageAccountAchievementSchemaSize is struct{}.
func (s DataPageAccountAchievementSchemaSize) IsNull() bool {
	return s.Type == NullDataPageAccountAchievementSchemaSize
}

// SetInt sets DataPageAccountAchievementSchemaSize to int.
func (s *DataPageAccountAchievementSchemaSize) SetInt(v int) {
	s.Type = IntDataPageAccountAchievementSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountAchievementSchemaSize is int.
func (s DataPageAccountAchievementSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountAchievementSchemaSize returns new DataPageAccountAchievementSchemaSize from int.
func NewIntDataPageAccountAchievementSchemaSize(v int) DataPageAccountAchievementSchemaSize {
	var s DataPageAccountAchievementSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountAchievementSchemaSize to struct{}.
func (s *DataPageAccountAchievementSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageAccountAchievementSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountAchievementSchemaSize is struct{}.
func (s DataPageAccountAchievementSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountAchievementSchemaSize returns new DataPageAccountAchievementSchemaSize from struct{}.
func NewNullDataPageAccountAchievementSchemaSize(v struct{}) DataPageAccountAchievementSchemaSize {
	var s DataPageAccountAchievementSchemaSize
	s.SetNull(v)
	return s
}

// DataPageAccountAchievementSchemaTotal represents sum type.
type DataPageAccountAchievementSchemaTotal struct {
	Type DataPageAccountAchievementSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountAchievementSchemaTotalType is oneOf type of DataPageAccountAchievementSchemaTotal.
type DataPageAccountAchievementSchemaTotalType string

// Possible values for DataPageAccountAchievementSchemaTotalType.
const (
	IntDataPageAccountAchievementSchemaTotal  DataPageAccountAchievementSchemaTotalType = "int"
	NullDataPageAccountAchievementSchemaTotal DataPageAccountAchievementSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageAccountAchievementSchemaTotal is int.
func (s DataPageAccountAchievementSchemaTotal) IsInt() bool {
	return s.Type == IntDataPageAccountAchievementSchemaTotal
}

// IsNull reports whether DataPageAccountAchievementSchemaTotal is struct{}.
func (s DataPageAccountAchievementSchemaTotal) IsNull() bool {
	return s.Type == NullDataPageAccountAchievementSchemaTotal
}

// SetInt sets DataPageAccountAchievementSchemaTotal to int.
func (s *DataPageAccountAchievementSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageAccountAchievementSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountAchievementSchemaTotal is int.
func (s DataPageAccountAchievementSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountAchievementSchemaTotal returns new DataPageAccountAchievementSchemaTotal from int.
func NewIntDataPageAccountAchievementSchemaTotal(v int) DataPageAccountAchievementSchemaTotal {
	var s DataPageAccountAchievementSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountAchievementSchemaTotal to struct{}.
func (s *DataPageAccountAchievementSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageAccountAchievementSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountAchievementSchemaTotal is struct{}.
func (s DataPageAccountAchievementSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountAchievementSchemaTotal returns new DataPageAccountAchievementSchemaTotal from struct{}.
func NewNullDataPageAccountAchievementSchemaTotal(v struct{}) DataPageAccountAchievementSchemaTotal {
	var s DataPageAccountAchievementSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_AccountLeaderboardSchema_
type DataPageAccountLeaderboardSchema struct {
	Data  []AccountLeaderboardSchema               `json:"data"`
	Total DataPageAccountLeaderboardSchemaTotal    `json:"total"`
	Page  DataPageAccountLeaderboardSchemaPage     `json:"page"`
	Size  DataPageAccountLeaderboardSchemaSize     `json:"size"`
	Pages OptDataPageAccountLeaderboardSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageAccountLeaderboardSchema) GetData() []AccountLeaderboardSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageAccountLeaderboardSchema) GetTotal() DataPageAccountLeaderboardSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageAccountLeaderboardSchema) GetPage() DataPageAccountLeaderboardSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageAccountLeaderboardSchema) GetSize() DataPageAccountLeaderboardSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageAccountLeaderboardSchema) GetPages() OptDataPageAccountLeaderboardSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageAccountLeaderboardSchema) SetData(val []AccountLeaderboardSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageAccountLeaderboardSchema) SetTotal(val DataPageAccountLeaderboardSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageAccountLeaderboardSchema) SetPage(val DataPageAccountLeaderboardSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageAccountLeaderboardSchema) SetSize(val DataPageAccountLeaderboardSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageAccountLeaderboardSchema) SetPages(val OptDataPageAccountLeaderboardSchemaPages) {
	s.Pages = val
}

// DataPageAccountLeaderboardSchemaPage represents sum type.
type DataPageAccountLeaderboardSchemaPage struct {
	Type DataPageAccountLeaderboardSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountLeaderboardSchemaPageType is oneOf type of DataPageAccountLeaderboardSchemaPage.
type DataPageAccountLeaderboardSchemaPageType string

// Possible values for DataPageAccountLeaderboardSchemaPageType.
const (
	IntDataPageAccountLeaderboardSchemaPage  DataPageAccountLeaderboardSchemaPageType = "int"
	NullDataPageAccountLeaderboardSchemaPage DataPageAccountLeaderboardSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageAccountLeaderboardSchemaPage is int.
func (s DataPageAccountLeaderboardSchemaPage) IsInt() bool {
	return s.Type == IntDataPageAccountLeaderboardSchemaPage
}

// IsNull reports whether DataPageAccountLeaderboardSchemaPage is struct{}.
func (s DataPageAccountLeaderboardSchemaPage) IsNull() bool {
	return s.Type == NullDataPageAccountLeaderboardSchemaPage
}

// SetInt sets DataPageAccountLeaderboardSchemaPage to int.
func (s *DataPageAccountLeaderboardSchemaPage) SetInt(v int) {
	s.Type = IntDataPageAccountLeaderboardSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountLeaderboardSchemaPage is int.
func (s DataPageAccountLeaderboardSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountLeaderboardSchemaPage returns new DataPageAccountLeaderboardSchemaPage from int.
func NewIntDataPageAccountLeaderboardSchemaPage(v int) DataPageAccountLeaderboardSchemaPage {
	var s DataPageAccountLeaderboardSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountLeaderboardSchemaPage to struct{}.
func (s *DataPageAccountLeaderboardSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageAccountLeaderboardSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountLeaderboardSchemaPage is struct{}.
func (s DataPageAccountLeaderboardSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountLeaderboardSchemaPage returns new DataPageAccountLeaderboardSchemaPage from struct{}.
func NewNullDataPageAccountLeaderboardSchemaPage(v struct{}) DataPageAccountLeaderboardSchemaPage {
	var s DataPageAccountLeaderboardSchemaPage
	s.SetNull(v)
	return s
}

// DataPageAccountLeaderboardSchemaPages represents sum type.
type DataPageAccountLeaderboardSchemaPages struct {
	Type DataPageAccountLeaderboardSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountLeaderboardSchemaPagesType is oneOf type of DataPageAccountLeaderboardSchemaPages.
type DataPageAccountLeaderboardSchemaPagesType string

// Possible values for DataPageAccountLeaderboardSchemaPagesType.
const (
	IntDataPageAccountLeaderboardSchemaPages  DataPageAccountLeaderboardSchemaPagesType = "int"
	NullDataPageAccountLeaderboardSchemaPages DataPageAccountLeaderboardSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageAccountLeaderboardSchemaPages is int.
func (s DataPageAccountLeaderboardSchemaPages) IsInt() bool {
	return s.Type == IntDataPageAccountLeaderboardSchemaPages
}

// IsNull reports whether DataPageAccountLeaderboardSchemaPages is struct{}.
func (s DataPageAccountLeaderboardSchemaPages) IsNull() bool {
	return s.Type == NullDataPageAccountLeaderboardSchemaPages
}

// SetInt sets DataPageAccountLeaderboardSchemaPages to int.
func (s *DataPageAccountLeaderboardSchemaPages) SetInt(v int) {
	s.Type = IntDataPageAccountLeaderboardSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountLeaderboardSchemaPages is int.
func (s DataPageAccountLeaderboardSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountLeaderboardSchemaPages returns new DataPageAccountLeaderboardSchemaPages from int.
func NewIntDataPageAccountLeaderboardSchemaPages(v int) DataPageAccountLeaderboardSchemaPages {
	var s DataPageAccountLeaderboardSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountLeaderboardSchemaPages to struct{}.
func (s *DataPageAccountLeaderboardSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageAccountLeaderboardSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountLeaderboardSchemaPages is struct{}.
func (s DataPageAccountLeaderboardSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountLeaderboardSchemaPages returns new DataPageAccountLeaderboardSchemaPages from struct{}.
func NewNullDataPageAccountLeaderboardSchemaPages(v struct{}) DataPageAccountLeaderboardSchemaPages {
	var s DataPageAccountLeaderboardSchemaPages
	s.SetNull(v)
	return s
}

// DataPageAccountLeaderboardSchemaSize represents sum type.
type DataPageAccountLeaderboardSchemaSize struct {
	Type DataPageAccountLeaderboardSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountLeaderboardSchemaSizeType is oneOf type of DataPageAccountLeaderboardSchemaSize.
type DataPageAccountLeaderboardSchemaSizeType string

// Possible values for DataPageAccountLeaderboardSchemaSizeType.
const (
	IntDataPageAccountLeaderboardSchemaSize  DataPageAccountLeaderboardSchemaSizeType = "int"
	NullDataPageAccountLeaderboardSchemaSize DataPageAccountLeaderboardSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageAccountLeaderboardSchemaSize is int.
func (s DataPageAccountLeaderboardSchemaSize) IsInt() bool {
	return s.Type == IntDataPageAccountLeaderboardSchemaSize
}

// IsNull reports whether DataPageAccountLeaderboardSchemaSize is struct{}.
func (s DataPageAccountLeaderboardSchemaSize) IsNull() bool {
	return s.Type == NullDataPageAccountLeaderboardSchemaSize
}

// SetInt sets DataPageAccountLeaderboardSchemaSize to int.
func (s *DataPageAccountLeaderboardSchemaSize) SetInt(v int) {
	s.Type = IntDataPageAccountLeaderboardSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountLeaderboardSchemaSize is int.
func (s DataPageAccountLeaderboardSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountLeaderboardSchemaSize returns new DataPageAccountLeaderboardSchemaSize from int.
func NewIntDataPageAccountLeaderboardSchemaSize(v int) DataPageAccountLeaderboardSchemaSize {
	var s DataPageAccountLeaderboardSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountLeaderboardSchemaSize to struct{}.
func (s *DataPageAccountLeaderboardSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageAccountLeaderboardSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountLeaderboardSchemaSize is struct{}.
func (s DataPageAccountLeaderboardSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountLeaderboardSchemaSize returns new DataPageAccountLeaderboardSchemaSize from struct{}.
func NewNullDataPageAccountLeaderboardSchemaSize(v struct{}) DataPageAccountLeaderboardSchemaSize {
	var s DataPageAccountLeaderboardSchemaSize
	s.SetNull(v)
	return s
}

// DataPageAccountLeaderboardSchemaTotal represents sum type.
type DataPageAccountLeaderboardSchemaTotal struct {
	Type DataPageAccountLeaderboardSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAccountLeaderboardSchemaTotalType is oneOf type of DataPageAccountLeaderboardSchemaTotal.
type DataPageAccountLeaderboardSchemaTotalType string

// Possible values for DataPageAccountLeaderboardSchemaTotalType.
const (
	IntDataPageAccountLeaderboardSchemaTotal  DataPageAccountLeaderboardSchemaTotalType = "int"
	NullDataPageAccountLeaderboardSchemaTotal DataPageAccountLeaderboardSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageAccountLeaderboardSchemaTotal is int.
func (s DataPageAccountLeaderboardSchemaTotal) IsInt() bool {
	return s.Type == IntDataPageAccountLeaderboardSchemaTotal
}

// IsNull reports whether DataPageAccountLeaderboardSchemaTotal is struct{}.
func (s DataPageAccountLeaderboardSchemaTotal) IsNull() bool {
	return s.Type == NullDataPageAccountLeaderboardSchemaTotal
}

// SetInt sets DataPageAccountLeaderboardSchemaTotal to int.
func (s *DataPageAccountLeaderboardSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageAccountLeaderboardSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAccountLeaderboardSchemaTotal is int.
func (s DataPageAccountLeaderboardSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAccountLeaderboardSchemaTotal returns new DataPageAccountLeaderboardSchemaTotal from int.
func NewIntDataPageAccountLeaderboardSchemaTotal(v int) DataPageAccountLeaderboardSchemaTotal {
	var s DataPageAccountLeaderboardSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAccountLeaderboardSchemaTotal to struct{}.
func (s *DataPageAccountLeaderboardSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageAccountLeaderboardSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAccountLeaderboardSchemaTotal is struct{}.
func (s DataPageAccountLeaderboardSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAccountLeaderboardSchemaTotal returns new DataPageAccountLeaderboardSchemaTotal from struct{}.
func NewNullDataPageAccountLeaderboardSchemaTotal(v struct{}) DataPageAccountLeaderboardSchemaTotal {
	var s DataPageAccountLeaderboardSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_AchievementSchema_
type DataPageAchievementSchema struct {
	Data  []AchievementSchema               `json:"data"`
	Total DataPageAchievementSchemaTotal    `json:"total"`
	Page  DataPageAchievementSchemaPage     `json:"page"`
	Size  DataPageAchievementSchemaSize     `json:"size"`
	Pages OptDataPageAchievementSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageAchievementSchema) GetData() []AchievementSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageAchievementSchema) GetTotal() DataPageAchievementSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageAchievementSchema) GetPage() DataPageAchievementSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageAchievementSchema) GetSize() DataPageAchievementSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageAchievementSchema) GetPages() OptDataPageAchievementSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageAchievementSchema) SetData(val []AchievementSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageAchievementSchema) SetTotal(val DataPageAchievementSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageAchievementSchema) SetPage(val DataPageAchievementSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageAchievementSchema) SetSize(val DataPageAchievementSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageAchievementSchema) SetPages(val OptDataPageAchievementSchemaPages) {
	s.Pages = val
}

// DataPageAchievementSchemaPage represents sum type.
type DataPageAchievementSchemaPage struct {
	Type DataPageAchievementSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAchievementSchemaPageType is oneOf type of DataPageAchievementSchemaPage.
type DataPageAchievementSchemaPageType string

// Possible values for DataPageAchievementSchemaPageType.
const (
	IntDataPageAchievementSchemaPage  DataPageAchievementSchemaPageType = "int"
	NullDataPageAchievementSchemaPage DataPageAchievementSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageAchievementSchemaPage is int.
func (s DataPageAchievementSchemaPage) IsInt() bool {
	return s.Type == IntDataPageAchievementSchemaPage
}

// IsNull reports whether DataPageAchievementSchemaPage is struct{}.
func (s DataPageAchievementSchemaPage) IsNull() bool {
	return s.Type == NullDataPageAchievementSchemaPage
}

// SetInt sets DataPageAchievementSchemaPage to int.
func (s *DataPageAchievementSchemaPage) SetInt(v int) {
	s.Type = IntDataPageAchievementSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAchievementSchemaPage is int.
func (s DataPageAchievementSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAchievementSchemaPage returns new DataPageAchievementSchemaPage from int.
func NewIntDataPageAchievementSchemaPage(v int) DataPageAchievementSchemaPage {
	var s DataPageAchievementSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAchievementSchemaPage to struct{}.
func (s *DataPageAchievementSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageAchievementSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAchievementSchemaPage is struct{}.
func (s DataPageAchievementSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAchievementSchemaPage returns new DataPageAchievementSchemaPage from struct{}.
func NewNullDataPageAchievementSchemaPage(v struct{}) DataPageAchievementSchemaPage {
	var s DataPageAchievementSchemaPage
	s.SetNull(v)
	return s
}

// DataPageAchievementSchemaPages represents sum type.
type DataPageAchievementSchemaPages struct {
	Type DataPageAchievementSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAchievementSchemaPagesType is oneOf type of DataPageAchievementSchemaPages.
type DataPageAchievementSchemaPagesType string

// Possible values for DataPageAchievementSchemaPagesType.
const (
	IntDataPageAchievementSchemaPages  DataPageAchievementSchemaPagesType = "int"
	NullDataPageAchievementSchemaPages DataPageAchievementSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageAchievementSchemaPages is int.
func (s DataPageAchievementSchemaPages) IsInt() bool {
	return s.Type == IntDataPageAchievementSchemaPages
}

// IsNull reports whether DataPageAchievementSchemaPages is struct{}.
func (s DataPageAchievementSchemaPages) IsNull() bool {
	return s.Type == NullDataPageAchievementSchemaPages
}

// SetInt sets DataPageAchievementSchemaPages to int.
func (s *DataPageAchievementSchemaPages) SetInt(v int) {
	s.Type = IntDataPageAchievementSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAchievementSchemaPages is int.
func (s DataPageAchievementSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAchievementSchemaPages returns new DataPageAchievementSchemaPages from int.
func NewIntDataPageAchievementSchemaPages(v int) DataPageAchievementSchemaPages {
	var s DataPageAchievementSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAchievementSchemaPages to struct{}.
func (s *DataPageAchievementSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageAchievementSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAchievementSchemaPages is struct{}.
func (s DataPageAchievementSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAchievementSchemaPages returns new DataPageAchievementSchemaPages from struct{}.
func NewNullDataPageAchievementSchemaPages(v struct{}) DataPageAchievementSchemaPages {
	var s DataPageAchievementSchemaPages
	s.SetNull(v)
	return s
}

// DataPageAchievementSchemaSize represents sum type.
type DataPageAchievementSchemaSize struct {
	Type DataPageAchievementSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAchievementSchemaSizeType is oneOf type of DataPageAchievementSchemaSize.
type DataPageAchievementSchemaSizeType string

// Possible values for DataPageAchievementSchemaSizeType.
const (
	IntDataPageAchievementSchemaSize  DataPageAchievementSchemaSizeType = "int"
	NullDataPageAchievementSchemaSize DataPageAchievementSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageAchievementSchemaSize is int.
func (s DataPageAchievementSchemaSize) IsInt() bool {
	return s.Type == IntDataPageAchievementSchemaSize
}

// IsNull reports whether DataPageAchievementSchemaSize is struct{}.
func (s DataPageAchievementSchemaSize) IsNull() bool {
	return s.Type == NullDataPageAchievementSchemaSize
}

// SetInt sets DataPageAchievementSchemaSize to int.
func (s *DataPageAchievementSchemaSize) SetInt(v int) {
	s.Type = IntDataPageAchievementSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAchievementSchemaSize is int.
func (s DataPageAchievementSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAchievementSchemaSize returns new DataPageAchievementSchemaSize from int.
func NewIntDataPageAchievementSchemaSize(v int) DataPageAchievementSchemaSize {
	var s DataPageAchievementSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAchievementSchemaSize to struct{}.
func (s *DataPageAchievementSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageAchievementSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAchievementSchemaSize is struct{}.
func (s DataPageAchievementSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAchievementSchemaSize returns new DataPageAchievementSchemaSize from struct{}.
func NewNullDataPageAchievementSchemaSize(v struct{}) DataPageAchievementSchemaSize {
	var s DataPageAchievementSchemaSize
	s.SetNull(v)
	return s
}

// DataPageAchievementSchemaTotal represents sum type.
type DataPageAchievementSchemaTotal struct {
	Type DataPageAchievementSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageAchievementSchemaTotalType is oneOf type of DataPageAchievementSchemaTotal.
type DataPageAchievementSchemaTotalType string

// Possible values for DataPageAchievementSchemaTotalType.
const (
	IntDataPageAchievementSchemaTotal  DataPageAchievementSchemaTotalType = "int"
	NullDataPageAchievementSchemaTotal DataPageAchievementSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageAchievementSchemaTotal is int.
func (s DataPageAchievementSchemaTotal) IsInt() bool {
	return s.Type == IntDataPageAchievementSchemaTotal
}

// IsNull reports whether DataPageAchievementSchemaTotal is struct{}.
func (s DataPageAchievementSchemaTotal) IsNull() bool {
	return s.Type == NullDataPageAchievementSchemaTotal
}

// SetInt sets DataPageAchievementSchemaTotal to int.
func (s *DataPageAchievementSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageAchievementSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageAchievementSchemaTotal is int.
func (s DataPageAchievementSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageAchievementSchemaTotal returns new DataPageAchievementSchemaTotal from int.
func NewIntDataPageAchievementSchemaTotal(v int) DataPageAchievementSchemaTotal {
	var s DataPageAchievementSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageAchievementSchemaTotal to struct{}.
func (s *DataPageAchievementSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageAchievementSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageAchievementSchemaTotal is struct{}.
func (s DataPageAchievementSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageAchievementSchemaTotal returns new DataPageAchievementSchemaTotal from struct{}.
func NewNullDataPageAchievementSchemaTotal(v struct{}) DataPageAchievementSchemaTotal {
	var s DataPageAchievementSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_ActiveEventSchema_
type DataPageActiveEventSchema struct {
	Data  []ActiveEventSchema               `json:"data"`
	Total DataPageActiveEventSchemaTotal    `json:"total"`
	Page  DataPageActiveEventSchemaPage     `json:"page"`
	Size  DataPageActiveEventSchemaSize     `json:"size"`
	Pages OptDataPageActiveEventSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageActiveEventSchema) GetData() []ActiveEventSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageActiveEventSchema) GetTotal() DataPageActiveEventSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageActiveEventSchema) GetPage() DataPageActiveEventSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageActiveEventSchema) GetSize() DataPageActiveEventSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageActiveEventSchema) GetPages() OptDataPageActiveEventSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageActiveEventSchema) SetData(val []ActiveEventSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageActiveEventSchema) SetTotal(val DataPageActiveEventSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageActiveEventSchema) SetPage(val DataPageActiveEventSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageActiveEventSchema) SetSize(val DataPageActiveEventSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageActiveEventSchema) SetPages(val OptDataPageActiveEventSchemaPages) {
	s.Pages = val
}

// DataPageActiveEventSchemaPage represents sum type.
type DataPageActiveEventSchemaPage struct {
	Type DataPageActiveEventSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageActiveEventSchemaPageType is oneOf type of DataPageActiveEventSchemaPage.
type DataPageActiveEventSchemaPageType string

// Possible values for DataPageActiveEventSchemaPageType.
const (
	IntDataPageActiveEventSchemaPage  DataPageActiveEventSchemaPageType = "int"
	NullDataPageActiveEventSchemaPage DataPageActiveEventSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageActiveEventSchemaPage is int.
func (s DataPageActiveEventSchemaPage) IsInt() bool {
	return s.Type == IntDataPageActiveEventSchemaPage
}

// IsNull reports whether DataPageActiveEventSchemaPage is struct{}.
func (s DataPageActiveEventSchemaPage) IsNull() bool {
	return s.Type == NullDataPageActiveEventSchemaPage
}

// SetInt sets DataPageActiveEventSchemaPage to int.
func (s *DataPageActiveEventSchemaPage) SetInt(v int) {
	s.Type = IntDataPageActiveEventSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageActiveEventSchemaPage is int.
func (s DataPageActiveEventSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageActiveEventSchemaPage returns new DataPageActiveEventSchemaPage from int.
func NewIntDataPageActiveEventSchemaPage(v int) DataPageActiveEventSchemaPage {
	var s DataPageActiveEventSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageActiveEventSchemaPage to struct{}.
func (s *DataPageActiveEventSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageActiveEventSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageActiveEventSchemaPage is struct{}.
func (s DataPageActiveEventSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageActiveEventSchemaPage returns new DataPageActiveEventSchemaPage from struct{}.
func NewNullDataPageActiveEventSchemaPage(v struct{}) DataPageActiveEventSchemaPage {
	var s DataPageActiveEventSchemaPage
	s.SetNull(v)
	return s
}

// DataPageActiveEventSchemaPages represents sum type.
type DataPageActiveEventSchemaPages struct {
	Type DataPageActiveEventSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageActiveEventSchemaPagesType is oneOf type of DataPageActiveEventSchemaPages.
type DataPageActiveEventSchemaPagesType string

// Possible values for DataPageActiveEventSchemaPagesType.
const (
	IntDataPageActiveEventSchemaPages  DataPageActiveEventSchemaPagesType = "int"
	NullDataPageActiveEventSchemaPages DataPageActiveEventSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageActiveEventSchemaPages is int.
func (s DataPageActiveEventSchemaPages) IsInt() bool {
	return s.Type == IntDataPageActiveEventSchemaPages
}

// IsNull reports whether DataPageActiveEventSchemaPages is struct{}.
func (s DataPageActiveEventSchemaPages) IsNull() bool {
	return s.Type == NullDataPageActiveEventSchemaPages
}

// SetInt sets DataPageActiveEventSchemaPages to int.
func (s *DataPageActiveEventSchemaPages) SetInt(v int) {
	s.Type = IntDataPageActiveEventSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageActiveEventSchemaPages is int.
func (s DataPageActiveEventSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageActiveEventSchemaPages returns new DataPageActiveEventSchemaPages from int.
func NewIntDataPageActiveEventSchemaPages(v int) DataPageActiveEventSchemaPages {
	var s DataPageActiveEventSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageActiveEventSchemaPages to struct{}.
func (s *DataPageActiveEventSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageActiveEventSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageActiveEventSchemaPages is struct{}.
func (s DataPageActiveEventSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageActiveEventSchemaPages returns new DataPageActiveEventSchemaPages from struct{}.
func NewNullDataPageActiveEventSchemaPages(v struct{}) DataPageActiveEventSchemaPages {
	var s DataPageActiveEventSchemaPages
	s.SetNull(v)
	return s
}

// DataPageActiveEventSchemaSize represents sum type.
type DataPageActiveEventSchemaSize struct {
	Type DataPageActiveEventSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageActiveEventSchemaSizeType is oneOf type of DataPageActiveEventSchemaSize.
type DataPageActiveEventSchemaSizeType string

// Possible values for DataPageActiveEventSchemaSizeType.
const (
	IntDataPageActiveEventSchemaSize  DataPageActiveEventSchemaSizeType = "int"
	NullDataPageActiveEventSchemaSize DataPageActiveEventSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageActiveEventSchemaSize is int.
func (s DataPageActiveEventSchemaSize) IsInt() bool {
	return s.Type == IntDataPageActiveEventSchemaSize
}

// IsNull reports whether DataPageActiveEventSchemaSize is struct{}.
func (s DataPageActiveEventSchemaSize) IsNull() bool {
	return s.Type == NullDataPageActiveEventSchemaSize
}

// SetInt sets DataPageActiveEventSchemaSize to int.
func (s *DataPageActiveEventSchemaSize) SetInt(v int) {
	s.Type = IntDataPageActiveEventSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageActiveEventSchemaSize is int.
func (s DataPageActiveEventSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageActiveEventSchemaSize returns new DataPageActiveEventSchemaSize from int.
func NewIntDataPageActiveEventSchemaSize(v int) DataPageActiveEventSchemaSize {
	var s DataPageActiveEventSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageActiveEventSchemaSize to struct{}.
func (s *DataPageActiveEventSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageActiveEventSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageActiveEventSchemaSize is struct{}.
func (s DataPageActiveEventSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageActiveEventSchemaSize returns new DataPageActiveEventSchemaSize from struct{}.
func NewNullDataPageActiveEventSchemaSize(v struct{}) DataPageActiveEventSchemaSize {
	var s DataPageActiveEventSchemaSize
	s.SetNull(v)
	return s
}

// DataPageActiveEventSchemaTotal represents sum type.
type DataPageActiveEventSchemaTotal struct {
	Type DataPageActiveEventSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageActiveEventSchemaTotalType is oneOf type of DataPageActiveEventSchemaTotal.
type DataPageActiveEventSchemaTotalType string

// Possible values for DataPageActiveEventSchemaTotalType.
const (
	IntDataPageActiveEventSchemaTotal  DataPageActiveEventSchemaTotalType = "int"
	NullDataPageActiveEventSchemaTotal DataPageActiveEventSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageActiveEventSchemaTotal is int.
func (s DataPageActiveEventSchemaTotal) IsInt() bool {
	return s.Type == IntDataPageActiveEventSchemaTotal
}

// IsNull reports whether DataPageActiveEventSchemaTotal is struct{}.
func (s DataPageActiveEventSchemaTotal) IsNull() bool {
	return s.Type == NullDataPageActiveEventSchemaTotal
}

// SetInt sets DataPageActiveEventSchemaTotal to int.
func (s *DataPageActiveEventSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageActiveEventSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageActiveEventSchemaTotal is int.
func (s DataPageActiveEventSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageActiveEventSchemaTotal returns new DataPageActiveEventSchemaTotal from int.
func NewIntDataPageActiveEventSchemaTotal(v int) DataPageActiveEventSchemaTotal {
	var s DataPageActiveEventSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageActiveEventSchemaTotal to struct{}.
func (s *DataPageActiveEventSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageActiveEventSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageActiveEventSchemaTotal is struct{}.
func (s DataPageActiveEventSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageActiveEventSchemaTotal returns new DataPageActiveEventSchemaTotal from struct{}.
func NewNullDataPageActiveEventSchemaTotal(v struct{}) DataPageActiveEventSchemaTotal {
	var s DataPageActiveEventSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_CharacterLeaderboardSchema_
type DataPageCharacterLeaderboardSchema struct {
	Data  []CharacterLeaderboardSchema               `json:"data"`
	Total DataPageCharacterLeaderboardSchemaTotal    `json:"total"`
	Page  DataPageCharacterLeaderboardSchemaPage     `json:"page"`
	Size  DataPageCharacterLeaderboardSchemaSize     `json:"size"`
	Pages OptDataPageCharacterLeaderboardSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageCharacterLeaderboardSchema) GetData() []CharacterLeaderboardSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageCharacterLeaderboardSchema) GetTotal() DataPageCharacterLeaderboardSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageCharacterLeaderboardSchema) GetPage() DataPageCharacterLeaderboardSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageCharacterLeaderboardSchema) GetSize() DataPageCharacterLeaderboardSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageCharacterLeaderboardSchema) GetPages() OptDataPageCharacterLeaderboardSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageCharacterLeaderboardSchema) SetData(val []CharacterLeaderboardSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageCharacterLeaderboardSchema) SetTotal(val DataPageCharacterLeaderboardSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageCharacterLeaderboardSchema) SetPage(val DataPageCharacterLeaderboardSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageCharacterLeaderboardSchema) SetSize(val DataPageCharacterLeaderboardSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageCharacterLeaderboardSchema) SetPages(val OptDataPageCharacterLeaderboardSchemaPages) {
	s.Pages = val
}

// DataPageCharacterLeaderboardSchemaPage represents sum type.
type DataPageCharacterLeaderboardSchemaPage struct {
	Type DataPageCharacterLeaderboardSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageCharacterLeaderboardSchemaPageType is oneOf type of DataPageCharacterLeaderboardSchemaPage.
type DataPageCharacterLeaderboardSchemaPageType string

// Possible values for DataPageCharacterLeaderboardSchemaPageType.
const (
	IntDataPageCharacterLeaderboardSchemaPage  DataPageCharacterLeaderboardSchemaPageType = "int"
	NullDataPageCharacterLeaderboardSchemaPage DataPageCharacterLeaderboardSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageCharacterLeaderboardSchemaPage is int.
func (s DataPageCharacterLeaderboardSchemaPage) IsInt() bool {
	return s.Type == IntDataPageCharacterLeaderboardSchemaPage
}

// IsNull reports whether DataPageCharacterLeaderboardSchemaPage is struct{}.
func (s DataPageCharacterLeaderboardSchemaPage) IsNull() bool {
	return s.Type == NullDataPageCharacterLeaderboardSchemaPage
}

// SetInt sets DataPageCharacterLeaderboardSchemaPage to int.
func (s *DataPageCharacterLeaderboardSchemaPage) SetInt(v int) {
	s.Type = IntDataPageCharacterLeaderboardSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageCharacterLeaderboardSchemaPage is int.
func (s DataPageCharacterLeaderboardSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageCharacterLeaderboardSchemaPage returns new DataPageCharacterLeaderboardSchemaPage from int.
func NewIntDataPageCharacterLeaderboardSchemaPage(v int) DataPageCharacterLeaderboardSchemaPage {
	var s DataPageCharacterLeaderboardSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageCharacterLeaderboardSchemaPage to struct{}.
func (s *DataPageCharacterLeaderboardSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageCharacterLeaderboardSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageCharacterLeaderboardSchemaPage is struct{}.
func (s DataPageCharacterLeaderboardSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageCharacterLeaderboardSchemaPage returns new DataPageCharacterLeaderboardSchemaPage from struct{}.
func NewNullDataPageCharacterLeaderboardSchemaPage(v struct{}) DataPageCharacterLeaderboardSchemaPage {
	var s DataPageCharacterLeaderboardSchemaPage
	s.SetNull(v)
	return s
}

// DataPageCharacterLeaderboardSchemaPages represents sum type.
type DataPageCharacterLeaderboardSchemaPages struct {
	Type DataPageCharacterLeaderboardSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageCharacterLeaderboardSchemaPagesType is oneOf type of DataPageCharacterLeaderboardSchemaPages.
type DataPageCharacterLeaderboardSchemaPagesType string

// Possible values for DataPageCharacterLeaderboardSchemaPagesType.
const (
	IntDataPageCharacterLeaderboardSchemaPages  DataPageCharacterLeaderboardSchemaPagesType = "int"
	NullDataPageCharacterLeaderboardSchemaPages DataPageCharacterLeaderboardSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageCharacterLeaderboardSchemaPages is int.
func (s DataPageCharacterLeaderboardSchemaPages) IsInt() bool {
	return s.Type == IntDataPageCharacterLeaderboardSchemaPages
}

// IsNull reports whether DataPageCharacterLeaderboardSchemaPages is struct{}.
func (s DataPageCharacterLeaderboardSchemaPages) IsNull() bool {
	return s.Type == NullDataPageCharacterLeaderboardSchemaPages
}

// SetInt sets DataPageCharacterLeaderboardSchemaPages to int.
func (s *DataPageCharacterLeaderboardSchemaPages) SetInt(v int) {
	s.Type = IntDataPageCharacterLeaderboardSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageCharacterLeaderboardSchemaPages is int.
func (s DataPageCharacterLeaderboardSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageCharacterLeaderboardSchemaPages returns new DataPageCharacterLeaderboardSchemaPages from int.
func NewIntDataPageCharacterLeaderboardSchemaPages(v int) DataPageCharacterLeaderboardSchemaPages {
	var s DataPageCharacterLeaderboardSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageCharacterLeaderboardSchemaPages to struct{}.
func (s *DataPageCharacterLeaderboardSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageCharacterLeaderboardSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageCharacterLeaderboardSchemaPages is struct{}.
func (s DataPageCharacterLeaderboardSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageCharacterLeaderboardSchemaPages returns new DataPageCharacterLeaderboardSchemaPages from struct{}.
func NewNullDataPageCharacterLeaderboardSchemaPages(v struct{}) DataPageCharacterLeaderboardSchemaPages {
	var s DataPageCharacterLeaderboardSchemaPages
	s.SetNull(v)
	return s
}

// DataPageCharacterLeaderboardSchemaSize represents sum type.
type DataPageCharacterLeaderboardSchemaSize struct {
	Type DataPageCharacterLeaderboardSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageCharacterLeaderboardSchemaSizeType is oneOf type of DataPageCharacterLeaderboardSchemaSize.
type DataPageCharacterLeaderboardSchemaSizeType string

// Possible values for DataPageCharacterLeaderboardSchemaSizeType.
const (
	IntDataPageCharacterLeaderboardSchemaSize  DataPageCharacterLeaderboardSchemaSizeType = "int"
	NullDataPageCharacterLeaderboardSchemaSize DataPageCharacterLeaderboardSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageCharacterLeaderboardSchemaSize is int.
func (s DataPageCharacterLeaderboardSchemaSize) IsInt() bool {
	return s.Type == IntDataPageCharacterLeaderboardSchemaSize
}

// IsNull reports whether DataPageCharacterLeaderboardSchemaSize is struct{}.
func (s DataPageCharacterLeaderboardSchemaSize) IsNull() bool {
	return s.Type == NullDataPageCharacterLeaderboardSchemaSize
}

// SetInt sets DataPageCharacterLeaderboardSchemaSize to int.
func (s *DataPageCharacterLeaderboardSchemaSize) SetInt(v int) {
	s.Type = IntDataPageCharacterLeaderboardSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageCharacterLeaderboardSchemaSize is int.
func (s DataPageCharacterLeaderboardSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageCharacterLeaderboardSchemaSize returns new DataPageCharacterLeaderboardSchemaSize from int.
func NewIntDataPageCharacterLeaderboardSchemaSize(v int) DataPageCharacterLeaderboardSchemaSize {
	var s DataPageCharacterLeaderboardSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageCharacterLeaderboardSchemaSize to struct{}.
func (s *DataPageCharacterLeaderboardSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageCharacterLeaderboardSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageCharacterLeaderboardSchemaSize is struct{}.
func (s DataPageCharacterLeaderboardSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageCharacterLeaderboardSchemaSize returns new DataPageCharacterLeaderboardSchemaSize from struct{}.
func NewNullDataPageCharacterLeaderboardSchemaSize(v struct{}) DataPageCharacterLeaderboardSchemaSize {
	var s DataPageCharacterLeaderboardSchemaSize
	s.SetNull(v)
	return s
}

// DataPageCharacterLeaderboardSchemaTotal represents sum type.
type DataPageCharacterLeaderboardSchemaTotal struct {
	Type DataPageCharacterLeaderboardSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageCharacterLeaderboardSchemaTotalType is oneOf type of DataPageCharacterLeaderboardSchemaTotal.
type DataPageCharacterLeaderboardSchemaTotalType string

// Possible values for DataPageCharacterLeaderboardSchemaTotalType.
const (
	IntDataPageCharacterLeaderboardSchemaTotal  DataPageCharacterLeaderboardSchemaTotalType = "int"
	NullDataPageCharacterLeaderboardSchemaTotal DataPageCharacterLeaderboardSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageCharacterLeaderboardSchemaTotal is int.
func (s DataPageCharacterLeaderboardSchemaTotal) IsInt() bool {
	return s.Type == IntDataPageCharacterLeaderboardSchemaTotal
}

// IsNull reports whether DataPageCharacterLeaderboardSchemaTotal is struct{}.
func (s DataPageCharacterLeaderboardSchemaTotal) IsNull() bool {
	return s.Type == NullDataPageCharacterLeaderboardSchemaTotal
}

// SetInt sets DataPageCharacterLeaderboardSchemaTotal to int.
func (s *DataPageCharacterLeaderboardSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageCharacterLeaderboardSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageCharacterLeaderboardSchemaTotal is int.
func (s DataPageCharacterLeaderboardSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageCharacterLeaderboardSchemaTotal returns new DataPageCharacterLeaderboardSchemaTotal from int.
func NewIntDataPageCharacterLeaderboardSchemaTotal(v int) DataPageCharacterLeaderboardSchemaTotal {
	var s DataPageCharacterLeaderboardSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageCharacterLeaderboardSchemaTotal to struct{}.
func (s *DataPageCharacterLeaderboardSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageCharacterLeaderboardSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageCharacterLeaderboardSchemaTotal is struct{}.
func (s DataPageCharacterLeaderboardSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageCharacterLeaderboardSchemaTotal returns new DataPageCharacterLeaderboardSchemaTotal from struct{}.
func NewNullDataPageCharacterLeaderboardSchemaTotal(v struct{}) DataPageCharacterLeaderboardSchemaTotal {
	var s DataPageCharacterLeaderboardSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_DropRateSchema_
type DataPageDropRateSchema struct {
	Data  []DropRateSchema               `json:"data"`
	Total DataPageDropRateSchemaTotal    `json:"total"`
	Page  DataPageDropRateSchemaPage     `json:"page"`
	Size  DataPageDropRateSchemaSize     `json:"size"`
	Pages OptDataPageDropRateSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageDropRateSchema) GetData() []DropRateSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageDropRateSchema) GetTotal() DataPageDropRateSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageDropRateSchema) GetPage() DataPageDropRateSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageDropRateSchema) GetSize() DataPageDropRateSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageDropRateSchema) GetPages() OptDataPageDropRateSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageDropRateSchema) SetData(val []DropRateSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageDropRateSchema) SetTotal(val DataPageDropRateSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageDropRateSchema) SetPage(val DataPageDropRateSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageDropRateSchema) SetSize(val DataPageDropRateSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageDropRateSchema) SetPages(val OptDataPageDropRateSchemaPages) {
	s.Pages = val
}

// DataPageDropRateSchemaPage represents sum type.
type DataPageDropRateSchemaPage struct {
	Type DataPageDropRateSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageDropRateSchemaPageType is oneOf type of DataPageDropRateSchemaPage.
type DataPageDropRateSchemaPageType string

// Possible values for DataPageDropRateSchemaPageType.
const (
	IntDataPageDropRateSchemaPage  DataPageDropRateSchemaPageType = "int"
	NullDataPageDropRateSchemaPage DataPageDropRateSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageDropRateSchemaPage is int.
func (s DataPageDropRateSchemaPage) IsInt() bool { return s.Type == IntDataPageDropRateSchemaPage }

// IsNull reports whether DataPageDropRateSchemaPage is struct{}.
func (s DataPageDropRateSchemaPage) IsNull() bool { return s.Type == NullDataPageDropRateSchemaPage }

// SetInt sets DataPageDropRateSchemaPage to int.
func (s *DataPageDropRateSchemaPage) SetInt(v int) {
	s.Type = IntDataPageDropRateSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageDropRateSchemaPage is int.
func (s DataPageDropRateSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageDropRateSchemaPage returns new DataPageDropRateSchemaPage from int.
func NewIntDataPageDropRateSchemaPage(v int) DataPageDropRateSchemaPage {
	var s DataPageDropRateSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageDropRateSchemaPage to struct{}.
func (s *DataPageDropRateSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageDropRateSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageDropRateSchemaPage is struct{}.
func (s DataPageDropRateSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageDropRateSchemaPage returns new DataPageDropRateSchemaPage from struct{}.
func NewNullDataPageDropRateSchemaPage(v struct{}) DataPageDropRateSchemaPage {
	var s DataPageDropRateSchemaPage
	s.SetNull(v)
	return s
}

// DataPageDropRateSchemaPages represents sum type.
type DataPageDropRateSchemaPages struct {
	Type DataPageDropRateSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageDropRateSchemaPagesType is oneOf type of DataPageDropRateSchemaPages.
type DataPageDropRateSchemaPagesType string

// Possible values for DataPageDropRateSchemaPagesType.
const (
	IntDataPageDropRateSchemaPages  DataPageDropRateSchemaPagesType = "int"
	NullDataPageDropRateSchemaPages DataPageDropRateSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageDropRateSchemaPages is int.
func (s DataPageDropRateSchemaPages) IsInt() bool { return s.Type == IntDataPageDropRateSchemaPages }

// IsNull reports whether DataPageDropRateSchemaPages is struct{}.
func (s DataPageDropRateSchemaPages) IsNull() bool { return s.Type == NullDataPageDropRateSchemaPages }

// SetInt sets DataPageDropRateSchemaPages to int.
func (s *DataPageDropRateSchemaPages) SetInt(v int) {
	s.Type = IntDataPageDropRateSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageDropRateSchemaPages is int.
func (s DataPageDropRateSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageDropRateSchemaPages returns new DataPageDropRateSchemaPages from int.
func NewIntDataPageDropRateSchemaPages(v int) DataPageDropRateSchemaPages {
	var s DataPageDropRateSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageDropRateSchemaPages to struct{}.
func (s *DataPageDropRateSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageDropRateSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageDropRateSchemaPages is struct{}.
func (s DataPageDropRateSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageDropRateSchemaPages returns new DataPageDropRateSchemaPages from struct{}.
func NewNullDataPageDropRateSchemaPages(v struct{}) DataPageDropRateSchemaPages {
	var s DataPageDropRateSchemaPages
	s.SetNull(v)
	return s
}

// DataPageDropRateSchemaSize represents sum type.
type DataPageDropRateSchemaSize struct {
	Type DataPageDropRateSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageDropRateSchemaSizeType is oneOf type of DataPageDropRateSchemaSize.
type DataPageDropRateSchemaSizeType string

// Possible values for DataPageDropRateSchemaSizeType.
const (
	IntDataPageDropRateSchemaSize  DataPageDropRateSchemaSizeType = "int"
	NullDataPageDropRateSchemaSize DataPageDropRateSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageDropRateSchemaSize is int.
func (s DataPageDropRateSchemaSize) IsInt() bool { return s.Type == IntDataPageDropRateSchemaSize }

// IsNull reports whether DataPageDropRateSchemaSize is struct{}.
func (s DataPageDropRateSchemaSize) IsNull() bool { return s.Type == NullDataPageDropRateSchemaSize }

// SetInt sets DataPageDropRateSchemaSize to int.
func (s *DataPageDropRateSchemaSize) SetInt(v int) {
	s.Type = IntDataPageDropRateSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageDropRateSchemaSize is int.
func (s DataPageDropRateSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageDropRateSchemaSize returns new DataPageDropRateSchemaSize from int.
func NewIntDataPageDropRateSchemaSize(v int) DataPageDropRateSchemaSize {
	var s DataPageDropRateSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageDropRateSchemaSize to struct{}.
func (s *DataPageDropRateSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageDropRateSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageDropRateSchemaSize is struct{}.
func (s DataPageDropRateSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageDropRateSchemaSize returns new DataPageDropRateSchemaSize from struct{}.
func NewNullDataPageDropRateSchemaSize(v struct{}) DataPageDropRateSchemaSize {
	var s DataPageDropRateSchemaSize
	s.SetNull(v)
	return s
}

// DataPageDropRateSchemaTotal represents sum type.
type DataPageDropRateSchemaTotal struct {
	Type DataPageDropRateSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageDropRateSchemaTotalType is oneOf type of DataPageDropRateSchemaTotal.
type DataPageDropRateSchemaTotalType string

// Possible values for DataPageDropRateSchemaTotalType.
const (
	IntDataPageDropRateSchemaTotal  DataPageDropRateSchemaTotalType = "int"
	NullDataPageDropRateSchemaTotal DataPageDropRateSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageDropRateSchemaTotal is int.
func (s DataPageDropRateSchemaTotal) IsInt() bool { return s.Type == IntDataPageDropRateSchemaTotal }

// IsNull reports whether DataPageDropRateSchemaTotal is struct{}.
func (s DataPageDropRateSchemaTotal) IsNull() bool { return s.Type == NullDataPageDropRateSchemaTotal }

// SetInt sets DataPageDropRateSchemaTotal to int.
func (s *DataPageDropRateSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageDropRateSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageDropRateSchemaTotal is int.
func (s DataPageDropRateSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageDropRateSchemaTotal returns new DataPageDropRateSchemaTotal from int.
func NewIntDataPageDropRateSchemaTotal(v int) DataPageDropRateSchemaTotal {
	var s DataPageDropRateSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageDropRateSchemaTotal to struct{}.
func (s *DataPageDropRateSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageDropRateSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageDropRateSchemaTotal is struct{}.
func (s DataPageDropRateSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageDropRateSchemaTotal returns new DataPageDropRateSchemaTotal from struct{}.
func NewNullDataPageDropRateSchemaTotal(v struct{}) DataPageDropRateSchemaTotal {
	var s DataPageDropRateSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_EventSchema_
type DataPageEventSchema struct {
	Data  []EventSchema               `json:"data"`
	Total DataPageEventSchemaTotal    `json:"total"`
	Page  DataPageEventSchemaPage     `json:"page"`
	Size  DataPageEventSchemaSize     `json:"size"`
	Pages OptDataPageEventSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageEventSchema) GetData() []EventSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageEventSchema) GetTotal() DataPageEventSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageEventSchema) GetPage() DataPageEventSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageEventSchema) GetSize() DataPageEventSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageEventSchema) GetPages() OptDataPageEventSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageEventSchema) SetData(val []EventSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageEventSchema) SetTotal(val DataPageEventSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageEventSchema) SetPage(val DataPageEventSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageEventSchema) SetSize(val DataPageEventSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageEventSchema) SetPages(val OptDataPageEventSchemaPages) {
	s.Pages = val
}

// DataPageEventSchemaPage represents sum type.
type DataPageEventSchemaPage struct {
	Type DataPageEventSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageEventSchemaPageType is oneOf type of DataPageEventSchemaPage.
type DataPageEventSchemaPageType string

// Possible values for DataPageEventSchemaPageType.
const (
	IntDataPageEventSchemaPage  DataPageEventSchemaPageType = "int"
	NullDataPageEventSchemaPage DataPageEventSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageEventSchemaPage is int.
func (s DataPageEventSchemaPage) IsInt() bool { return s.Type == IntDataPageEventSchemaPage }

// IsNull reports whether DataPageEventSchemaPage is struct{}.
func (s DataPageEventSchemaPage) IsNull() bool { return s.Type == NullDataPageEventSchemaPage }

// SetInt sets DataPageEventSchemaPage to int.
func (s *DataPageEventSchemaPage) SetInt(v int) {
	s.Type = IntDataPageEventSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageEventSchemaPage is int.
func (s DataPageEventSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageEventSchemaPage returns new DataPageEventSchemaPage from int.
func NewIntDataPageEventSchemaPage(v int) DataPageEventSchemaPage {
	var s DataPageEventSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageEventSchemaPage to struct{}.
func (s *DataPageEventSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageEventSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageEventSchemaPage is struct{}.
func (s DataPageEventSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageEventSchemaPage returns new DataPageEventSchemaPage from struct{}.
func NewNullDataPageEventSchemaPage(v struct{}) DataPageEventSchemaPage {
	var s DataPageEventSchemaPage
	s.SetNull(v)
	return s
}

// DataPageEventSchemaPages represents sum type.
type DataPageEventSchemaPages struct {
	Type DataPageEventSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageEventSchemaPagesType is oneOf type of DataPageEventSchemaPages.
type DataPageEventSchemaPagesType string

// Possible values for DataPageEventSchemaPagesType.
const (
	IntDataPageEventSchemaPages  DataPageEventSchemaPagesType = "int"
	NullDataPageEventSchemaPages DataPageEventSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageEventSchemaPages is int.
func (s DataPageEventSchemaPages) IsInt() bool { return s.Type == IntDataPageEventSchemaPages }

// IsNull reports whether DataPageEventSchemaPages is struct{}.
func (s DataPageEventSchemaPages) IsNull() bool { return s.Type == NullDataPageEventSchemaPages }

// SetInt sets DataPageEventSchemaPages to int.
func (s *DataPageEventSchemaPages) SetInt(v int) {
	s.Type = IntDataPageEventSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageEventSchemaPages is int.
func (s DataPageEventSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageEventSchemaPages returns new DataPageEventSchemaPages from int.
func NewIntDataPageEventSchemaPages(v int) DataPageEventSchemaPages {
	var s DataPageEventSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageEventSchemaPages to struct{}.
func (s *DataPageEventSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageEventSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageEventSchemaPages is struct{}.
func (s DataPageEventSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageEventSchemaPages returns new DataPageEventSchemaPages from struct{}.
func NewNullDataPageEventSchemaPages(v struct{}) DataPageEventSchemaPages {
	var s DataPageEventSchemaPages
	s.SetNull(v)
	return s
}

// DataPageEventSchemaSize represents sum type.
type DataPageEventSchemaSize struct {
	Type DataPageEventSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageEventSchemaSizeType is oneOf type of DataPageEventSchemaSize.
type DataPageEventSchemaSizeType string

// Possible values for DataPageEventSchemaSizeType.
const (
	IntDataPageEventSchemaSize  DataPageEventSchemaSizeType = "int"
	NullDataPageEventSchemaSize DataPageEventSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageEventSchemaSize is int.
func (s DataPageEventSchemaSize) IsInt() bool { return s.Type == IntDataPageEventSchemaSize }

// IsNull reports whether DataPageEventSchemaSize is struct{}.
func (s DataPageEventSchemaSize) IsNull() bool { return s.Type == NullDataPageEventSchemaSize }

// SetInt sets DataPageEventSchemaSize to int.
func (s *DataPageEventSchemaSize) SetInt(v int) {
	s.Type = IntDataPageEventSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageEventSchemaSize is int.
func (s DataPageEventSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageEventSchemaSize returns new DataPageEventSchemaSize from int.
func NewIntDataPageEventSchemaSize(v int) DataPageEventSchemaSize {
	var s DataPageEventSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageEventSchemaSize to struct{}.
func (s *DataPageEventSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageEventSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageEventSchemaSize is struct{}.
func (s DataPageEventSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageEventSchemaSize returns new DataPageEventSchemaSize from struct{}.
func NewNullDataPageEventSchemaSize(v struct{}) DataPageEventSchemaSize {
	var s DataPageEventSchemaSize
	s.SetNull(v)
	return s
}

// DataPageEventSchemaTotal represents sum type.
type DataPageEventSchemaTotal struct {
	Type DataPageEventSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageEventSchemaTotalType is oneOf type of DataPageEventSchemaTotal.
type DataPageEventSchemaTotalType string

// Possible values for DataPageEventSchemaTotalType.
const (
	IntDataPageEventSchemaTotal  DataPageEventSchemaTotalType = "int"
	NullDataPageEventSchemaTotal DataPageEventSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageEventSchemaTotal is int.
func (s DataPageEventSchemaTotal) IsInt() bool { return s.Type == IntDataPageEventSchemaTotal }

// IsNull reports whether DataPageEventSchemaTotal is struct{}.
func (s DataPageEventSchemaTotal) IsNull() bool { return s.Type == NullDataPageEventSchemaTotal }

// SetInt sets DataPageEventSchemaTotal to int.
func (s *DataPageEventSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageEventSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageEventSchemaTotal is int.
func (s DataPageEventSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageEventSchemaTotal returns new DataPageEventSchemaTotal from int.
func NewIntDataPageEventSchemaTotal(v int) DataPageEventSchemaTotal {
	var s DataPageEventSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageEventSchemaTotal to struct{}.
func (s *DataPageEventSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageEventSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageEventSchemaTotal is struct{}.
func (s DataPageEventSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageEventSchemaTotal returns new DataPageEventSchemaTotal from struct{}.
func NewNullDataPageEventSchemaTotal(v struct{}) DataPageEventSchemaTotal {
	var s DataPageEventSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_GEOrderSchema_
type DataPageGEOrderSchema struct {
	Data  []GEOrderSchema               `json:"data"`
	Total DataPageGEOrderSchemaTotal    `json:"total"`
	Page  DataPageGEOrderSchemaPage     `json:"page"`
	Size  DataPageGEOrderSchemaSize     `json:"size"`
	Pages OptDataPageGEOrderSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageGEOrderSchema) GetData() []GEOrderSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageGEOrderSchema) GetTotal() DataPageGEOrderSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageGEOrderSchema) GetPage() DataPageGEOrderSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageGEOrderSchema) GetSize() DataPageGEOrderSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageGEOrderSchema) GetPages() OptDataPageGEOrderSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageGEOrderSchema) SetData(val []GEOrderSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageGEOrderSchema) SetTotal(val DataPageGEOrderSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageGEOrderSchema) SetPage(val DataPageGEOrderSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageGEOrderSchema) SetSize(val DataPageGEOrderSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageGEOrderSchema) SetPages(val OptDataPageGEOrderSchemaPages) {
	s.Pages = val
}

// DataPageGEOrderSchemaPage represents sum type.
type DataPageGEOrderSchemaPage struct {
	Type DataPageGEOrderSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGEOrderSchemaPageType is oneOf type of DataPageGEOrderSchemaPage.
type DataPageGEOrderSchemaPageType string

// Possible values for DataPageGEOrderSchemaPageType.
const (
	IntDataPageGEOrderSchemaPage  DataPageGEOrderSchemaPageType = "int"
	NullDataPageGEOrderSchemaPage DataPageGEOrderSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageGEOrderSchemaPage is int.
func (s DataPageGEOrderSchemaPage) IsInt() bool { return s.Type == IntDataPageGEOrderSchemaPage }

// IsNull reports whether DataPageGEOrderSchemaPage is struct{}.
func (s DataPageGEOrderSchemaPage) IsNull() bool { return s.Type == NullDataPageGEOrderSchemaPage }

// SetInt sets DataPageGEOrderSchemaPage to int.
func (s *DataPageGEOrderSchemaPage) SetInt(v int) {
	s.Type = IntDataPageGEOrderSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGEOrderSchemaPage is int.
func (s DataPageGEOrderSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGEOrderSchemaPage returns new DataPageGEOrderSchemaPage from int.
func NewIntDataPageGEOrderSchemaPage(v int) DataPageGEOrderSchemaPage {
	var s DataPageGEOrderSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGEOrderSchemaPage to struct{}.
func (s *DataPageGEOrderSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageGEOrderSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGEOrderSchemaPage is struct{}.
func (s DataPageGEOrderSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGEOrderSchemaPage returns new DataPageGEOrderSchemaPage from struct{}.
func NewNullDataPageGEOrderSchemaPage(v struct{}) DataPageGEOrderSchemaPage {
	var s DataPageGEOrderSchemaPage
	s.SetNull(v)
	return s
}

// DataPageGEOrderSchemaPages represents sum type.
type DataPageGEOrderSchemaPages struct {
	Type DataPageGEOrderSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGEOrderSchemaPagesType is oneOf type of DataPageGEOrderSchemaPages.
type DataPageGEOrderSchemaPagesType string

// Possible values for DataPageGEOrderSchemaPagesType.
const (
	IntDataPageGEOrderSchemaPages  DataPageGEOrderSchemaPagesType = "int"
	NullDataPageGEOrderSchemaPages DataPageGEOrderSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageGEOrderSchemaPages is int.
func (s DataPageGEOrderSchemaPages) IsInt() bool { return s.Type == IntDataPageGEOrderSchemaPages }

// IsNull reports whether DataPageGEOrderSchemaPages is struct{}.
func (s DataPageGEOrderSchemaPages) IsNull() bool { return s.Type == NullDataPageGEOrderSchemaPages }

// SetInt sets DataPageGEOrderSchemaPages to int.
func (s *DataPageGEOrderSchemaPages) SetInt(v int) {
	s.Type = IntDataPageGEOrderSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGEOrderSchemaPages is int.
func (s DataPageGEOrderSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGEOrderSchemaPages returns new DataPageGEOrderSchemaPages from int.
func NewIntDataPageGEOrderSchemaPages(v int) DataPageGEOrderSchemaPages {
	var s DataPageGEOrderSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGEOrderSchemaPages to struct{}.
func (s *DataPageGEOrderSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageGEOrderSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGEOrderSchemaPages is struct{}.
func (s DataPageGEOrderSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGEOrderSchemaPages returns new DataPageGEOrderSchemaPages from struct{}.
func NewNullDataPageGEOrderSchemaPages(v struct{}) DataPageGEOrderSchemaPages {
	var s DataPageGEOrderSchemaPages
	s.SetNull(v)
	return s
}

// DataPageGEOrderSchemaSize represents sum type.
type DataPageGEOrderSchemaSize struct {
	Type DataPageGEOrderSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGEOrderSchemaSizeType is oneOf type of DataPageGEOrderSchemaSize.
type DataPageGEOrderSchemaSizeType string

// Possible values for DataPageGEOrderSchemaSizeType.
const (
	IntDataPageGEOrderSchemaSize  DataPageGEOrderSchemaSizeType = "int"
	NullDataPageGEOrderSchemaSize DataPageGEOrderSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageGEOrderSchemaSize is int.
func (s DataPageGEOrderSchemaSize) IsInt() bool { return s.Type == IntDataPageGEOrderSchemaSize }

// IsNull reports whether DataPageGEOrderSchemaSize is struct{}.
func (s DataPageGEOrderSchemaSize) IsNull() bool { return s.Type == NullDataPageGEOrderSchemaSize }

// SetInt sets DataPageGEOrderSchemaSize to int.
func (s *DataPageGEOrderSchemaSize) SetInt(v int) {
	s.Type = IntDataPageGEOrderSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGEOrderSchemaSize is int.
func (s DataPageGEOrderSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGEOrderSchemaSize returns new DataPageGEOrderSchemaSize from int.
func NewIntDataPageGEOrderSchemaSize(v int) DataPageGEOrderSchemaSize {
	var s DataPageGEOrderSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGEOrderSchemaSize to struct{}.
func (s *DataPageGEOrderSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageGEOrderSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGEOrderSchemaSize is struct{}.
func (s DataPageGEOrderSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGEOrderSchemaSize returns new DataPageGEOrderSchemaSize from struct{}.
func NewNullDataPageGEOrderSchemaSize(v struct{}) DataPageGEOrderSchemaSize {
	var s DataPageGEOrderSchemaSize
	s.SetNull(v)
	return s
}

// DataPageGEOrderSchemaTotal represents sum type.
type DataPageGEOrderSchemaTotal struct {
	Type DataPageGEOrderSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGEOrderSchemaTotalType is oneOf type of DataPageGEOrderSchemaTotal.
type DataPageGEOrderSchemaTotalType string

// Possible values for DataPageGEOrderSchemaTotalType.
const (
	IntDataPageGEOrderSchemaTotal  DataPageGEOrderSchemaTotalType = "int"
	NullDataPageGEOrderSchemaTotal DataPageGEOrderSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageGEOrderSchemaTotal is int.
func (s DataPageGEOrderSchemaTotal) IsInt() bool { return s.Type == IntDataPageGEOrderSchemaTotal }

// IsNull reports whether DataPageGEOrderSchemaTotal is struct{}.
func (s DataPageGEOrderSchemaTotal) IsNull() bool { return s.Type == NullDataPageGEOrderSchemaTotal }

// SetInt sets DataPageGEOrderSchemaTotal to int.
func (s *DataPageGEOrderSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageGEOrderSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGEOrderSchemaTotal is int.
func (s DataPageGEOrderSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGEOrderSchemaTotal returns new DataPageGEOrderSchemaTotal from int.
func NewIntDataPageGEOrderSchemaTotal(v int) DataPageGEOrderSchemaTotal {
	var s DataPageGEOrderSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGEOrderSchemaTotal to struct{}.
func (s *DataPageGEOrderSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageGEOrderSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGEOrderSchemaTotal is struct{}.
func (s DataPageGEOrderSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGEOrderSchemaTotal returns new DataPageGEOrderSchemaTotal from struct{}.
func NewNullDataPageGEOrderSchemaTotal(v struct{}) DataPageGEOrderSchemaTotal {
	var s DataPageGEOrderSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_GeOrderHistorySchema_
type DataPageGeOrderHistorySchema struct {
	Data  []GeOrderHistorySchema               `json:"data"`
	Total DataPageGeOrderHistorySchemaTotal    `json:"total"`
	Page  DataPageGeOrderHistorySchemaPage     `json:"page"`
	Size  DataPageGeOrderHistorySchemaSize     `json:"size"`
	Pages OptDataPageGeOrderHistorySchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageGeOrderHistorySchema) GetData() []GeOrderHistorySchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageGeOrderHistorySchema) GetTotal() DataPageGeOrderHistorySchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageGeOrderHistorySchema) GetPage() DataPageGeOrderHistorySchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageGeOrderHistorySchema) GetSize() DataPageGeOrderHistorySchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageGeOrderHistorySchema) GetPages() OptDataPageGeOrderHistorySchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageGeOrderHistorySchema) SetData(val []GeOrderHistorySchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageGeOrderHistorySchema) SetTotal(val DataPageGeOrderHistorySchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageGeOrderHistorySchema) SetPage(val DataPageGeOrderHistorySchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageGeOrderHistorySchema) SetSize(val DataPageGeOrderHistorySchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageGeOrderHistorySchema) SetPages(val OptDataPageGeOrderHistorySchemaPages) {
	s.Pages = val
}

func (*DataPageGeOrderHistorySchema) getGeSellHistoryGrandexchangeHistoryCodeGetRes() {}

// DataPageGeOrderHistorySchemaPage represents sum type.
type DataPageGeOrderHistorySchemaPage struct {
	Type DataPageGeOrderHistorySchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGeOrderHistorySchemaPageType is oneOf type of DataPageGeOrderHistorySchemaPage.
type DataPageGeOrderHistorySchemaPageType string

// Possible values for DataPageGeOrderHistorySchemaPageType.
const (
	IntDataPageGeOrderHistorySchemaPage  DataPageGeOrderHistorySchemaPageType = "int"
	NullDataPageGeOrderHistorySchemaPage DataPageGeOrderHistorySchemaPageType = "struct{}"
)

// IsInt reports whether DataPageGeOrderHistorySchemaPage is int.
func (s DataPageGeOrderHistorySchemaPage) IsInt() bool {
	return s.Type == IntDataPageGeOrderHistorySchemaPage
}

// IsNull reports whether DataPageGeOrderHistorySchemaPage is struct{}.
func (s DataPageGeOrderHistorySchemaPage) IsNull() bool {
	return s.Type == NullDataPageGeOrderHistorySchemaPage
}

// SetInt sets DataPageGeOrderHistorySchemaPage to int.
func (s *DataPageGeOrderHistorySchemaPage) SetInt(v int) {
	s.Type = IntDataPageGeOrderHistorySchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGeOrderHistorySchemaPage is int.
func (s DataPageGeOrderHistorySchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGeOrderHistorySchemaPage returns new DataPageGeOrderHistorySchemaPage from int.
func NewIntDataPageGeOrderHistorySchemaPage(v int) DataPageGeOrderHistorySchemaPage {
	var s DataPageGeOrderHistorySchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGeOrderHistorySchemaPage to struct{}.
func (s *DataPageGeOrderHistorySchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageGeOrderHistorySchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGeOrderHistorySchemaPage is struct{}.
func (s DataPageGeOrderHistorySchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGeOrderHistorySchemaPage returns new DataPageGeOrderHistorySchemaPage from struct{}.
func NewNullDataPageGeOrderHistorySchemaPage(v struct{}) DataPageGeOrderHistorySchemaPage {
	var s DataPageGeOrderHistorySchemaPage
	s.SetNull(v)
	return s
}

// DataPageGeOrderHistorySchemaPages represents sum type.
type DataPageGeOrderHistorySchemaPages struct {
	Type DataPageGeOrderHistorySchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGeOrderHistorySchemaPagesType is oneOf type of DataPageGeOrderHistorySchemaPages.
type DataPageGeOrderHistorySchemaPagesType string

// Possible values for DataPageGeOrderHistorySchemaPagesType.
const (
	IntDataPageGeOrderHistorySchemaPages  DataPageGeOrderHistorySchemaPagesType = "int"
	NullDataPageGeOrderHistorySchemaPages DataPageGeOrderHistorySchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageGeOrderHistorySchemaPages is int.
func (s DataPageGeOrderHistorySchemaPages) IsInt() bool {
	return s.Type == IntDataPageGeOrderHistorySchemaPages
}

// IsNull reports whether DataPageGeOrderHistorySchemaPages is struct{}.
func (s DataPageGeOrderHistorySchemaPages) IsNull() bool {
	return s.Type == NullDataPageGeOrderHistorySchemaPages
}

// SetInt sets DataPageGeOrderHistorySchemaPages to int.
func (s *DataPageGeOrderHistorySchemaPages) SetInt(v int) {
	s.Type = IntDataPageGeOrderHistorySchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGeOrderHistorySchemaPages is int.
func (s DataPageGeOrderHistorySchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGeOrderHistorySchemaPages returns new DataPageGeOrderHistorySchemaPages from int.
func NewIntDataPageGeOrderHistorySchemaPages(v int) DataPageGeOrderHistorySchemaPages {
	var s DataPageGeOrderHistorySchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGeOrderHistorySchemaPages to struct{}.
func (s *DataPageGeOrderHistorySchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageGeOrderHistorySchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGeOrderHistorySchemaPages is struct{}.
func (s DataPageGeOrderHistorySchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGeOrderHistorySchemaPages returns new DataPageGeOrderHistorySchemaPages from struct{}.
func NewNullDataPageGeOrderHistorySchemaPages(v struct{}) DataPageGeOrderHistorySchemaPages {
	var s DataPageGeOrderHistorySchemaPages
	s.SetNull(v)
	return s
}

// DataPageGeOrderHistorySchemaSize represents sum type.
type DataPageGeOrderHistorySchemaSize struct {
	Type DataPageGeOrderHistorySchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGeOrderHistorySchemaSizeType is oneOf type of DataPageGeOrderHistorySchemaSize.
type DataPageGeOrderHistorySchemaSizeType string

// Possible values for DataPageGeOrderHistorySchemaSizeType.
const (
	IntDataPageGeOrderHistorySchemaSize  DataPageGeOrderHistorySchemaSizeType = "int"
	NullDataPageGeOrderHistorySchemaSize DataPageGeOrderHistorySchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageGeOrderHistorySchemaSize is int.
func (s DataPageGeOrderHistorySchemaSize) IsInt() bool {
	return s.Type == IntDataPageGeOrderHistorySchemaSize
}

// IsNull reports whether DataPageGeOrderHistorySchemaSize is struct{}.
func (s DataPageGeOrderHistorySchemaSize) IsNull() bool {
	return s.Type == NullDataPageGeOrderHistorySchemaSize
}

// SetInt sets DataPageGeOrderHistorySchemaSize to int.
func (s *DataPageGeOrderHistorySchemaSize) SetInt(v int) {
	s.Type = IntDataPageGeOrderHistorySchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGeOrderHistorySchemaSize is int.
func (s DataPageGeOrderHistorySchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGeOrderHistorySchemaSize returns new DataPageGeOrderHistorySchemaSize from int.
func NewIntDataPageGeOrderHistorySchemaSize(v int) DataPageGeOrderHistorySchemaSize {
	var s DataPageGeOrderHistorySchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGeOrderHistorySchemaSize to struct{}.
func (s *DataPageGeOrderHistorySchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageGeOrderHistorySchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGeOrderHistorySchemaSize is struct{}.
func (s DataPageGeOrderHistorySchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGeOrderHistorySchemaSize returns new DataPageGeOrderHistorySchemaSize from struct{}.
func NewNullDataPageGeOrderHistorySchemaSize(v struct{}) DataPageGeOrderHistorySchemaSize {
	var s DataPageGeOrderHistorySchemaSize
	s.SetNull(v)
	return s
}

// DataPageGeOrderHistorySchemaTotal represents sum type.
type DataPageGeOrderHistorySchemaTotal struct {
	Type DataPageGeOrderHistorySchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageGeOrderHistorySchemaTotalType is oneOf type of DataPageGeOrderHistorySchemaTotal.
type DataPageGeOrderHistorySchemaTotalType string

// Possible values for DataPageGeOrderHistorySchemaTotalType.
const (
	IntDataPageGeOrderHistorySchemaTotal  DataPageGeOrderHistorySchemaTotalType = "int"
	NullDataPageGeOrderHistorySchemaTotal DataPageGeOrderHistorySchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageGeOrderHistorySchemaTotal is int.
func (s DataPageGeOrderHistorySchemaTotal) IsInt() bool {
	return s.Type == IntDataPageGeOrderHistorySchemaTotal
}

// IsNull reports whether DataPageGeOrderHistorySchemaTotal is struct{}.
func (s DataPageGeOrderHistorySchemaTotal) IsNull() bool {
	return s.Type == NullDataPageGeOrderHistorySchemaTotal
}

// SetInt sets DataPageGeOrderHistorySchemaTotal to int.
func (s *DataPageGeOrderHistorySchemaTotal) SetInt(v int) {
	s.Type = IntDataPageGeOrderHistorySchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageGeOrderHistorySchemaTotal is int.
func (s DataPageGeOrderHistorySchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageGeOrderHistorySchemaTotal returns new DataPageGeOrderHistorySchemaTotal from int.
func NewIntDataPageGeOrderHistorySchemaTotal(v int) DataPageGeOrderHistorySchemaTotal {
	var s DataPageGeOrderHistorySchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageGeOrderHistorySchemaTotal to struct{}.
func (s *DataPageGeOrderHistorySchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageGeOrderHistorySchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageGeOrderHistorySchemaTotal is struct{}.
func (s DataPageGeOrderHistorySchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageGeOrderHistorySchemaTotal returns new DataPageGeOrderHistorySchemaTotal from struct{}.
func NewNullDataPageGeOrderHistorySchemaTotal(v struct{}) DataPageGeOrderHistorySchemaTotal {
	var s DataPageGeOrderHistorySchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_ItemSchema_
type DataPageItemSchema struct {
	Data  []ItemSchema               `json:"data"`
	Total DataPageItemSchemaTotal    `json:"total"`
	Page  DataPageItemSchemaPage     `json:"page"`
	Size  DataPageItemSchemaSize     `json:"size"`
	Pages OptDataPageItemSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageItemSchema) GetData() []ItemSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageItemSchema) GetTotal() DataPageItemSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageItemSchema) GetPage() DataPageItemSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageItemSchema) GetSize() DataPageItemSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageItemSchema) GetPages() OptDataPageItemSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageItemSchema) SetData(val []ItemSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageItemSchema) SetTotal(val DataPageItemSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageItemSchema) SetPage(val DataPageItemSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageItemSchema) SetSize(val DataPageItemSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageItemSchema) SetPages(val OptDataPageItemSchemaPages) {
	s.Pages = val
}

// DataPageItemSchemaPage represents sum type.
type DataPageItemSchemaPage struct {
	Type DataPageItemSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageItemSchemaPageType is oneOf type of DataPageItemSchemaPage.
type DataPageItemSchemaPageType string

// Possible values for DataPageItemSchemaPageType.
const (
	IntDataPageItemSchemaPage  DataPageItemSchemaPageType = "int"
	NullDataPageItemSchemaPage DataPageItemSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageItemSchemaPage is int.
func (s DataPageItemSchemaPage) IsInt() bool { return s.Type == IntDataPageItemSchemaPage }

// IsNull reports whether DataPageItemSchemaPage is struct{}.
func (s DataPageItemSchemaPage) IsNull() bool { return s.Type == NullDataPageItemSchemaPage }

// SetInt sets DataPageItemSchemaPage to int.
func (s *DataPageItemSchemaPage) SetInt(v int) {
	s.Type = IntDataPageItemSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageItemSchemaPage is int.
func (s DataPageItemSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageItemSchemaPage returns new DataPageItemSchemaPage from int.
func NewIntDataPageItemSchemaPage(v int) DataPageItemSchemaPage {
	var s DataPageItemSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageItemSchemaPage to struct{}.
func (s *DataPageItemSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageItemSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageItemSchemaPage is struct{}.
func (s DataPageItemSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageItemSchemaPage returns new DataPageItemSchemaPage from struct{}.
func NewNullDataPageItemSchemaPage(v struct{}) DataPageItemSchemaPage {
	var s DataPageItemSchemaPage
	s.SetNull(v)
	return s
}

// DataPageItemSchemaPages represents sum type.
type DataPageItemSchemaPages struct {
	Type DataPageItemSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageItemSchemaPagesType is oneOf type of DataPageItemSchemaPages.
type DataPageItemSchemaPagesType string

// Possible values for DataPageItemSchemaPagesType.
const (
	IntDataPageItemSchemaPages  DataPageItemSchemaPagesType = "int"
	NullDataPageItemSchemaPages DataPageItemSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageItemSchemaPages is int.
func (s DataPageItemSchemaPages) IsInt() bool { return s.Type == IntDataPageItemSchemaPages }

// IsNull reports whether DataPageItemSchemaPages is struct{}.
func (s DataPageItemSchemaPages) IsNull() bool { return s.Type == NullDataPageItemSchemaPages }

// SetInt sets DataPageItemSchemaPages to int.
func (s *DataPageItemSchemaPages) SetInt(v int) {
	s.Type = IntDataPageItemSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageItemSchemaPages is int.
func (s DataPageItemSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageItemSchemaPages returns new DataPageItemSchemaPages from int.
func NewIntDataPageItemSchemaPages(v int) DataPageItemSchemaPages {
	var s DataPageItemSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageItemSchemaPages to struct{}.
func (s *DataPageItemSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageItemSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageItemSchemaPages is struct{}.
func (s DataPageItemSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageItemSchemaPages returns new DataPageItemSchemaPages from struct{}.
func NewNullDataPageItemSchemaPages(v struct{}) DataPageItemSchemaPages {
	var s DataPageItemSchemaPages
	s.SetNull(v)
	return s
}

// DataPageItemSchemaSize represents sum type.
type DataPageItemSchemaSize struct {
	Type DataPageItemSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageItemSchemaSizeType is oneOf type of DataPageItemSchemaSize.
type DataPageItemSchemaSizeType string

// Possible values for DataPageItemSchemaSizeType.
const (
	IntDataPageItemSchemaSize  DataPageItemSchemaSizeType = "int"
	NullDataPageItemSchemaSize DataPageItemSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageItemSchemaSize is int.
func (s DataPageItemSchemaSize) IsInt() bool { return s.Type == IntDataPageItemSchemaSize }

// IsNull reports whether DataPageItemSchemaSize is struct{}.
func (s DataPageItemSchemaSize) IsNull() bool { return s.Type == NullDataPageItemSchemaSize }

// SetInt sets DataPageItemSchemaSize to int.
func (s *DataPageItemSchemaSize) SetInt(v int) {
	s.Type = IntDataPageItemSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageItemSchemaSize is int.
func (s DataPageItemSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageItemSchemaSize returns new DataPageItemSchemaSize from int.
func NewIntDataPageItemSchemaSize(v int) DataPageItemSchemaSize {
	var s DataPageItemSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageItemSchemaSize to struct{}.
func (s *DataPageItemSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageItemSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageItemSchemaSize is struct{}.
func (s DataPageItemSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageItemSchemaSize returns new DataPageItemSchemaSize from struct{}.
func NewNullDataPageItemSchemaSize(v struct{}) DataPageItemSchemaSize {
	var s DataPageItemSchemaSize
	s.SetNull(v)
	return s
}

// DataPageItemSchemaTotal represents sum type.
type DataPageItemSchemaTotal struct {
	Type DataPageItemSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageItemSchemaTotalType is oneOf type of DataPageItemSchemaTotal.
type DataPageItemSchemaTotalType string

// Possible values for DataPageItemSchemaTotalType.
const (
	IntDataPageItemSchemaTotal  DataPageItemSchemaTotalType = "int"
	NullDataPageItemSchemaTotal DataPageItemSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageItemSchemaTotal is int.
func (s DataPageItemSchemaTotal) IsInt() bool { return s.Type == IntDataPageItemSchemaTotal }

// IsNull reports whether DataPageItemSchemaTotal is struct{}.
func (s DataPageItemSchemaTotal) IsNull() bool { return s.Type == NullDataPageItemSchemaTotal }

// SetInt sets DataPageItemSchemaTotal to int.
func (s *DataPageItemSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageItemSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageItemSchemaTotal is int.
func (s DataPageItemSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageItemSchemaTotal returns new DataPageItemSchemaTotal from int.
func NewIntDataPageItemSchemaTotal(v int) DataPageItemSchemaTotal {
	var s DataPageItemSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageItemSchemaTotal to struct{}.
func (s *DataPageItemSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageItemSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageItemSchemaTotal is struct{}.
func (s DataPageItemSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageItemSchemaTotal returns new DataPageItemSchemaTotal from struct{}.
func NewNullDataPageItemSchemaTotal(v struct{}) DataPageItemSchemaTotal {
	var s DataPageItemSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_LogSchema_
type DataPageLogSchema struct {
	Data  []LogSchema               `json:"data"`
	Total DataPageLogSchemaTotal    `json:"total"`
	Page  DataPageLogSchemaPage     `json:"page"`
	Size  DataPageLogSchemaSize     `json:"size"`
	Pages OptDataPageLogSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageLogSchema) GetData() []LogSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageLogSchema) GetTotal() DataPageLogSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageLogSchema) GetPage() DataPageLogSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageLogSchema) GetSize() DataPageLogSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageLogSchema) GetPages() OptDataPageLogSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageLogSchema) SetData(val []LogSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageLogSchema) SetTotal(val DataPageLogSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageLogSchema) SetPage(val DataPageLogSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageLogSchema) SetSize(val DataPageLogSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageLogSchema) SetPages(val OptDataPageLogSchemaPages) {
	s.Pages = val
}

func (*DataPageLogSchema) getAllCharactersLogsMyLogsGetRes() {}

// DataPageLogSchemaPage represents sum type.
type DataPageLogSchemaPage struct {
	Type DataPageLogSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageLogSchemaPageType is oneOf type of DataPageLogSchemaPage.
type DataPageLogSchemaPageType string

// Possible values for DataPageLogSchemaPageType.
const (
	IntDataPageLogSchemaPage  DataPageLogSchemaPageType = "int"
	NullDataPageLogSchemaPage DataPageLogSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageLogSchemaPage is int.
func (s DataPageLogSchemaPage) IsInt() bool { return s.Type == IntDataPageLogSchemaPage }

// IsNull reports whether DataPageLogSchemaPage is struct{}.
func (s DataPageLogSchemaPage) IsNull() bool { return s.Type == NullDataPageLogSchemaPage }

// SetInt sets DataPageLogSchemaPage to int.
func (s *DataPageLogSchemaPage) SetInt(v int) {
	s.Type = IntDataPageLogSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageLogSchemaPage is int.
func (s DataPageLogSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageLogSchemaPage returns new DataPageLogSchemaPage from int.
func NewIntDataPageLogSchemaPage(v int) DataPageLogSchemaPage {
	var s DataPageLogSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageLogSchemaPage to struct{}.
func (s *DataPageLogSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageLogSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageLogSchemaPage is struct{}.
func (s DataPageLogSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageLogSchemaPage returns new DataPageLogSchemaPage from struct{}.
func NewNullDataPageLogSchemaPage(v struct{}) DataPageLogSchemaPage {
	var s DataPageLogSchemaPage
	s.SetNull(v)
	return s
}

// DataPageLogSchemaPages represents sum type.
type DataPageLogSchemaPages struct {
	Type DataPageLogSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageLogSchemaPagesType is oneOf type of DataPageLogSchemaPages.
type DataPageLogSchemaPagesType string

// Possible values for DataPageLogSchemaPagesType.
const (
	IntDataPageLogSchemaPages  DataPageLogSchemaPagesType = "int"
	NullDataPageLogSchemaPages DataPageLogSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageLogSchemaPages is int.
func (s DataPageLogSchemaPages) IsInt() bool { return s.Type == IntDataPageLogSchemaPages }

// IsNull reports whether DataPageLogSchemaPages is struct{}.
func (s DataPageLogSchemaPages) IsNull() bool { return s.Type == NullDataPageLogSchemaPages }

// SetInt sets DataPageLogSchemaPages to int.
func (s *DataPageLogSchemaPages) SetInt(v int) {
	s.Type = IntDataPageLogSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageLogSchemaPages is int.
func (s DataPageLogSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageLogSchemaPages returns new DataPageLogSchemaPages from int.
func NewIntDataPageLogSchemaPages(v int) DataPageLogSchemaPages {
	var s DataPageLogSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageLogSchemaPages to struct{}.
func (s *DataPageLogSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageLogSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageLogSchemaPages is struct{}.
func (s DataPageLogSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageLogSchemaPages returns new DataPageLogSchemaPages from struct{}.
func NewNullDataPageLogSchemaPages(v struct{}) DataPageLogSchemaPages {
	var s DataPageLogSchemaPages
	s.SetNull(v)
	return s
}

// DataPageLogSchemaSize represents sum type.
type DataPageLogSchemaSize struct {
	Type DataPageLogSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageLogSchemaSizeType is oneOf type of DataPageLogSchemaSize.
type DataPageLogSchemaSizeType string

// Possible values for DataPageLogSchemaSizeType.
const (
	IntDataPageLogSchemaSize  DataPageLogSchemaSizeType = "int"
	NullDataPageLogSchemaSize DataPageLogSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageLogSchemaSize is int.
func (s DataPageLogSchemaSize) IsInt() bool { return s.Type == IntDataPageLogSchemaSize }

// IsNull reports whether DataPageLogSchemaSize is struct{}.
func (s DataPageLogSchemaSize) IsNull() bool { return s.Type == NullDataPageLogSchemaSize }

// SetInt sets DataPageLogSchemaSize to int.
func (s *DataPageLogSchemaSize) SetInt(v int) {
	s.Type = IntDataPageLogSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageLogSchemaSize is int.
func (s DataPageLogSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageLogSchemaSize returns new DataPageLogSchemaSize from int.
func NewIntDataPageLogSchemaSize(v int) DataPageLogSchemaSize {
	var s DataPageLogSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageLogSchemaSize to struct{}.
func (s *DataPageLogSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageLogSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageLogSchemaSize is struct{}.
func (s DataPageLogSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageLogSchemaSize returns new DataPageLogSchemaSize from struct{}.
func NewNullDataPageLogSchemaSize(v struct{}) DataPageLogSchemaSize {
	var s DataPageLogSchemaSize
	s.SetNull(v)
	return s
}

// DataPageLogSchemaTotal represents sum type.
type DataPageLogSchemaTotal struct {
	Type DataPageLogSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageLogSchemaTotalType is oneOf type of DataPageLogSchemaTotal.
type DataPageLogSchemaTotalType string

// Possible values for DataPageLogSchemaTotalType.
const (
	IntDataPageLogSchemaTotal  DataPageLogSchemaTotalType = "int"
	NullDataPageLogSchemaTotal DataPageLogSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageLogSchemaTotal is int.
func (s DataPageLogSchemaTotal) IsInt() bool { return s.Type == IntDataPageLogSchemaTotal }

// IsNull reports whether DataPageLogSchemaTotal is struct{}.
func (s DataPageLogSchemaTotal) IsNull() bool { return s.Type == NullDataPageLogSchemaTotal }

// SetInt sets DataPageLogSchemaTotal to int.
func (s *DataPageLogSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageLogSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageLogSchemaTotal is int.
func (s DataPageLogSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageLogSchemaTotal returns new DataPageLogSchemaTotal from int.
func NewIntDataPageLogSchemaTotal(v int) DataPageLogSchemaTotal {
	var s DataPageLogSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageLogSchemaTotal to struct{}.
func (s *DataPageLogSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageLogSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageLogSchemaTotal is struct{}.
func (s DataPageLogSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageLogSchemaTotal returns new DataPageLogSchemaTotal from struct{}.
func NewNullDataPageLogSchemaTotal(v struct{}) DataPageLogSchemaTotal {
	var s DataPageLogSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_MapSchema_
type DataPageMapSchema struct {
	Data  []MapSchema               `json:"data"`
	Total DataPageMapSchemaTotal    `json:"total"`
	Page  DataPageMapSchemaPage     `json:"page"`
	Size  DataPageMapSchemaSize     `json:"size"`
	Pages OptDataPageMapSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageMapSchema) GetData() []MapSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageMapSchema) GetTotal() DataPageMapSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageMapSchema) GetPage() DataPageMapSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageMapSchema) GetSize() DataPageMapSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageMapSchema) GetPages() OptDataPageMapSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageMapSchema) SetData(val []MapSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageMapSchema) SetTotal(val DataPageMapSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageMapSchema) SetPage(val DataPageMapSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageMapSchema) SetSize(val DataPageMapSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageMapSchema) SetPages(val OptDataPageMapSchemaPages) {
	s.Pages = val
}

// DataPageMapSchemaPage represents sum type.
type DataPageMapSchemaPage struct {
	Type DataPageMapSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMapSchemaPageType is oneOf type of DataPageMapSchemaPage.
type DataPageMapSchemaPageType string

// Possible values for DataPageMapSchemaPageType.
const (
	IntDataPageMapSchemaPage  DataPageMapSchemaPageType = "int"
	NullDataPageMapSchemaPage DataPageMapSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageMapSchemaPage is int.
func (s DataPageMapSchemaPage) IsInt() bool { return s.Type == IntDataPageMapSchemaPage }

// IsNull reports whether DataPageMapSchemaPage is struct{}.
func (s DataPageMapSchemaPage) IsNull() bool { return s.Type == NullDataPageMapSchemaPage }

// SetInt sets DataPageMapSchemaPage to int.
func (s *DataPageMapSchemaPage) SetInt(v int) {
	s.Type = IntDataPageMapSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMapSchemaPage is int.
func (s DataPageMapSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMapSchemaPage returns new DataPageMapSchemaPage from int.
func NewIntDataPageMapSchemaPage(v int) DataPageMapSchemaPage {
	var s DataPageMapSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMapSchemaPage to struct{}.
func (s *DataPageMapSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageMapSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMapSchemaPage is struct{}.
func (s DataPageMapSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMapSchemaPage returns new DataPageMapSchemaPage from struct{}.
func NewNullDataPageMapSchemaPage(v struct{}) DataPageMapSchemaPage {
	var s DataPageMapSchemaPage
	s.SetNull(v)
	return s
}

// DataPageMapSchemaPages represents sum type.
type DataPageMapSchemaPages struct {
	Type DataPageMapSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMapSchemaPagesType is oneOf type of DataPageMapSchemaPages.
type DataPageMapSchemaPagesType string

// Possible values for DataPageMapSchemaPagesType.
const (
	IntDataPageMapSchemaPages  DataPageMapSchemaPagesType = "int"
	NullDataPageMapSchemaPages DataPageMapSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageMapSchemaPages is int.
func (s DataPageMapSchemaPages) IsInt() bool { return s.Type == IntDataPageMapSchemaPages }

// IsNull reports whether DataPageMapSchemaPages is struct{}.
func (s DataPageMapSchemaPages) IsNull() bool { return s.Type == NullDataPageMapSchemaPages }

// SetInt sets DataPageMapSchemaPages to int.
func (s *DataPageMapSchemaPages) SetInt(v int) {
	s.Type = IntDataPageMapSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMapSchemaPages is int.
func (s DataPageMapSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMapSchemaPages returns new DataPageMapSchemaPages from int.
func NewIntDataPageMapSchemaPages(v int) DataPageMapSchemaPages {
	var s DataPageMapSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMapSchemaPages to struct{}.
func (s *DataPageMapSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageMapSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMapSchemaPages is struct{}.
func (s DataPageMapSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMapSchemaPages returns new DataPageMapSchemaPages from struct{}.
func NewNullDataPageMapSchemaPages(v struct{}) DataPageMapSchemaPages {
	var s DataPageMapSchemaPages
	s.SetNull(v)
	return s
}

// DataPageMapSchemaSize represents sum type.
type DataPageMapSchemaSize struct {
	Type DataPageMapSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMapSchemaSizeType is oneOf type of DataPageMapSchemaSize.
type DataPageMapSchemaSizeType string

// Possible values for DataPageMapSchemaSizeType.
const (
	IntDataPageMapSchemaSize  DataPageMapSchemaSizeType = "int"
	NullDataPageMapSchemaSize DataPageMapSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageMapSchemaSize is int.
func (s DataPageMapSchemaSize) IsInt() bool { return s.Type == IntDataPageMapSchemaSize }

// IsNull reports whether DataPageMapSchemaSize is struct{}.
func (s DataPageMapSchemaSize) IsNull() bool { return s.Type == NullDataPageMapSchemaSize }

// SetInt sets DataPageMapSchemaSize to int.
func (s *DataPageMapSchemaSize) SetInt(v int) {
	s.Type = IntDataPageMapSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMapSchemaSize is int.
func (s DataPageMapSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMapSchemaSize returns new DataPageMapSchemaSize from int.
func NewIntDataPageMapSchemaSize(v int) DataPageMapSchemaSize {
	var s DataPageMapSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMapSchemaSize to struct{}.
func (s *DataPageMapSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageMapSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMapSchemaSize is struct{}.
func (s DataPageMapSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMapSchemaSize returns new DataPageMapSchemaSize from struct{}.
func NewNullDataPageMapSchemaSize(v struct{}) DataPageMapSchemaSize {
	var s DataPageMapSchemaSize
	s.SetNull(v)
	return s
}

// DataPageMapSchemaTotal represents sum type.
type DataPageMapSchemaTotal struct {
	Type DataPageMapSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMapSchemaTotalType is oneOf type of DataPageMapSchemaTotal.
type DataPageMapSchemaTotalType string

// Possible values for DataPageMapSchemaTotalType.
const (
	IntDataPageMapSchemaTotal  DataPageMapSchemaTotalType = "int"
	NullDataPageMapSchemaTotal DataPageMapSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageMapSchemaTotal is int.
func (s DataPageMapSchemaTotal) IsInt() bool { return s.Type == IntDataPageMapSchemaTotal }

// IsNull reports whether DataPageMapSchemaTotal is struct{}.
func (s DataPageMapSchemaTotal) IsNull() bool { return s.Type == NullDataPageMapSchemaTotal }

// SetInt sets DataPageMapSchemaTotal to int.
func (s *DataPageMapSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageMapSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMapSchemaTotal is int.
func (s DataPageMapSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMapSchemaTotal returns new DataPageMapSchemaTotal from int.
func NewIntDataPageMapSchemaTotal(v int) DataPageMapSchemaTotal {
	var s DataPageMapSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMapSchemaTotal to struct{}.
func (s *DataPageMapSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageMapSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMapSchemaTotal is struct{}.
func (s DataPageMapSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMapSchemaTotal returns new DataPageMapSchemaTotal from struct{}.
func NewNullDataPageMapSchemaTotal(v struct{}) DataPageMapSchemaTotal {
	var s DataPageMapSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_MonsterSchema_
type DataPageMonsterSchema struct {
	Data  []MonsterSchema               `json:"data"`
	Total DataPageMonsterSchemaTotal    `json:"total"`
	Page  DataPageMonsterSchemaPage     `json:"page"`
	Size  DataPageMonsterSchemaSize     `json:"size"`
	Pages OptDataPageMonsterSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageMonsterSchema) GetData() []MonsterSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageMonsterSchema) GetTotal() DataPageMonsterSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageMonsterSchema) GetPage() DataPageMonsterSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageMonsterSchema) GetSize() DataPageMonsterSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageMonsterSchema) GetPages() OptDataPageMonsterSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageMonsterSchema) SetData(val []MonsterSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageMonsterSchema) SetTotal(val DataPageMonsterSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageMonsterSchema) SetPage(val DataPageMonsterSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageMonsterSchema) SetSize(val DataPageMonsterSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageMonsterSchema) SetPages(val OptDataPageMonsterSchemaPages) {
	s.Pages = val
}

// DataPageMonsterSchemaPage represents sum type.
type DataPageMonsterSchemaPage struct {
	Type DataPageMonsterSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMonsterSchemaPageType is oneOf type of DataPageMonsterSchemaPage.
type DataPageMonsterSchemaPageType string

// Possible values for DataPageMonsterSchemaPageType.
const (
	IntDataPageMonsterSchemaPage  DataPageMonsterSchemaPageType = "int"
	NullDataPageMonsterSchemaPage DataPageMonsterSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageMonsterSchemaPage is int.
func (s DataPageMonsterSchemaPage) IsInt() bool { return s.Type == IntDataPageMonsterSchemaPage }

// IsNull reports whether DataPageMonsterSchemaPage is struct{}.
func (s DataPageMonsterSchemaPage) IsNull() bool { return s.Type == NullDataPageMonsterSchemaPage }

// SetInt sets DataPageMonsterSchemaPage to int.
func (s *DataPageMonsterSchemaPage) SetInt(v int) {
	s.Type = IntDataPageMonsterSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMonsterSchemaPage is int.
func (s DataPageMonsterSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMonsterSchemaPage returns new DataPageMonsterSchemaPage from int.
func NewIntDataPageMonsterSchemaPage(v int) DataPageMonsterSchemaPage {
	var s DataPageMonsterSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMonsterSchemaPage to struct{}.
func (s *DataPageMonsterSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageMonsterSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMonsterSchemaPage is struct{}.
func (s DataPageMonsterSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMonsterSchemaPage returns new DataPageMonsterSchemaPage from struct{}.
func NewNullDataPageMonsterSchemaPage(v struct{}) DataPageMonsterSchemaPage {
	var s DataPageMonsterSchemaPage
	s.SetNull(v)
	return s
}

// DataPageMonsterSchemaPages represents sum type.
type DataPageMonsterSchemaPages struct {
	Type DataPageMonsterSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMonsterSchemaPagesType is oneOf type of DataPageMonsterSchemaPages.
type DataPageMonsterSchemaPagesType string

// Possible values for DataPageMonsterSchemaPagesType.
const (
	IntDataPageMonsterSchemaPages  DataPageMonsterSchemaPagesType = "int"
	NullDataPageMonsterSchemaPages DataPageMonsterSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageMonsterSchemaPages is int.
func (s DataPageMonsterSchemaPages) IsInt() bool { return s.Type == IntDataPageMonsterSchemaPages }

// IsNull reports whether DataPageMonsterSchemaPages is struct{}.
func (s DataPageMonsterSchemaPages) IsNull() bool { return s.Type == NullDataPageMonsterSchemaPages }

// SetInt sets DataPageMonsterSchemaPages to int.
func (s *DataPageMonsterSchemaPages) SetInt(v int) {
	s.Type = IntDataPageMonsterSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMonsterSchemaPages is int.
func (s DataPageMonsterSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMonsterSchemaPages returns new DataPageMonsterSchemaPages from int.
func NewIntDataPageMonsterSchemaPages(v int) DataPageMonsterSchemaPages {
	var s DataPageMonsterSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMonsterSchemaPages to struct{}.
func (s *DataPageMonsterSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageMonsterSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMonsterSchemaPages is struct{}.
func (s DataPageMonsterSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMonsterSchemaPages returns new DataPageMonsterSchemaPages from struct{}.
func NewNullDataPageMonsterSchemaPages(v struct{}) DataPageMonsterSchemaPages {
	var s DataPageMonsterSchemaPages
	s.SetNull(v)
	return s
}

// DataPageMonsterSchemaSize represents sum type.
type DataPageMonsterSchemaSize struct {
	Type DataPageMonsterSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMonsterSchemaSizeType is oneOf type of DataPageMonsterSchemaSize.
type DataPageMonsterSchemaSizeType string

// Possible values for DataPageMonsterSchemaSizeType.
const (
	IntDataPageMonsterSchemaSize  DataPageMonsterSchemaSizeType = "int"
	NullDataPageMonsterSchemaSize DataPageMonsterSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageMonsterSchemaSize is int.
func (s DataPageMonsterSchemaSize) IsInt() bool { return s.Type == IntDataPageMonsterSchemaSize }

// IsNull reports whether DataPageMonsterSchemaSize is struct{}.
func (s DataPageMonsterSchemaSize) IsNull() bool { return s.Type == NullDataPageMonsterSchemaSize }

// SetInt sets DataPageMonsterSchemaSize to int.
func (s *DataPageMonsterSchemaSize) SetInt(v int) {
	s.Type = IntDataPageMonsterSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMonsterSchemaSize is int.
func (s DataPageMonsterSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMonsterSchemaSize returns new DataPageMonsterSchemaSize from int.
func NewIntDataPageMonsterSchemaSize(v int) DataPageMonsterSchemaSize {
	var s DataPageMonsterSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMonsterSchemaSize to struct{}.
func (s *DataPageMonsterSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageMonsterSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMonsterSchemaSize is struct{}.
func (s DataPageMonsterSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMonsterSchemaSize returns new DataPageMonsterSchemaSize from struct{}.
func NewNullDataPageMonsterSchemaSize(v struct{}) DataPageMonsterSchemaSize {
	var s DataPageMonsterSchemaSize
	s.SetNull(v)
	return s
}

// DataPageMonsterSchemaTotal represents sum type.
type DataPageMonsterSchemaTotal struct {
	Type DataPageMonsterSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageMonsterSchemaTotalType is oneOf type of DataPageMonsterSchemaTotal.
type DataPageMonsterSchemaTotalType string

// Possible values for DataPageMonsterSchemaTotalType.
const (
	IntDataPageMonsterSchemaTotal  DataPageMonsterSchemaTotalType = "int"
	NullDataPageMonsterSchemaTotal DataPageMonsterSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageMonsterSchemaTotal is int.
func (s DataPageMonsterSchemaTotal) IsInt() bool { return s.Type == IntDataPageMonsterSchemaTotal }

// IsNull reports whether DataPageMonsterSchemaTotal is struct{}.
func (s DataPageMonsterSchemaTotal) IsNull() bool { return s.Type == NullDataPageMonsterSchemaTotal }

// SetInt sets DataPageMonsterSchemaTotal to int.
func (s *DataPageMonsterSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageMonsterSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageMonsterSchemaTotal is int.
func (s DataPageMonsterSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageMonsterSchemaTotal returns new DataPageMonsterSchemaTotal from int.
func NewIntDataPageMonsterSchemaTotal(v int) DataPageMonsterSchemaTotal {
	var s DataPageMonsterSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageMonsterSchemaTotal to struct{}.
func (s *DataPageMonsterSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageMonsterSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageMonsterSchemaTotal is struct{}.
func (s DataPageMonsterSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageMonsterSchemaTotal returns new DataPageMonsterSchemaTotal from struct{}.
func NewNullDataPageMonsterSchemaTotal(v struct{}) DataPageMonsterSchemaTotal {
	var s DataPageMonsterSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_ResourceSchema_
type DataPageResourceSchema struct {
	Data  []ResourceSchema               `json:"data"`
	Total DataPageResourceSchemaTotal    `json:"total"`
	Page  DataPageResourceSchemaPage     `json:"page"`
	Size  DataPageResourceSchemaSize     `json:"size"`
	Pages OptDataPageResourceSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageResourceSchema) GetData() []ResourceSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageResourceSchema) GetTotal() DataPageResourceSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageResourceSchema) GetPage() DataPageResourceSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageResourceSchema) GetSize() DataPageResourceSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageResourceSchema) GetPages() OptDataPageResourceSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageResourceSchema) SetData(val []ResourceSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageResourceSchema) SetTotal(val DataPageResourceSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageResourceSchema) SetPage(val DataPageResourceSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageResourceSchema) SetSize(val DataPageResourceSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageResourceSchema) SetPages(val OptDataPageResourceSchemaPages) {
	s.Pages = val
}

// DataPageResourceSchemaPage represents sum type.
type DataPageResourceSchemaPage struct {
	Type DataPageResourceSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageResourceSchemaPageType is oneOf type of DataPageResourceSchemaPage.
type DataPageResourceSchemaPageType string

// Possible values for DataPageResourceSchemaPageType.
const (
	IntDataPageResourceSchemaPage  DataPageResourceSchemaPageType = "int"
	NullDataPageResourceSchemaPage DataPageResourceSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageResourceSchemaPage is int.
func (s DataPageResourceSchemaPage) IsInt() bool { return s.Type == IntDataPageResourceSchemaPage }

// IsNull reports whether DataPageResourceSchemaPage is struct{}.
func (s DataPageResourceSchemaPage) IsNull() bool { return s.Type == NullDataPageResourceSchemaPage }

// SetInt sets DataPageResourceSchemaPage to int.
func (s *DataPageResourceSchemaPage) SetInt(v int) {
	s.Type = IntDataPageResourceSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageResourceSchemaPage is int.
func (s DataPageResourceSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageResourceSchemaPage returns new DataPageResourceSchemaPage from int.
func NewIntDataPageResourceSchemaPage(v int) DataPageResourceSchemaPage {
	var s DataPageResourceSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageResourceSchemaPage to struct{}.
func (s *DataPageResourceSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageResourceSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageResourceSchemaPage is struct{}.
func (s DataPageResourceSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageResourceSchemaPage returns new DataPageResourceSchemaPage from struct{}.
func NewNullDataPageResourceSchemaPage(v struct{}) DataPageResourceSchemaPage {
	var s DataPageResourceSchemaPage
	s.SetNull(v)
	return s
}

// DataPageResourceSchemaPages represents sum type.
type DataPageResourceSchemaPages struct {
	Type DataPageResourceSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageResourceSchemaPagesType is oneOf type of DataPageResourceSchemaPages.
type DataPageResourceSchemaPagesType string

// Possible values for DataPageResourceSchemaPagesType.
const (
	IntDataPageResourceSchemaPages  DataPageResourceSchemaPagesType = "int"
	NullDataPageResourceSchemaPages DataPageResourceSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageResourceSchemaPages is int.
func (s DataPageResourceSchemaPages) IsInt() bool { return s.Type == IntDataPageResourceSchemaPages }

// IsNull reports whether DataPageResourceSchemaPages is struct{}.
func (s DataPageResourceSchemaPages) IsNull() bool { return s.Type == NullDataPageResourceSchemaPages }

// SetInt sets DataPageResourceSchemaPages to int.
func (s *DataPageResourceSchemaPages) SetInt(v int) {
	s.Type = IntDataPageResourceSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageResourceSchemaPages is int.
func (s DataPageResourceSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageResourceSchemaPages returns new DataPageResourceSchemaPages from int.
func NewIntDataPageResourceSchemaPages(v int) DataPageResourceSchemaPages {
	var s DataPageResourceSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageResourceSchemaPages to struct{}.
func (s *DataPageResourceSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageResourceSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageResourceSchemaPages is struct{}.
func (s DataPageResourceSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageResourceSchemaPages returns new DataPageResourceSchemaPages from struct{}.
func NewNullDataPageResourceSchemaPages(v struct{}) DataPageResourceSchemaPages {
	var s DataPageResourceSchemaPages
	s.SetNull(v)
	return s
}

// DataPageResourceSchemaSize represents sum type.
type DataPageResourceSchemaSize struct {
	Type DataPageResourceSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageResourceSchemaSizeType is oneOf type of DataPageResourceSchemaSize.
type DataPageResourceSchemaSizeType string

// Possible values for DataPageResourceSchemaSizeType.
const (
	IntDataPageResourceSchemaSize  DataPageResourceSchemaSizeType = "int"
	NullDataPageResourceSchemaSize DataPageResourceSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageResourceSchemaSize is int.
func (s DataPageResourceSchemaSize) IsInt() bool { return s.Type == IntDataPageResourceSchemaSize }

// IsNull reports whether DataPageResourceSchemaSize is struct{}.
func (s DataPageResourceSchemaSize) IsNull() bool { return s.Type == NullDataPageResourceSchemaSize }

// SetInt sets DataPageResourceSchemaSize to int.
func (s *DataPageResourceSchemaSize) SetInt(v int) {
	s.Type = IntDataPageResourceSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageResourceSchemaSize is int.
func (s DataPageResourceSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageResourceSchemaSize returns new DataPageResourceSchemaSize from int.
func NewIntDataPageResourceSchemaSize(v int) DataPageResourceSchemaSize {
	var s DataPageResourceSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageResourceSchemaSize to struct{}.
func (s *DataPageResourceSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageResourceSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageResourceSchemaSize is struct{}.
func (s DataPageResourceSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageResourceSchemaSize returns new DataPageResourceSchemaSize from struct{}.
func NewNullDataPageResourceSchemaSize(v struct{}) DataPageResourceSchemaSize {
	var s DataPageResourceSchemaSize
	s.SetNull(v)
	return s
}

// DataPageResourceSchemaTotal represents sum type.
type DataPageResourceSchemaTotal struct {
	Type DataPageResourceSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageResourceSchemaTotalType is oneOf type of DataPageResourceSchemaTotal.
type DataPageResourceSchemaTotalType string

// Possible values for DataPageResourceSchemaTotalType.
const (
	IntDataPageResourceSchemaTotal  DataPageResourceSchemaTotalType = "int"
	NullDataPageResourceSchemaTotal DataPageResourceSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageResourceSchemaTotal is int.
func (s DataPageResourceSchemaTotal) IsInt() bool { return s.Type == IntDataPageResourceSchemaTotal }

// IsNull reports whether DataPageResourceSchemaTotal is struct{}.
func (s DataPageResourceSchemaTotal) IsNull() bool { return s.Type == NullDataPageResourceSchemaTotal }

// SetInt sets DataPageResourceSchemaTotal to int.
func (s *DataPageResourceSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageResourceSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageResourceSchemaTotal is int.
func (s DataPageResourceSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageResourceSchemaTotal returns new DataPageResourceSchemaTotal from int.
func NewIntDataPageResourceSchemaTotal(v int) DataPageResourceSchemaTotal {
	var s DataPageResourceSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageResourceSchemaTotal to struct{}.
func (s *DataPageResourceSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageResourceSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageResourceSchemaTotal is struct{}.
func (s DataPageResourceSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageResourceSchemaTotal returns new DataPageResourceSchemaTotal from struct{}.
func NewNullDataPageResourceSchemaTotal(v struct{}) DataPageResourceSchemaTotal {
	var s DataPageResourceSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_SimpleItemSchema_
type DataPageSimpleItemSchema struct {
	Data  []SimpleItemSchema               `json:"data"`
	Total DataPageSimpleItemSchemaTotal    `json:"total"`
	Page  DataPageSimpleItemSchemaPage     `json:"page"`
	Size  DataPageSimpleItemSchemaSize     `json:"size"`
	Pages OptDataPageSimpleItemSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageSimpleItemSchema) GetData() []SimpleItemSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageSimpleItemSchema) GetTotal() DataPageSimpleItemSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageSimpleItemSchema) GetPage() DataPageSimpleItemSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageSimpleItemSchema) GetSize() DataPageSimpleItemSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageSimpleItemSchema) GetPages() OptDataPageSimpleItemSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageSimpleItemSchema) SetData(val []SimpleItemSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageSimpleItemSchema) SetTotal(val DataPageSimpleItemSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageSimpleItemSchema) SetPage(val DataPageSimpleItemSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageSimpleItemSchema) SetSize(val DataPageSimpleItemSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageSimpleItemSchema) SetPages(val OptDataPageSimpleItemSchemaPages) {
	s.Pages = val
}

// DataPageSimpleItemSchemaPage represents sum type.
type DataPageSimpleItemSchemaPage struct {
	Type DataPageSimpleItemSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageSimpleItemSchemaPageType is oneOf type of DataPageSimpleItemSchemaPage.
type DataPageSimpleItemSchemaPageType string

// Possible values for DataPageSimpleItemSchemaPageType.
const (
	IntDataPageSimpleItemSchemaPage  DataPageSimpleItemSchemaPageType = "int"
	NullDataPageSimpleItemSchemaPage DataPageSimpleItemSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageSimpleItemSchemaPage is int.
func (s DataPageSimpleItemSchemaPage) IsInt() bool { return s.Type == IntDataPageSimpleItemSchemaPage }

// IsNull reports whether DataPageSimpleItemSchemaPage is struct{}.
func (s DataPageSimpleItemSchemaPage) IsNull() bool {
	return s.Type == NullDataPageSimpleItemSchemaPage
}

// SetInt sets DataPageSimpleItemSchemaPage to int.
func (s *DataPageSimpleItemSchemaPage) SetInt(v int) {
	s.Type = IntDataPageSimpleItemSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageSimpleItemSchemaPage is int.
func (s DataPageSimpleItemSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageSimpleItemSchemaPage returns new DataPageSimpleItemSchemaPage from int.
func NewIntDataPageSimpleItemSchemaPage(v int) DataPageSimpleItemSchemaPage {
	var s DataPageSimpleItemSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageSimpleItemSchemaPage to struct{}.
func (s *DataPageSimpleItemSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageSimpleItemSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageSimpleItemSchemaPage is struct{}.
func (s DataPageSimpleItemSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageSimpleItemSchemaPage returns new DataPageSimpleItemSchemaPage from struct{}.
func NewNullDataPageSimpleItemSchemaPage(v struct{}) DataPageSimpleItemSchemaPage {
	var s DataPageSimpleItemSchemaPage
	s.SetNull(v)
	return s
}

// DataPageSimpleItemSchemaPages represents sum type.
type DataPageSimpleItemSchemaPages struct {
	Type DataPageSimpleItemSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageSimpleItemSchemaPagesType is oneOf type of DataPageSimpleItemSchemaPages.
type DataPageSimpleItemSchemaPagesType string

// Possible values for DataPageSimpleItemSchemaPagesType.
const (
	IntDataPageSimpleItemSchemaPages  DataPageSimpleItemSchemaPagesType = "int"
	NullDataPageSimpleItemSchemaPages DataPageSimpleItemSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageSimpleItemSchemaPages is int.
func (s DataPageSimpleItemSchemaPages) IsInt() bool {
	return s.Type == IntDataPageSimpleItemSchemaPages
}

// IsNull reports whether DataPageSimpleItemSchemaPages is struct{}.
func (s DataPageSimpleItemSchemaPages) IsNull() bool {
	return s.Type == NullDataPageSimpleItemSchemaPages
}

// SetInt sets DataPageSimpleItemSchemaPages to int.
func (s *DataPageSimpleItemSchemaPages) SetInt(v int) {
	s.Type = IntDataPageSimpleItemSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageSimpleItemSchemaPages is int.
func (s DataPageSimpleItemSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageSimpleItemSchemaPages returns new DataPageSimpleItemSchemaPages from int.
func NewIntDataPageSimpleItemSchemaPages(v int) DataPageSimpleItemSchemaPages {
	var s DataPageSimpleItemSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageSimpleItemSchemaPages to struct{}.
func (s *DataPageSimpleItemSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageSimpleItemSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageSimpleItemSchemaPages is struct{}.
func (s DataPageSimpleItemSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageSimpleItemSchemaPages returns new DataPageSimpleItemSchemaPages from struct{}.
func NewNullDataPageSimpleItemSchemaPages(v struct{}) DataPageSimpleItemSchemaPages {
	var s DataPageSimpleItemSchemaPages
	s.SetNull(v)
	return s
}

// DataPageSimpleItemSchemaSize represents sum type.
type DataPageSimpleItemSchemaSize struct {
	Type DataPageSimpleItemSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageSimpleItemSchemaSizeType is oneOf type of DataPageSimpleItemSchemaSize.
type DataPageSimpleItemSchemaSizeType string

// Possible values for DataPageSimpleItemSchemaSizeType.
const (
	IntDataPageSimpleItemSchemaSize  DataPageSimpleItemSchemaSizeType = "int"
	NullDataPageSimpleItemSchemaSize DataPageSimpleItemSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageSimpleItemSchemaSize is int.
func (s DataPageSimpleItemSchemaSize) IsInt() bool { return s.Type == IntDataPageSimpleItemSchemaSize }

// IsNull reports whether DataPageSimpleItemSchemaSize is struct{}.
func (s DataPageSimpleItemSchemaSize) IsNull() bool {
	return s.Type == NullDataPageSimpleItemSchemaSize
}

// SetInt sets DataPageSimpleItemSchemaSize to int.
func (s *DataPageSimpleItemSchemaSize) SetInt(v int) {
	s.Type = IntDataPageSimpleItemSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageSimpleItemSchemaSize is int.
func (s DataPageSimpleItemSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageSimpleItemSchemaSize returns new DataPageSimpleItemSchemaSize from int.
func NewIntDataPageSimpleItemSchemaSize(v int) DataPageSimpleItemSchemaSize {
	var s DataPageSimpleItemSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageSimpleItemSchemaSize to struct{}.
func (s *DataPageSimpleItemSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageSimpleItemSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageSimpleItemSchemaSize is struct{}.
func (s DataPageSimpleItemSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageSimpleItemSchemaSize returns new DataPageSimpleItemSchemaSize from struct{}.
func NewNullDataPageSimpleItemSchemaSize(v struct{}) DataPageSimpleItemSchemaSize {
	var s DataPageSimpleItemSchemaSize
	s.SetNull(v)
	return s
}

// DataPageSimpleItemSchemaTotal represents sum type.
type DataPageSimpleItemSchemaTotal struct {
	Type DataPageSimpleItemSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageSimpleItemSchemaTotalType is oneOf type of DataPageSimpleItemSchemaTotal.
type DataPageSimpleItemSchemaTotalType string

// Possible values for DataPageSimpleItemSchemaTotalType.
const (
	IntDataPageSimpleItemSchemaTotal  DataPageSimpleItemSchemaTotalType = "int"
	NullDataPageSimpleItemSchemaTotal DataPageSimpleItemSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageSimpleItemSchemaTotal is int.
func (s DataPageSimpleItemSchemaTotal) IsInt() bool {
	return s.Type == IntDataPageSimpleItemSchemaTotal
}

// IsNull reports whether DataPageSimpleItemSchemaTotal is struct{}.
func (s DataPageSimpleItemSchemaTotal) IsNull() bool {
	return s.Type == NullDataPageSimpleItemSchemaTotal
}

// SetInt sets DataPageSimpleItemSchemaTotal to int.
func (s *DataPageSimpleItemSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageSimpleItemSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageSimpleItemSchemaTotal is int.
func (s DataPageSimpleItemSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageSimpleItemSchemaTotal returns new DataPageSimpleItemSchemaTotal from int.
func NewIntDataPageSimpleItemSchemaTotal(v int) DataPageSimpleItemSchemaTotal {
	var s DataPageSimpleItemSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageSimpleItemSchemaTotal to struct{}.
func (s *DataPageSimpleItemSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageSimpleItemSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageSimpleItemSchemaTotal is struct{}.
func (s DataPageSimpleItemSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageSimpleItemSchemaTotal returns new DataPageSimpleItemSchemaTotal from struct{}.
func NewNullDataPageSimpleItemSchemaTotal(v struct{}) DataPageSimpleItemSchemaTotal {
	var s DataPageSimpleItemSchemaTotal
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/DataPage_TaskFullSchema_
type DataPageTaskFullSchema struct {
	Data  []TaskFullSchema               `json:"data"`
	Total DataPageTaskFullSchemaTotal    `json:"total"`
	Page  DataPageTaskFullSchemaPage     `json:"page"`
	Size  DataPageTaskFullSchemaSize     `json:"size"`
	Pages OptDataPageTaskFullSchemaPages `json:"pages"`
}

// GetData returns the value of Data.
func (s *DataPageTaskFullSchema) GetData() []TaskFullSchema {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *DataPageTaskFullSchema) GetTotal() DataPageTaskFullSchemaTotal {
	return s.Total
}

// GetPage returns the value of Page.
func (s *DataPageTaskFullSchema) GetPage() DataPageTaskFullSchemaPage {
	return s.Page
}

// GetSize returns the value of Size.
func (s *DataPageTaskFullSchema) GetSize() DataPageTaskFullSchemaSize {
	return s.Size
}

// GetPages returns the value of Pages.
func (s *DataPageTaskFullSchema) GetPages() OptDataPageTaskFullSchemaPages {
	return s.Pages
}

// SetData sets the value of Data.
func (s *DataPageTaskFullSchema) SetData(val []TaskFullSchema) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *DataPageTaskFullSchema) SetTotal(val DataPageTaskFullSchemaTotal) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *DataPageTaskFullSchema) SetPage(val DataPageTaskFullSchemaPage) {
	s.Page = val
}

// SetSize sets the value of Size.
func (s *DataPageTaskFullSchema) SetSize(val DataPageTaskFullSchemaSize) {
	s.Size = val
}

// SetPages sets the value of Pages.
func (s *DataPageTaskFullSchema) SetPages(val OptDataPageTaskFullSchemaPages) {
	s.Pages = val
}

// DataPageTaskFullSchemaPage represents sum type.
type DataPageTaskFullSchemaPage struct {
	Type DataPageTaskFullSchemaPageType // switch on this field
	Int  int
	Null struct{}
}

// DataPageTaskFullSchemaPageType is oneOf type of DataPageTaskFullSchemaPage.
type DataPageTaskFullSchemaPageType string

// Possible values for DataPageTaskFullSchemaPageType.
const (
	IntDataPageTaskFullSchemaPage  DataPageTaskFullSchemaPageType = "int"
	NullDataPageTaskFullSchemaPage DataPageTaskFullSchemaPageType = "struct{}"
)

// IsInt reports whether DataPageTaskFullSchemaPage is int.
func (s DataPageTaskFullSchemaPage) IsInt() bool { return s.Type == IntDataPageTaskFullSchemaPage }

// IsNull reports whether DataPageTaskFullSchemaPage is struct{}.
func (s DataPageTaskFullSchemaPage) IsNull() bool { return s.Type == NullDataPageTaskFullSchemaPage }

// SetInt sets DataPageTaskFullSchemaPage to int.
func (s *DataPageTaskFullSchemaPage) SetInt(v int) {
	s.Type = IntDataPageTaskFullSchemaPage
	s.Int = v
}

// GetInt returns int and true boolean if DataPageTaskFullSchemaPage is int.
func (s DataPageTaskFullSchemaPage) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageTaskFullSchemaPage returns new DataPageTaskFullSchemaPage from int.
func NewIntDataPageTaskFullSchemaPage(v int) DataPageTaskFullSchemaPage {
	var s DataPageTaskFullSchemaPage
	s.SetInt(v)
	return s
}

// SetNull sets DataPageTaskFullSchemaPage to struct{}.
func (s *DataPageTaskFullSchemaPage) SetNull(v struct{}) {
	s.Type = NullDataPageTaskFullSchemaPage
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageTaskFullSchemaPage is struct{}.
func (s DataPageTaskFullSchemaPage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageTaskFullSchemaPage returns new DataPageTaskFullSchemaPage from struct{}.
func NewNullDataPageTaskFullSchemaPage(v struct{}) DataPageTaskFullSchemaPage {
	var s DataPageTaskFullSchemaPage
	s.SetNull(v)
	return s
}

// DataPageTaskFullSchemaPages represents sum type.
type DataPageTaskFullSchemaPages struct {
	Type DataPageTaskFullSchemaPagesType // switch on this field
	Int  int
	Null struct{}
}

// DataPageTaskFullSchemaPagesType is oneOf type of DataPageTaskFullSchemaPages.
type DataPageTaskFullSchemaPagesType string

// Possible values for DataPageTaskFullSchemaPagesType.
const (
	IntDataPageTaskFullSchemaPages  DataPageTaskFullSchemaPagesType = "int"
	NullDataPageTaskFullSchemaPages DataPageTaskFullSchemaPagesType = "struct{}"
)

// IsInt reports whether DataPageTaskFullSchemaPages is int.
func (s DataPageTaskFullSchemaPages) IsInt() bool { return s.Type == IntDataPageTaskFullSchemaPages }

// IsNull reports whether DataPageTaskFullSchemaPages is struct{}.
func (s DataPageTaskFullSchemaPages) IsNull() bool { return s.Type == NullDataPageTaskFullSchemaPages }

// SetInt sets DataPageTaskFullSchemaPages to int.
func (s *DataPageTaskFullSchemaPages) SetInt(v int) {
	s.Type = IntDataPageTaskFullSchemaPages
	s.Int = v
}

// GetInt returns int and true boolean if DataPageTaskFullSchemaPages is int.
func (s DataPageTaskFullSchemaPages) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageTaskFullSchemaPages returns new DataPageTaskFullSchemaPages from int.
func NewIntDataPageTaskFullSchemaPages(v int) DataPageTaskFullSchemaPages {
	var s DataPageTaskFullSchemaPages
	s.SetInt(v)
	return s
}

// SetNull sets DataPageTaskFullSchemaPages to struct{}.
func (s *DataPageTaskFullSchemaPages) SetNull(v struct{}) {
	s.Type = NullDataPageTaskFullSchemaPages
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageTaskFullSchemaPages is struct{}.
func (s DataPageTaskFullSchemaPages) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageTaskFullSchemaPages returns new DataPageTaskFullSchemaPages from struct{}.
func NewNullDataPageTaskFullSchemaPages(v struct{}) DataPageTaskFullSchemaPages {
	var s DataPageTaskFullSchemaPages
	s.SetNull(v)
	return s
}

// DataPageTaskFullSchemaSize represents sum type.
type DataPageTaskFullSchemaSize struct {
	Type DataPageTaskFullSchemaSizeType // switch on this field
	Int  int
	Null struct{}
}

// DataPageTaskFullSchemaSizeType is oneOf type of DataPageTaskFullSchemaSize.
type DataPageTaskFullSchemaSizeType string

// Possible values for DataPageTaskFullSchemaSizeType.
const (
	IntDataPageTaskFullSchemaSize  DataPageTaskFullSchemaSizeType = "int"
	NullDataPageTaskFullSchemaSize DataPageTaskFullSchemaSizeType = "struct{}"
)

// IsInt reports whether DataPageTaskFullSchemaSize is int.
func (s DataPageTaskFullSchemaSize) IsInt() bool { return s.Type == IntDataPageTaskFullSchemaSize }

// IsNull reports whether DataPageTaskFullSchemaSize is struct{}.
func (s DataPageTaskFullSchemaSize) IsNull() bool { return s.Type == NullDataPageTaskFullSchemaSize }

// SetInt sets DataPageTaskFullSchemaSize to int.
func (s *DataPageTaskFullSchemaSize) SetInt(v int) {
	s.Type = IntDataPageTaskFullSchemaSize
	s.Int = v
}

// GetInt returns int and true boolean if DataPageTaskFullSchemaSize is int.
func (s DataPageTaskFullSchemaSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageTaskFullSchemaSize returns new DataPageTaskFullSchemaSize from int.
func NewIntDataPageTaskFullSchemaSize(v int) DataPageTaskFullSchemaSize {
	var s DataPageTaskFullSchemaSize
	s.SetInt(v)
	return s
}

// SetNull sets DataPageTaskFullSchemaSize to struct{}.
func (s *DataPageTaskFullSchemaSize) SetNull(v struct{}) {
	s.Type = NullDataPageTaskFullSchemaSize
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageTaskFullSchemaSize is struct{}.
func (s DataPageTaskFullSchemaSize) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageTaskFullSchemaSize returns new DataPageTaskFullSchemaSize from struct{}.
func NewNullDataPageTaskFullSchemaSize(v struct{}) DataPageTaskFullSchemaSize {
	var s DataPageTaskFullSchemaSize
	s.SetNull(v)
	return s
}

// DataPageTaskFullSchemaTotal represents sum type.
type DataPageTaskFullSchemaTotal struct {
	Type DataPageTaskFullSchemaTotalType // switch on this field
	Int  int
	Null struct{}
}

// DataPageTaskFullSchemaTotalType is oneOf type of DataPageTaskFullSchemaTotal.
type DataPageTaskFullSchemaTotalType string

// Possible values for DataPageTaskFullSchemaTotalType.
const (
	IntDataPageTaskFullSchemaTotal  DataPageTaskFullSchemaTotalType = "int"
	NullDataPageTaskFullSchemaTotal DataPageTaskFullSchemaTotalType = "struct{}"
)

// IsInt reports whether DataPageTaskFullSchemaTotal is int.
func (s DataPageTaskFullSchemaTotal) IsInt() bool { return s.Type == IntDataPageTaskFullSchemaTotal }

// IsNull reports whether DataPageTaskFullSchemaTotal is struct{}.
func (s DataPageTaskFullSchemaTotal) IsNull() bool { return s.Type == NullDataPageTaskFullSchemaTotal }

// SetInt sets DataPageTaskFullSchemaTotal to int.
func (s *DataPageTaskFullSchemaTotal) SetInt(v int) {
	s.Type = IntDataPageTaskFullSchemaTotal
	s.Int = v
}

// GetInt returns int and true boolean if DataPageTaskFullSchemaTotal is int.
func (s DataPageTaskFullSchemaTotal) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntDataPageTaskFullSchemaTotal returns new DataPageTaskFullSchemaTotal from int.
func NewIntDataPageTaskFullSchemaTotal(v int) DataPageTaskFullSchemaTotal {
	var s DataPageTaskFullSchemaTotal
	s.SetInt(v)
	return s
}

// SetNull sets DataPageTaskFullSchemaTotal to struct{}.
func (s *DataPageTaskFullSchemaTotal) SetNull(v struct{}) {
	s.Type = NullDataPageTaskFullSchemaTotal
	s.Null = v
}

// GetNull returns struct{} and true boolean if DataPageTaskFullSchemaTotal is struct{}.
func (s DataPageTaskFullSchemaTotal) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullDataPageTaskFullSchemaTotal returns new DataPageTaskFullSchemaTotal from struct{}.
func NewNullDataPageTaskFullSchemaTotal(v struct{}) DataPageTaskFullSchemaTotal {
	var s DataPageTaskFullSchemaTotal
	s.SetNull(v)
	return s
}

// DeleteCharacterCharactersDeletePostCode498 is response for DeleteCharacterCharactersDeletePost operation.
type DeleteCharacterCharactersDeletePostCode498 struct{}

func (*DeleteCharacterCharactersDeletePostCode498) deleteCharacterCharactersDeletePostRes() {}

// Ref: #/components/schemas/DeleteCharacterSchema
type DeleteCharacterSchema struct {
	// Character name.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DeleteCharacterSchema) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DeleteCharacterSchema) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/DeleteItemResponseSchema
type DeleteItemResponseSchema struct {
	Data DeleteItemSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteItemResponseSchema) GetData() DeleteItemSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteItemResponseSchema) SetData(val DeleteItemSchema) {
	s.Data = val
}

func (*DeleteItemResponseSchema) actionDeleteItemMyNameActionDeletePostRes() {}

// Ref: #/components/schemas/DeleteItemSchema
type DeleteItemSchema struct {
	// Cooldown details.
	Cooldown DeleteItemSchemaCooldown `json:"cooldown"`
	// Item details.
	Item DeleteItemSchemaItem `json:"item"`
	// Player details.
	Character DeleteItemSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *DeleteItemSchema) GetCooldown() DeleteItemSchemaCooldown {
	return s.Cooldown
}

// GetItem returns the value of Item.
func (s *DeleteItemSchema) GetItem() DeleteItemSchemaItem {
	return s.Item
}

// GetCharacter returns the value of Character.
func (s *DeleteItemSchema) GetCharacter() DeleteItemSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *DeleteItemSchema) SetCooldown(val DeleteItemSchemaCooldown) {
	s.Cooldown = val
}

// SetItem sets the value of Item.
func (s *DeleteItemSchema) SetItem(val DeleteItemSchemaItem) {
	s.Item = val
}

// SetCharacter sets the value of Character.
func (s *DeleteItemSchema) SetCharacter(val DeleteItemSchemaCharacter) {
	s.Character = val
}

type DeleteItemSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin DeleteItemSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *DeleteItemSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *DeleteItemSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *DeleteItemSchemaCharacter) GetSkin() DeleteItemSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *DeleteItemSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *DeleteItemSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *DeleteItemSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *DeleteItemSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *DeleteItemSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *DeleteItemSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *DeleteItemSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *DeleteItemSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *DeleteItemSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *DeleteItemSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *DeleteItemSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *DeleteItemSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *DeleteItemSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *DeleteItemSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *DeleteItemSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *DeleteItemSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *DeleteItemSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *DeleteItemSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *DeleteItemSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *DeleteItemSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *DeleteItemSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *DeleteItemSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *DeleteItemSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *DeleteItemSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *DeleteItemSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *DeleteItemSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *DeleteItemSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *DeleteItemSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *DeleteItemSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *DeleteItemSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *DeleteItemSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *DeleteItemSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *DeleteItemSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *DeleteItemSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *DeleteItemSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *DeleteItemSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *DeleteItemSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *DeleteItemSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *DeleteItemSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *DeleteItemSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *DeleteItemSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *DeleteItemSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *DeleteItemSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *DeleteItemSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *DeleteItemSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *DeleteItemSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *DeleteItemSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *DeleteItemSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *DeleteItemSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *DeleteItemSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *DeleteItemSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *DeleteItemSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *DeleteItemSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *DeleteItemSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *DeleteItemSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *DeleteItemSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *DeleteItemSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *DeleteItemSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *DeleteItemSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *DeleteItemSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *DeleteItemSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *DeleteItemSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *DeleteItemSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *DeleteItemSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *DeleteItemSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *DeleteItemSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *DeleteItemSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *DeleteItemSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *DeleteItemSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *DeleteItemSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *DeleteItemSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *DeleteItemSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *DeleteItemSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *DeleteItemSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *DeleteItemSchemaCharacter) SetSkin(val DeleteItemSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *DeleteItemSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *DeleteItemSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *DeleteItemSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *DeleteItemSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *DeleteItemSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *DeleteItemSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *DeleteItemSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *DeleteItemSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *DeleteItemSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *DeleteItemSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *DeleteItemSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *DeleteItemSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *DeleteItemSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *DeleteItemSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *DeleteItemSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *DeleteItemSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *DeleteItemSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *DeleteItemSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *DeleteItemSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *DeleteItemSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *DeleteItemSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *DeleteItemSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *DeleteItemSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *DeleteItemSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *DeleteItemSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *DeleteItemSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *DeleteItemSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *DeleteItemSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *DeleteItemSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *DeleteItemSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *DeleteItemSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *DeleteItemSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *DeleteItemSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *DeleteItemSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *DeleteItemSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *DeleteItemSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *DeleteItemSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *DeleteItemSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *DeleteItemSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *DeleteItemSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *DeleteItemSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *DeleteItemSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *DeleteItemSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *DeleteItemSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *DeleteItemSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *DeleteItemSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *DeleteItemSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *DeleteItemSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *DeleteItemSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *DeleteItemSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *DeleteItemSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *DeleteItemSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *DeleteItemSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *DeleteItemSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *DeleteItemSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *DeleteItemSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *DeleteItemSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *DeleteItemSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *DeleteItemSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *DeleteItemSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *DeleteItemSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *DeleteItemSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *DeleteItemSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *DeleteItemSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *DeleteItemSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *DeleteItemSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *DeleteItemSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *DeleteItemSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *DeleteItemSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *DeleteItemSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *DeleteItemSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *DeleteItemSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type DeleteItemSchemaCharacterSkin string

const (
	DeleteItemSchemaCharacterSkinMen1   DeleteItemSchemaCharacterSkin = "men1"
	DeleteItemSchemaCharacterSkinMen2   DeleteItemSchemaCharacterSkin = "men2"
	DeleteItemSchemaCharacterSkinMen3   DeleteItemSchemaCharacterSkin = "men3"
	DeleteItemSchemaCharacterSkinWomen1 DeleteItemSchemaCharacterSkin = "women1"
	DeleteItemSchemaCharacterSkinWomen2 DeleteItemSchemaCharacterSkin = "women2"
	DeleteItemSchemaCharacterSkinWomen3 DeleteItemSchemaCharacterSkin = "women3"
)

// AllValues returns all DeleteItemSchemaCharacterSkin values.
func (DeleteItemSchemaCharacterSkin) AllValues() []DeleteItemSchemaCharacterSkin {
	return []DeleteItemSchemaCharacterSkin{
		DeleteItemSchemaCharacterSkinMen1,
		DeleteItemSchemaCharacterSkinMen2,
		DeleteItemSchemaCharacterSkinMen3,
		DeleteItemSchemaCharacterSkinWomen1,
		DeleteItemSchemaCharacterSkinWomen2,
		DeleteItemSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteItemSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case DeleteItemSchemaCharacterSkinMen1:
		return []byte(s), nil
	case DeleteItemSchemaCharacterSkinMen2:
		return []byte(s), nil
	case DeleteItemSchemaCharacterSkinMen3:
		return []byte(s), nil
	case DeleteItemSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case DeleteItemSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case DeleteItemSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteItemSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch DeleteItemSchemaCharacterSkin(data) {
	case DeleteItemSchemaCharacterSkinMen1:
		*s = DeleteItemSchemaCharacterSkinMen1
		return nil
	case DeleteItemSchemaCharacterSkinMen2:
		*s = DeleteItemSchemaCharacterSkinMen2
		return nil
	case DeleteItemSchemaCharacterSkinMen3:
		*s = DeleteItemSchemaCharacterSkinMen3
		return nil
	case DeleteItemSchemaCharacterSkinWomen1:
		*s = DeleteItemSchemaCharacterSkinWomen1
		return nil
	case DeleteItemSchemaCharacterSkinWomen2:
		*s = DeleteItemSchemaCharacterSkinWomen2
		return nil
	case DeleteItemSchemaCharacterSkinWomen3:
		*s = DeleteItemSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DeleteItemSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason DeleteItemSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *DeleteItemSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *DeleteItemSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *DeleteItemSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *DeleteItemSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *DeleteItemSchemaCooldown) GetReason() DeleteItemSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *DeleteItemSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *DeleteItemSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *DeleteItemSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *DeleteItemSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *DeleteItemSchemaCooldown) SetReason(val DeleteItemSchemaCooldownReason) {
	s.Reason = val
}

type DeleteItemSchemaCooldownReason string

const (
	DeleteItemSchemaCooldownReasonMovement         DeleteItemSchemaCooldownReason = "movement"
	DeleteItemSchemaCooldownReasonFight            DeleteItemSchemaCooldownReason = "fight"
	DeleteItemSchemaCooldownReasonCrafting         DeleteItemSchemaCooldownReason = "crafting"
	DeleteItemSchemaCooldownReasonGathering        DeleteItemSchemaCooldownReason = "gathering"
	DeleteItemSchemaCooldownReasonBuyGe            DeleteItemSchemaCooldownReason = "buy_ge"
	DeleteItemSchemaCooldownReasonSellGe           DeleteItemSchemaCooldownReason = "sell_ge"
	DeleteItemSchemaCooldownReasonCancelGe         DeleteItemSchemaCooldownReason = "cancel_ge"
	DeleteItemSchemaCooldownReasonDeleteItem       DeleteItemSchemaCooldownReason = "delete_item"
	DeleteItemSchemaCooldownReasonDeposit          DeleteItemSchemaCooldownReason = "deposit"
	DeleteItemSchemaCooldownReasonWithdraw         DeleteItemSchemaCooldownReason = "withdraw"
	DeleteItemSchemaCooldownReasonDepositGold      DeleteItemSchemaCooldownReason = "deposit_gold"
	DeleteItemSchemaCooldownReasonWithdrawGold     DeleteItemSchemaCooldownReason = "withdraw_gold"
	DeleteItemSchemaCooldownReasonEquip            DeleteItemSchemaCooldownReason = "equip"
	DeleteItemSchemaCooldownReasonUnequip          DeleteItemSchemaCooldownReason = "unequip"
	DeleteItemSchemaCooldownReasonTask             DeleteItemSchemaCooldownReason = "task"
	DeleteItemSchemaCooldownReasonRecycling        DeleteItemSchemaCooldownReason = "recycling"
	DeleteItemSchemaCooldownReasonRest             DeleteItemSchemaCooldownReason = "rest"
	DeleteItemSchemaCooldownReasonUse              DeleteItemSchemaCooldownReason = "use"
	DeleteItemSchemaCooldownReasonBuyBankExpansion DeleteItemSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all DeleteItemSchemaCooldownReason values.
func (DeleteItemSchemaCooldownReason) AllValues() []DeleteItemSchemaCooldownReason {
	return []DeleteItemSchemaCooldownReason{
		DeleteItemSchemaCooldownReasonMovement,
		DeleteItemSchemaCooldownReasonFight,
		DeleteItemSchemaCooldownReasonCrafting,
		DeleteItemSchemaCooldownReasonGathering,
		DeleteItemSchemaCooldownReasonBuyGe,
		DeleteItemSchemaCooldownReasonSellGe,
		DeleteItemSchemaCooldownReasonCancelGe,
		DeleteItemSchemaCooldownReasonDeleteItem,
		DeleteItemSchemaCooldownReasonDeposit,
		DeleteItemSchemaCooldownReasonWithdraw,
		DeleteItemSchemaCooldownReasonDepositGold,
		DeleteItemSchemaCooldownReasonWithdrawGold,
		DeleteItemSchemaCooldownReasonEquip,
		DeleteItemSchemaCooldownReasonUnequip,
		DeleteItemSchemaCooldownReasonTask,
		DeleteItemSchemaCooldownReasonRecycling,
		DeleteItemSchemaCooldownReasonRest,
		DeleteItemSchemaCooldownReasonUse,
		DeleteItemSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteItemSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case DeleteItemSchemaCooldownReasonMovement:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonFight:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonGathering:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonEquip:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonTask:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonRest:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonUse:
		return []byte(s), nil
	case DeleteItemSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteItemSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch DeleteItemSchemaCooldownReason(data) {
	case DeleteItemSchemaCooldownReasonMovement:
		*s = DeleteItemSchemaCooldownReasonMovement
		return nil
	case DeleteItemSchemaCooldownReasonFight:
		*s = DeleteItemSchemaCooldownReasonFight
		return nil
	case DeleteItemSchemaCooldownReasonCrafting:
		*s = DeleteItemSchemaCooldownReasonCrafting
		return nil
	case DeleteItemSchemaCooldownReasonGathering:
		*s = DeleteItemSchemaCooldownReasonGathering
		return nil
	case DeleteItemSchemaCooldownReasonBuyGe:
		*s = DeleteItemSchemaCooldownReasonBuyGe
		return nil
	case DeleteItemSchemaCooldownReasonSellGe:
		*s = DeleteItemSchemaCooldownReasonSellGe
		return nil
	case DeleteItemSchemaCooldownReasonCancelGe:
		*s = DeleteItemSchemaCooldownReasonCancelGe
		return nil
	case DeleteItemSchemaCooldownReasonDeleteItem:
		*s = DeleteItemSchemaCooldownReasonDeleteItem
		return nil
	case DeleteItemSchemaCooldownReasonDeposit:
		*s = DeleteItemSchemaCooldownReasonDeposit
		return nil
	case DeleteItemSchemaCooldownReasonWithdraw:
		*s = DeleteItemSchemaCooldownReasonWithdraw
		return nil
	case DeleteItemSchemaCooldownReasonDepositGold:
		*s = DeleteItemSchemaCooldownReasonDepositGold
		return nil
	case DeleteItemSchemaCooldownReasonWithdrawGold:
		*s = DeleteItemSchemaCooldownReasonWithdrawGold
		return nil
	case DeleteItemSchemaCooldownReasonEquip:
		*s = DeleteItemSchemaCooldownReasonEquip
		return nil
	case DeleteItemSchemaCooldownReasonUnequip:
		*s = DeleteItemSchemaCooldownReasonUnequip
		return nil
	case DeleteItemSchemaCooldownReasonTask:
		*s = DeleteItemSchemaCooldownReasonTask
		return nil
	case DeleteItemSchemaCooldownReasonRecycling:
		*s = DeleteItemSchemaCooldownReasonRecycling
		return nil
	case DeleteItemSchemaCooldownReasonRest:
		*s = DeleteItemSchemaCooldownReasonRest
		return nil
	case DeleteItemSchemaCooldownReasonUse:
		*s = DeleteItemSchemaCooldownReasonUse
		return nil
	case DeleteItemSchemaCooldownReasonBuyBankExpansion:
		*s = DeleteItemSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DeleteItemSchemaItem struct {
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *DeleteItemSchemaItem) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *DeleteItemSchemaItem) GetQuantity() int {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *DeleteItemSchemaItem) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *DeleteItemSchemaItem) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/DepositWithdrawGoldSchema
type DepositWithdrawGoldSchema struct {
	// Quantity of gold.
	Quantity int `json:"quantity"`
}

// GetQuantity returns the value of Quantity.
func (s *DepositWithdrawGoldSchema) GetQuantity() int {
	return s.Quantity
}

// SetQuantity sets the value of Quantity.
func (s *DepositWithdrawGoldSchema) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/DestinationSchema
type DestinationSchema struct {
	// The x coordinate of the destination.
	X int `json:"x"`
	// The y coordinate of the destination.
	Y int `json:"y"`
}

// GetX returns the value of X.
func (s *DestinationSchema) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *DestinationSchema) GetY() int {
	return s.Y
}

// SetX sets the value of X.
func (s *DestinationSchema) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *DestinationSchema) SetY(val int) {
	s.Y = val
}

// Ref: #/components/schemas/DropRateSchema
type DropRateSchema struct {
	// Item code.
	Code string `json:"code"`
	// Chance rate. (1/rate).
	Rate int `json:"rate"`
	// Minimum quantity.
	MinQuantity int `json:"min_quantity"`
	// Maximum quantity.
	MaxQuantity int `json:"max_quantity"`
}

// GetCode returns the value of Code.
func (s *DropRateSchema) GetCode() string {
	return s.Code
}

// GetRate returns the value of Rate.
func (s *DropRateSchema) GetRate() int {
	return s.Rate
}

// GetMinQuantity returns the value of MinQuantity.
func (s *DropRateSchema) GetMinQuantity() int {
	return s.MinQuantity
}

// GetMaxQuantity returns the value of MaxQuantity.
func (s *DropRateSchema) GetMaxQuantity() int {
	return s.MaxQuantity
}

// SetCode sets the value of Code.
func (s *DropRateSchema) SetCode(val string) {
	s.Code = val
}

// SetRate sets the value of Rate.
func (s *DropRateSchema) SetRate(val int) {
	s.Rate = val
}

// SetMinQuantity sets the value of MinQuantity.
func (s *DropRateSchema) SetMinQuantity(val int) {
	s.MinQuantity = val
}

// SetMaxQuantity sets the value of MaxQuantity.
func (s *DropRateSchema) SetMaxQuantity(val int) {
	s.MaxQuantity = val
}

// Ref: #/components/schemas/DropSchema
type DropSchema struct {
	// The code of the item.
	Code string `json:"code"`
	// The quantity of the item.
	Quantity int `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *DropSchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *DropSchema) GetQuantity() int {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *DropSchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *DropSchema) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/EquipRequestSchema
type EquipRequestSchema struct {
	// Cooldown details.
	Cooldown EquipRequestSchemaCooldown `json:"cooldown"`
	// Item slot.
	Slot EquipRequestSchemaSlot `json:"slot"`
	// Item details.
	Item EquipRequestSchemaItem `json:"item"`
	// Player details.
	Character EquipRequestSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *EquipRequestSchema) GetCooldown() EquipRequestSchemaCooldown {
	return s.Cooldown
}

// GetSlot returns the value of Slot.
func (s *EquipRequestSchema) GetSlot() EquipRequestSchemaSlot {
	return s.Slot
}

// GetItem returns the value of Item.
func (s *EquipRequestSchema) GetItem() EquipRequestSchemaItem {
	return s.Item
}

// GetCharacter returns the value of Character.
func (s *EquipRequestSchema) GetCharacter() EquipRequestSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *EquipRequestSchema) SetCooldown(val EquipRequestSchemaCooldown) {
	s.Cooldown = val
}

// SetSlot sets the value of Slot.
func (s *EquipRequestSchema) SetSlot(val EquipRequestSchemaSlot) {
	s.Slot = val
}

// SetItem sets the value of Item.
func (s *EquipRequestSchema) SetItem(val EquipRequestSchemaItem) {
	s.Item = val
}

// SetCharacter sets the value of Character.
func (s *EquipRequestSchema) SetCharacter(val EquipRequestSchemaCharacter) {
	s.Character = val
}

type EquipRequestSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin EquipRequestSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *EquipRequestSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *EquipRequestSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *EquipRequestSchemaCharacter) GetSkin() EquipRequestSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *EquipRequestSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *EquipRequestSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *EquipRequestSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *EquipRequestSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *EquipRequestSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *EquipRequestSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *EquipRequestSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *EquipRequestSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *EquipRequestSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *EquipRequestSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *EquipRequestSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *EquipRequestSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *EquipRequestSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *EquipRequestSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *EquipRequestSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *EquipRequestSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *EquipRequestSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *EquipRequestSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *EquipRequestSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *EquipRequestSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *EquipRequestSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *EquipRequestSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *EquipRequestSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *EquipRequestSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *EquipRequestSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *EquipRequestSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *EquipRequestSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *EquipRequestSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *EquipRequestSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *EquipRequestSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *EquipRequestSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *EquipRequestSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *EquipRequestSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *EquipRequestSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *EquipRequestSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *EquipRequestSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *EquipRequestSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *EquipRequestSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *EquipRequestSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *EquipRequestSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *EquipRequestSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *EquipRequestSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *EquipRequestSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *EquipRequestSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *EquipRequestSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *EquipRequestSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *EquipRequestSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *EquipRequestSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *EquipRequestSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *EquipRequestSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *EquipRequestSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *EquipRequestSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *EquipRequestSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *EquipRequestSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *EquipRequestSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *EquipRequestSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *EquipRequestSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *EquipRequestSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *EquipRequestSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *EquipRequestSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *EquipRequestSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *EquipRequestSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *EquipRequestSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *EquipRequestSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *EquipRequestSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *EquipRequestSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *EquipRequestSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *EquipRequestSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *EquipRequestSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *EquipRequestSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *EquipRequestSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *EquipRequestSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *EquipRequestSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *EquipRequestSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *EquipRequestSchemaCharacter) SetSkin(val EquipRequestSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *EquipRequestSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *EquipRequestSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *EquipRequestSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *EquipRequestSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *EquipRequestSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *EquipRequestSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *EquipRequestSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *EquipRequestSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *EquipRequestSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *EquipRequestSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *EquipRequestSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *EquipRequestSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *EquipRequestSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *EquipRequestSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *EquipRequestSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *EquipRequestSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *EquipRequestSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *EquipRequestSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *EquipRequestSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *EquipRequestSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *EquipRequestSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *EquipRequestSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *EquipRequestSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *EquipRequestSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *EquipRequestSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *EquipRequestSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *EquipRequestSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *EquipRequestSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *EquipRequestSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *EquipRequestSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *EquipRequestSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *EquipRequestSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *EquipRequestSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *EquipRequestSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *EquipRequestSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *EquipRequestSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *EquipRequestSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *EquipRequestSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *EquipRequestSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *EquipRequestSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *EquipRequestSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *EquipRequestSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *EquipRequestSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *EquipRequestSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *EquipRequestSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *EquipRequestSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *EquipRequestSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *EquipRequestSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *EquipRequestSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *EquipRequestSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *EquipRequestSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *EquipRequestSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *EquipRequestSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *EquipRequestSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *EquipRequestSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *EquipRequestSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *EquipRequestSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *EquipRequestSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *EquipRequestSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *EquipRequestSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *EquipRequestSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *EquipRequestSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *EquipRequestSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *EquipRequestSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *EquipRequestSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *EquipRequestSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *EquipRequestSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *EquipRequestSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *EquipRequestSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *EquipRequestSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *EquipRequestSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *EquipRequestSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type EquipRequestSchemaCharacterSkin string

const (
	EquipRequestSchemaCharacterSkinMen1   EquipRequestSchemaCharacterSkin = "men1"
	EquipRequestSchemaCharacterSkinMen2   EquipRequestSchemaCharacterSkin = "men2"
	EquipRequestSchemaCharacterSkinMen3   EquipRequestSchemaCharacterSkin = "men3"
	EquipRequestSchemaCharacterSkinWomen1 EquipRequestSchemaCharacterSkin = "women1"
	EquipRequestSchemaCharacterSkinWomen2 EquipRequestSchemaCharacterSkin = "women2"
	EquipRequestSchemaCharacterSkinWomen3 EquipRequestSchemaCharacterSkin = "women3"
)

// AllValues returns all EquipRequestSchemaCharacterSkin values.
func (EquipRequestSchemaCharacterSkin) AllValues() []EquipRequestSchemaCharacterSkin {
	return []EquipRequestSchemaCharacterSkin{
		EquipRequestSchemaCharacterSkinMen1,
		EquipRequestSchemaCharacterSkinMen2,
		EquipRequestSchemaCharacterSkinMen3,
		EquipRequestSchemaCharacterSkinWomen1,
		EquipRequestSchemaCharacterSkinWomen2,
		EquipRequestSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EquipRequestSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case EquipRequestSchemaCharacterSkinMen1:
		return []byte(s), nil
	case EquipRequestSchemaCharacterSkinMen2:
		return []byte(s), nil
	case EquipRequestSchemaCharacterSkinMen3:
		return []byte(s), nil
	case EquipRequestSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case EquipRequestSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case EquipRequestSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EquipRequestSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch EquipRequestSchemaCharacterSkin(data) {
	case EquipRequestSchemaCharacterSkinMen1:
		*s = EquipRequestSchemaCharacterSkinMen1
		return nil
	case EquipRequestSchemaCharacterSkinMen2:
		*s = EquipRequestSchemaCharacterSkinMen2
		return nil
	case EquipRequestSchemaCharacterSkinMen3:
		*s = EquipRequestSchemaCharacterSkinMen3
		return nil
	case EquipRequestSchemaCharacterSkinWomen1:
		*s = EquipRequestSchemaCharacterSkinWomen1
		return nil
	case EquipRequestSchemaCharacterSkinWomen2:
		*s = EquipRequestSchemaCharacterSkinWomen2
		return nil
	case EquipRequestSchemaCharacterSkinWomen3:
		*s = EquipRequestSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EquipRequestSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason EquipRequestSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *EquipRequestSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *EquipRequestSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *EquipRequestSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *EquipRequestSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *EquipRequestSchemaCooldown) GetReason() EquipRequestSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *EquipRequestSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *EquipRequestSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *EquipRequestSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *EquipRequestSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *EquipRequestSchemaCooldown) SetReason(val EquipRequestSchemaCooldownReason) {
	s.Reason = val
}

type EquipRequestSchemaCooldownReason string

const (
	EquipRequestSchemaCooldownReasonMovement         EquipRequestSchemaCooldownReason = "movement"
	EquipRequestSchemaCooldownReasonFight            EquipRequestSchemaCooldownReason = "fight"
	EquipRequestSchemaCooldownReasonCrafting         EquipRequestSchemaCooldownReason = "crafting"
	EquipRequestSchemaCooldownReasonGathering        EquipRequestSchemaCooldownReason = "gathering"
	EquipRequestSchemaCooldownReasonBuyGe            EquipRequestSchemaCooldownReason = "buy_ge"
	EquipRequestSchemaCooldownReasonSellGe           EquipRequestSchemaCooldownReason = "sell_ge"
	EquipRequestSchemaCooldownReasonCancelGe         EquipRequestSchemaCooldownReason = "cancel_ge"
	EquipRequestSchemaCooldownReasonDeleteItem       EquipRequestSchemaCooldownReason = "delete_item"
	EquipRequestSchemaCooldownReasonDeposit          EquipRequestSchemaCooldownReason = "deposit"
	EquipRequestSchemaCooldownReasonWithdraw         EquipRequestSchemaCooldownReason = "withdraw"
	EquipRequestSchemaCooldownReasonDepositGold      EquipRequestSchemaCooldownReason = "deposit_gold"
	EquipRequestSchemaCooldownReasonWithdrawGold     EquipRequestSchemaCooldownReason = "withdraw_gold"
	EquipRequestSchemaCooldownReasonEquip            EquipRequestSchemaCooldownReason = "equip"
	EquipRequestSchemaCooldownReasonUnequip          EquipRequestSchemaCooldownReason = "unequip"
	EquipRequestSchemaCooldownReasonTask             EquipRequestSchemaCooldownReason = "task"
	EquipRequestSchemaCooldownReasonRecycling        EquipRequestSchemaCooldownReason = "recycling"
	EquipRequestSchemaCooldownReasonRest             EquipRequestSchemaCooldownReason = "rest"
	EquipRequestSchemaCooldownReasonUse              EquipRequestSchemaCooldownReason = "use"
	EquipRequestSchemaCooldownReasonBuyBankExpansion EquipRequestSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all EquipRequestSchemaCooldownReason values.
func (EquipRequestSchemaCooldownReason) AllValues() []EquipRequestSchemaCooldownReason {
	return []EquipRequestSchemaCooldownReason{
		EquipRequestSchemaCooldownReasonMovement,
		EquipRequestSchemaCooldownReasonFight,
		EquipRequestSchemaCooldownReasonCrafting,
		EquipRequestSchemaCooldownReasonGathering,
		EquipRequestSchemaCooldownReasonBuyGe,
		EquipRequestSchemaCooldownReasonSellGe,
		EquipRequestSchemaCooldownReasonCancelGe,
		EquipRequestSchemaCooldownReasonDeleteItem,
		EquipRequestSchemaCooldownReasonDeposit,
		EquipRequestSchemaCooldownReasonWithdraw,
		EquipRequestSchemaCooldownReasonDepositGold,
		EquipRequestSchemaCooldownReasonWithdrawGold,
		EquipRequestSchemaCooldownReasonEquip,
		EquipRequestSchemaCooldownReasonUnequip,
		EquipRequestSchemaCooldownReasonTask,
		EquipRequestSchemaCooldownReasonRecycling,
		EquipRequestSchemaCooldownReasonRest,
		EquipRequestSchemaCooldownReasonUse,
		EquipRequestSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EquipRequestSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case EquipRequestSchemaCooldownReasonMovement:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonFight:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonGathering:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonEquip:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonTask:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonRest:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonUse:
		return []byte(s), nil
	case EquipRequestSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EquipRequestSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch EquipRequestSchemaCooldownReason(data) {
	case EquipRequestSchemaCooldownReasonMovement:
		*s = EquipRequestSchemaCooldownReasonMovement
		return nil
	case EquipRequestSchemaCooldownReasonFight:
		*s = EquipRequestSchemaCooldownReasonFight
		return nil
	case EquipRequestSchemaCooldownReasonCrafting:
		*s = EquipRequestSchemaCooldownReasonCrafting
		return nil
	case EquipRequestSchemaCooldownReasonGathering:
		*s = EquipRequestSchemaCooldownReasonGathering
		return nil
	case EquipRequestSchemaCooldownReasonBuyGe:
		*s = EquipRequestSchemaCooldownReasonBuyGe
		return nil
	case EquipRequestSchemaCooldownReasonSellGe:
		*s = EquipRequestSchemaCooldownReasonSellGe
		return nil
	case EquipRequestSchemaCooldownReasonCancelGe:
		*s = EquipRequestSchemaCooldownReasonCancelGe
		return nil
	case EquipRequestSchemaCooldownReasonDeleteItem:
		*s = EquipRequestSchemaCooldownReasonDeleteItem
		return nil
	case EquipRequestSchemaCooldownReasonDeposit:
		*s = EquipRequestSchemaCooldownReasonDeposit
		return nil
	case EquipRequestSchemaCooldownReasonWithdraw:
		*s = EquipRequestSchemaCooldownReasonWithdraw
		return nil
	case EquipRequestSchemaCooldownReasonDepositGold:
		*s = EquipRequestSchemaCooldownReasonDepositGold
		return nil
	case EquipRequestSchemaCooldownReasonWithdrawGold:
		*s = EquipRequestSchemaCooldownReasonWithdrawGold
		return nil
	case EquipRequestSchemaCooldownReasonEquip:
		*s = EquipRequestSchemaCooldownReasonEquip
		return nil
	case EquipRequestSchemaCooldownReasonUnequip:
		*s = EquipRequestSchemaCooldownReasonUnequip
		return nil
	case EquipRequestSchemaCooldownReasonTask:
		*s = EquipRequestSchemaCooldownReasonTask
		return nil
	case EquipRequestSchemaCooldownReasonRecycling:
		*s = EquipRequestSchemaCooldownReasonRecycling
		return nil
	case EquipRequestSchemaCooldownReasonRest:
		*s = EquipRequestSchemaCooldownReasonRest
		return nil
	case EquipRequestSchemaCooldownReasonUse:
		*s = EquipRequestSchemaCooldownReasonUse
		return nil
	case EquipRequestSchemaCooldownReasonBuyBankExpansion:
		*s = EquipRequestSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EquipRequestSchemaItem struct {
	// Item name.
	Name string `json:"name"`
	// Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`
	// Item level.
	Level int `json:"level"`
	// Item type.
	Type string `json:"type"`
	// Item subtype.
	Subtype string `json:"subtype"`
	// Item description.
	Description string `json:"description"`
	// List of object effects. For equipment, it will include item stats.
	Effects []ItemEffectSchema `json:"effects"`
	// Craft information. If applicable.
	Craft OptEquipRequestSchemaItemCraft `json:"craft"`
	// Item tradeable status. A non-tradeable item cannot be exchanged or sold.
	Tradeable bool `json:"tradeable"`
}

// GetName returns the value of Name.
func (s *EquipRequestSchemaItem) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *EquipRequestSchemaItem) GetCode() string {
	return s.Code
}

// GetLevel returns the value of Level.
func (s *EquipRequestSchemaItem) GetLevel() int {
	return s.Level
}

// GetType returns the value of Type.
func (s *EquipRequestSchemaItem) GetType() string {
	return s.Type
}

// GetSubtype returns the value of Subtype.
func (s *EquipRequestSchemaItem) GetSubtype() string {
	return s.Subtype
}

// GetDescription returns the value of Description.
func (s *EquipRequestSchemaItem) GetDescription() string {
	return s.Description
}

// GetEffects returns the value of Effects.
func (s *EquipRequestSchemaItem) GetEffects() []ItemEffectSchema {
	return s.Effects
}

// GetCraft returns the value of Craft.
func (s *EquipRequestSchemaItem) GetCraft() OptEquipRequestSchemaItemCraft {
	return s.Craft
}

// GetTradeable returns the value of Tradeable.
func (s *EquipRequestSchemaItem) GetTradeable() bool {
	return s.Tradeable
}

// SetName sets the value of Name.
func (s *EquipRequestSchemaItem) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *EquipRequestSchemaItem) SetCode(val string) {
	s.Code = val
}

// SetLevel sets the value of Level.
func (s *EquipRequestSchemaItem) SetLevel(val int) {
	s.Level = val
}

// SetType sets the value of Type.
func (s *EquipRequestSchemaItem) SetType(val string) {
	s.Type = val
}

// SetSubtype sets the value of Subtype.
func (s *EquipRequestSchemaItem) SetSubtype(val string) {
	s.Subtype = val
}

// SetDescription sets the value of Description.
func (s *EquipRequestSchemaItem) SetDescription(val string) {
	s.Description = val
}

// SetEffects sets the value of Effects.
func (s *EquipRequestSchemaItem) SetEffects(val []ItemEffectSchema) {
	s.Effects = val
}

// SetCraft sets the value of Craft.
func (s *EquipRequestSchemaItem) SetCraft(val OptEquipRequestSchemaItemCraft) {
	s.Craft = val
}

// SetTradeable sets the value of Tradeable.
func (s *EquipRequestSchemaItem) SetTradeable(val bool) {
	s.Tradeable = val
}

// Craft information. If applicable.
// EquipRequestSchemaItemCraft represents sum type.
type EquipRequestSchemaItemCraft struct {
	Type        EquipRequestSchemaItemCraftType // switch on this field
	CraftSchema CraftSchema
	Null        struct{}
}

// EquipRequestSchemaItemCraftType is oneOf type of EquipRequestSchemaItemCraft.
type EquipRequestSchemaItemCraftType string

// Possible values for EquipRequestSchemaItemCraftType.
const (
	CraftSchemaEquipRequestSchemaItemCraft EquipRequestSchemaItemCraftType = "CraftSchema"
	NullEquipRequestSchemaItemCraft        EquipRequestSchemaItemCraftType = "struct{}"
)

// IsCraftSchema reports whether EquipRequestSchemaItemCraft is CraftSchema.
func (s EquipRequestSchemaItemCraft) IsCraftSchema() bool {
	return s.Type == CraftSchemaEquipRequestSchemaItemCraft
}

// IsNull reports whether EquipRequestSchemaItemCraft is struct{}.
func (s EquipRequestSchemaItemCraft) IsNull() bool { return s.Type == NullEquipRequestSchemaItemCraft }

// SetCraftSchema sets EquipRequestSchemaItemCraft to CraftSchema.
func (s *EquipRequestSchemaItemCraft) SetCraftSchema(v CraftSchema) {
	s.Type = CraftSchemaEquipRequestSchemaItemCraft
	s.CraftSchema = v
}

// GetCraftSchema returns CraftSchema and true boolean if EquipRequestSchemaItemCraft is CraftSchema.
func (s EquipRequestSchemaItemCraft) GetCraftSchema() (v CraftSchema, ok bool) {
	if !s.IsCraftSchema() {
		return v, false
	}
	return s.CraftSchema, true
}

// NewCraftSchemaEquipRequestSchemaItemCraft returns new EquipRequestSchemaItemCraft from CraftSchema.
func NewCraftSchemaEquipRequestSchemaItemCraft(v CraftSchema) EquipRequestSchemaItemCraft {
	var s EquipRequestSchemaItemCraft
	s.SetCraftSchema(v)
	return s
}

// SetNull sets EquipRequestSchemaItemCraft to struct{}.
func (s *EquipRequestSchemaItemCraft) SetNull(v struct{}) {
	s.Type = NullEquipRequestSchemaItemCraft
	s.Null = v
}

// GetNull returns struct{} and true boolean if EquipRequestSchemaItemCraft is struct{}.
func (s EquipRequestSchemaItemCraft) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullEquipRequestSchemaItemCraft returns new EquipRequestSchemaItemCraft from struct{}.
func NewNullEquipRequestSchemaItemCraft(v struct{}) EquipRequestSchemaItemCraft {
	var s EquipRequestSchemaItemCraft
	s.SetNull(v)
	return s
}

type EquipRequestSchemaSlot string

const (
	EquipRequestSchemaSlotWeapon    EquipRequestSchemaSlot = "weapon"
	EquipRequestSchemaSlotShield    EquipRequestSchemaSlot = "shield"
	EquipRequestSchemaSlotHelmet    EquipRequestSchemaSlot = "helmet"
	EquipRequestSchemaSlotBodyArmor EquipRequestSchemaSlot = "body_armor"
	EquipRequestSchemaSlotLegArmor  EquipRequestSchemaSlot = "leg_armor"
	EquipRequestSchemaSlotBoots     EquipRequestSchemaSlot = "boots"
	EquipRequestSchemaSlotRing1     EquipRequestSchemaSlot = "ring1"
	EquipRequestSchemaSlotRing2     EquipRequestSchemaSlot = "ring2"
	EquipRequestSchemaSlotAmulet    EquipRequestSchemaSlot = "amulet"
	EquipRequestSchemaSlotArtifact1 EquipRequestSchemaSlot = "artifact1"
	EquipRequestSchemaSlotArtifact2 EquipRequestSchemaSlot = "artifact2"
	EquipRequestSchemaSlotArtifact3 EquipRequestSchemaSlot = "artifact3"
	EquipRequestSchemaSlotUtility1  EquipRequestSchemaSlot = "utility1"
	EquipRequestSchemaSlotUtility2  EquipRequestSchemaSlot = "utility2"
)

// AllValues returns all EquipRequestSchemaSlot values.
func (EquipRequestSchemaSlot) AllValues() []EquipRequestSchemaSlot {
	return []EquipRequestSchemaSlot{
		EquipRequestSchemaSlotWeapon,
		EquipRequestSchemaSlotShield,
		EquipRequestSchemaSlotHelmet,
		EquipRequestSchemaSlotBodyArmor,
		EquipRequestSchemaSlotLegArmor,
		EquipRequestSchemaSlotBoots,
		EquipRequestSchemaSlotRing1,
		EquipRequestSchemaSlotRing2,
		EquipRequestSchemaSlotAmulet,
		EquipRequestSchemaSlotArtifact1,
		EquipRequestSchemaSlotArtifact2,
		EquipRequestSchemaSlotArtifact3,
		EquipRequestSchemaSlotUtility1,
		EquipRequestSchemaSlotUtility2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EquipRequestSchemaSlot) MarshalText() ([]byte, error) {
	switch s {
	case EquipRequestSchemaSlotWeapon:
		return []byte(s), nil
	case EquipRequestSchemaSlotShield:
		return []byte(s), nil
	case EquipRequestSchemaSlotHelmet:
		return []byte(s), nil
	case EquipRequestSchemaSlotBodyArmor:
		return []byte(s), nil
	case EquipRequestSchemaSlotLegArmor:
		return []byte(s), nil
	case EquipRequestSchemaSlotBoots:
		return []byte(s), nil
	case EquipRequestSchemaSlotRing1:
		return []byte(s), nil
	case EquipRequestSchemaSlotRing2:
		return []byte(s), nil
	case EquipRequestSchemaSlotAmulet:
		return []byte(s), nil
	case EquipRequestSchemaSlotArtifact1:
		return []byte(s), nil
	case EquipRequestSchemaSlotArtifact2:
		return []byte(s), nil
	case EquipRequestSchemaSlotArtifact3:
		return []byte(s), nil
	case EquipRequestSchemaSlotUtility1:
		return []byte(s), nil
	case EquipRequestSchemaSlotUtility2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EquipRequestSchemaSlot) UnmarshalText(data []byte) error {
	switch EquipRequestSchemaSlot(data) {
	case EquipRequestSchemaSlotWeapon:
		*s = EquipRequestSchemaSlotWeapon
		return nil
	case EquipRequestSchemaSlotShield:
		*s = EquipRequestSchemaSlotShield
		return nil
	case EquipRequestSchemaSlotHelmet:
		*s = EquipRequestSchemaSlotHelmet
		return nil
	case EquipRequestSchemaSlotBodyArmor:
		*s = EquipRequestSchemaSlotBodyArmor
		return nil
	case EquipRequestSchemaSlotLegArmor:
		*s = EquipRequestSchemaSlotLegArmor
		return nil
	case EquipRequestSchemaSlotBoots:
		*s = EquipRequestSchemaSlotBoots
		return nil
	case EquipRequestSchemaSlotRing1:
		*s = EquipRequestSchemaSlotRing1
		return nil
	case EquipRequestSchemaSlotRing2:
		*s = EquipRequestSchemaSlotRing2
		return nil
	case EquipRequestSchemaSlotAmulet:
		*s = EquipRequestSchemaSlotAmulet
		return nil
	case EquipRequestSchemaSlotArtifact1:
		*s = EquipRequestSchemaSlotArtifact1
		return nil
	case EquipRequestSchemaSlotArtifact2:
		*s = EquipRequestSchemaSlotArtifact2
		return nil
	case EquipRequestSchemaSlotArtifact3:
		*s = EquipRequestSchemaSlotArtifact3
		return nil
	case EquipRequestSchemaSlotUtility1:
		*s = EquipRequestSchemaSlotUtility1
		return nil
	case EquipRequestSchemaSlotUtility2:
		*s = EquipRequestSchemaSlotUtility2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EquipSchema
type EquipSchema struct {
	// Item code.
	Code string `json:"code"`
	// Item slot.
	Slot EquipSchemaSlot `json:"slot"`
	// Item quantity. Applicable to utilitys only.
	Quantity OptInt `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *EquipSchema) GetCode() string {
	return s.Code
}

// GetSlot returns the value of Slot.
func (s *EquipSchema) GetSlot() EquipSchemaSlot {
	return s.Slot
}

// GetQuantity returns the value of Quantity.
func (s *EquipSchema) GetQuantity() OptInt {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *EquipSchema) SetCode(val string) {
	s.Code = val
}

// SetSlot sets the value of Slot.
func (s *EquipSchema) SetSlot(val EquipSchemaSlot) {
	s.Slot = val
}

// SetQuantity sets the value of Quantity.
func (s *EquipSchema) SetQuantity(val OptInt) {
	s.Quantity = val
}

type EquipSchemaSlot string

const (
	EquipSchemaSlotWeapon    EquipSchemaSlot = "weapon"
	EquipSchemaSlotShield    EquipSchemaSlot = "shield"
	EquipSchemaSlotHelmet    EquipSchemaSlot = "helmet"
	EquipSchemaSlotBodyArmor EquipSchemaSlot = "body_armor"
	EquipSchemaSlotLegArmor  EquipSchemaSlot = "leg_armor"
	EquipSchemaSlotBoots     EquipSchemaSlot = "boots"
	EquipSchemaSlotRing1     EquipSchemaSlot = "ring1"
	EquipSchemaSlotRing2     EquipSchemaSlot = "ring2"
	EquipSchemaSlotAmulet    EquipSchemaSlot = "amulet"
	EquipSchemaSlotArtifact1 EquipSchemaSlot = "artifact1"
	EquipSchemaSlotArtifact2 EquipSchemaSlot = "artifact2"
	EquipSchemaSlotArtifact3 EquipSchemaSlot = "artifact3"
	EquipSchemaSlotUtility1  EquipSchemaSlot = "utility1"
	EquipSchemaSlotUtility2  EquipSchemaSlot = "utility2"
)

// AllValues returns all EquipSchemaSlot values.
func (EquipSchemaSlot) AllValues() []EquipSchemaSlot {
	return []EquipSchemaSlot{
		EquipSchemaSlotWeapon,
		EquipSchemaSlotShield,
		EquipSchemaSlotHelmet,
		EquipSchemaSlotBodyArmor,
		EquipSchemaSlotLegArmor,
		EquipSchemaSlotBoots,
		EquipSchemaSlotRing1,
		EquipSchemaSlotRing2,
		EquipSchemaSlotAmulet,
		EquipSchemaSlotArtifact1,
		EquipSchemaSlotArtifact2,
		EquipSchemaSlotArtifact3,
		EquipSchemaSlotUtility1,
		EquipSchemaSlotUtility2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EquipSchemaSlot) MarshalText() ([]byte, error) {
	switch s {
	case EquipSchemaSlotWeapon:
		return []byte(s), nil
	case EquipSchemaSlotShield:
		return []byte(s), nil
	case EquipSchemaSlotHelmet:
		return []byte(s), nil
	case EquipSchemaSlotBodyArmor:
		return []byte(s), nil
	case EquipSchemaSlotLegArmor:
		return []byte(s), nil
	case EquipSchemaSlotBoots:
		return []byte(s), nil
	case EquipSchemaSlotRing1:
		return []byte(s), nil
	case EquipSchemaSlotRing2:
		return []byte(s), nil
	case EquipSchemaSlotAmulet:
		return []byte(s), nil
	case EquipSchemaSlotArtifact1:
		return []byte(s), nil
	case EquipSchemaSlotArtifact2:
		return []byte(s), nil
	case EquipSchemaSlotArtifact3:
		return []byte(s), nil
	case EquipSchemaSlotUtility1:
		return []byte(s), nil
	case EquipSchemaSlotUtility2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EquipSchemaSlot) UnmarshalText(data []byte) error {
	switch EquipSchemaSlot(data) {
	case EquipSchemaSlotWeapon:
		*s = EquipSchemaSlotWeapon
		return nil
	case EquipSchemaSlotShield:
		*s = EquipSchemaSlotShield
		return nil
	case EquipSchemaSlotHelmet:
		*s = EquipSchemaSlotHelmet
		return nil
	case EquipSchemaSlotBodyArmor:
		*s = EquipSchemaSlotBodyArmor
		return nil
	case EquipSchemaSlotLegArmor:
		*s = EquipSchemaSlotLegArmor
		return nil
	case EquipSchemaSlotBoots:
		*s = EquipSchemaSlotBoots
		return nil
	case EquipSchemaSlotRing1:
		*s = EquipSchemaSlotRing1
		return nil
	case EquipSchemaSlotRing2:
		*s = EquipSchemaSlotRing2
		return nil
	case EquipSchemaSlotAmulet:
		*s = EquipSchemaSlotAmulet
		return nil
	case EquipSchemaSlotArtifact1:
		*s = EquipSchemaSlotArtifact1
		return nil
	case EquipSchemaSlotArtifact2:
		*s = EquipSchemaSlotArtifact2
		return nil
	case EquipSchemaSlotArtifact3:
		*s = EquipSchemaSlotArtifact3
		return nil
	case EquipSchemaSlotUtility1:
		*s = EquipSchemaSlotUtility1
		return nil
	case EquipSchemaSlotUtility2:
		*s = EquipSchemaSlotUtility2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EquipmentResponseSchema
type EquipmentResponseSchema struct {
	Data EquipRequestSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *EquipmentResponseSchema) GetData() EquipRequestSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *EquipmentResponseSchema) SetData(val EquipRequestSchema) {
	s.Data = val
}

func (*EquipmentResponseSchema) actionEquipItemMyNameActionEquipPostRes()     {}
func (*EquipmentResponseSchema) actionUnequipItemMyNameActionUnequipPostRes() {}

// Ref: #/components/schemas/EventMapSchema
type EventMapSchema struct {
	// Position X of the map.
	X int `json:"x"`
	// Position Y of the map.
	Y int `json:"y"`
}

// GetX returns the value of X.
func (s *EventMapSchema) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *EventMapSchema) GetY() int {
	return s.Y
}

// SetX sets the value of X.
func (s *EventMapSchema) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *EventMapSchema) SetY(val int) {
	s.Y = val
}

// Ref: #/components/schemas/EventSchema
type EventSchema struct {
	// Name of the event.
	Name string `json:"name"`
	// Code of the event. This is the event's unique identifier (ID).
	Code string `json:"code"`
	// Map list of the event.
	Maps []EventMapSchema `json:"maps"`
	// Map skin of the event.
	Skin string `json:"skin"`
	// Duration in minutes.
	Duration int `json:"duration"`
	// Rate spawn of the event. (1/rate every minute).
	Rate int `json:"rate"`
	// Content of the event.
	Content EventSchemaContent `json:"content"`
}

// GetName returns the value of Name.
func (s *EventSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *EventSchema) GetCode() string {
	return s.Code
}

// GetMaps returns the value of Maps.
func (s *EventSchema) GetMaps() []EventMapSchema {
	return s.Maps
}

// GetSkin returns the value of Skin.
func (s *EventSchema) GetSkin() string {
	return s.Skin
}

// GetDuration returns the value of Duration.
func (s *EventSchema) GetDuration() int {
	return s.Duration
}

// GetRate returns the value of Rate.
func (s *EventSchema) GetRate() int {
	return s.Rate
}

// GetContent returns the value of Content.
func (s *EventSchema) GetContent() EventSchemaContent {
	return s.Content
}

// SetName sets the value of Name.
func (s *EventSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *EventSchema) SetCode(val string) {
	s.Code = val
}

// SetMaps sets the value of Maps.
func (s *EventSchema) SetMaps(val []EventMapSchema) {
	s.Maps = val
}

// SetSkin sets the value of Skin.
func (s *EventSchema) SetSkin(val string) {
	s.Skin = val
}

// SetDuration sets the value of Duration.
func (s *EventSchema) SetDuration(val int) {
	s.Duration = val
}

// SetRate sets the value of Rate.
func (s *EventSchema) SetRate(val int) {
	s.Rate = val
}

// SetContent sets the value of Content.
func (s *EventSchema) SetContent(val EventSchemaContent) {
	s.Content = val
}

type EventSchemaContent struct {
	// Type of the event.
	Type string `json:"type"`
	// Code content.
	Code string `json:"code"`
}

// GetType returns the value of Type.
func (s *EventSchemaContent) GetType() string {
	return s.Type
}

// GetCode returns the value of Code.
func (s *EventSchemaContent) GetCode() string {
	return s.Code
}

// SetType sets the value of Type.
func (s *EventSchemaContent) SetType(val string) {
	s.Type = val
}

// SetCode sets the value of Code.
func (s *EventSchemaContent) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/GEBuyOrderSchema
type GEBuyOrderSchema struct {
	// Order id.
	ID string `json:"id"`
	// Item quantity.
	Quantity int `json:"quantity"`
}

// GetID returns the value of ID.
func (s *GEBuyOrderSchema) GetID() string {
	return s.ID
}

// GetQuantity returns the value of Quantity.
func (s *GEBuyOrderSchema) GetQuantity() int {
	return s.Quantity
}

// SetID sets the value of ID.
func (s *GEBuyOrderSchema) SetID(val string) {
	s.ID = val
}

// SetQuantity sets the value of Quantity.
func (s *GEBuyOrderSchema) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/GECancelOrderSchema
type GECancelOrderSchema struct {
	// Order id.
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *GECancelOrderSchema) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *GECancelOrderSchema) SetID(val string) {
	s.ID = val
}

// Ref: #/components/schemas/GECreateOrderTransactionResponseSchema
type GECreateOrderTransactionResponseSchema struct {
	Data GEOrderTransactionSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *GECreateOrderTransactionResponseSchema) GetData() GEOrderTransactionSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *GECreateOrderTransactionResponseSchema) SetData(val GEOrderTransactionSchema) {
	s.Data = val
}

func (*GECreateOrderTransactionResponseSchema) actionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes() {
}

// Ref: #/components/schemas/GEOrderCreationrSchema
type GEOrderCreationrSchema struct {
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
	// Item price per unit.
	Price int `json:"price"`
}

// GetCode returns the value of Code.
func (s *GEOrderCreationrSchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *GEOrderCreationrSchema) GetQuantity() int {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *GEOrderCreationrSchema) GetPrice() int {
	return s.Price
}

// SetCode sets the value of Code.
func (s *GEOrderCreationrSchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *GEOrderCreationrSchema) SetQuantity(val int) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *GEOrderCreationrSchema) SetPrice(val int) {
	s.Price = val
}

// Ref: #/components/schemas/GEOrderReponseSchema
type GEOrderReponseSchema struct {
	Data GEOrderSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *GEOrderReponseSchema) GetData() GEOrderSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *GEOrderReponseSchema) SetData(val GEOrderSchema) {
	s.Data = val
}

func (*GEOrderReponseSchema) getGeSellOrderGrandexchangeOrdersIDGetRes() {}

// Ref: #/components/schemas/GEOrderSchema
type GEOrderSchema struct {
	// Order id.
	ID string `json:"id"`
	// Seller account name.
	Seller string `json:"seller"`
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
	// Item price per unit.
	Price int `json:"price"`
	// Order created at.
	CreatedAt time.Time `json:"created_at"`
}

// GetID returns the value of ID.
func (s *GEOrderSchema) GetID() string {
	return s.ID
}

// GetSeller returns the value of Seller.
func (s *GEOrderSchema) GetSeller() string {
	return s.Seller
}

// GetCode returns the value of Code.
func (s *GEOrderSchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *GEOrderSchema) GetQuantity() int {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *GEOrderSchema) GetPrice() int {
	return s.Price
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GEOrderSchema) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *GEOrderSchema) SetID(val string) {
	s.ID = val
}

// SetSeller sets the value of Seller.
func (s *GEOrderSchema) SetSeller(val string) {
	s.Seller = val
}

// SetCode sets the value of Code.
func (s *GEOrderSchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *GEOrderSchema) SetQuantity(val int) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *GEOrderSchema) SetPrice(val int) {
	s.Price = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GEOrderSchema) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/GEOrderTransactionSchema
type GEOrderTransactionSchema struct {
	// Cooldown details.
	Cooldown GEOrderTransactionSchemaCooldown `json:"cooldown"`
	// Order details.
	Order GEOrderTransactionSchemaOrder `json:"order"`
	// Character details.
	Character GEOrderTransactionSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *GEOrderTransactionSchema) GetCooldown() GEOrderTransactionSchemaCooldown {
	return s.Cooldown
}

// GetOrder returns the value of Order.
func (s *GEOrderTransactionSchema) GetOrder() GEOrderTransactionSchemaOrder {
	return s.Order
}

// GetCharacter returns the value of Character.
func (s *GEOrderTransactionSchema) GetCharacter() GEOrderTransactionSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *GEOrderTransactionSchema) SetCooldown(val GEOrderTransactionSchemaCooldown) {
	s.Cooldown = val
}

// SetOrder sets the value of Order.
func (s *GEOrderTransactionSchema) SetOrder(val GEOrderTransactionSchemaOrder) {
	s.Order = val
}

// SetCharacter sets the value of Character.
func (s *GEOrderTransactionSchema) SetCharacter(val GEOrderTransactionSchemaCharacter) {
	s.Character = val
}

type GEOrderTransactionSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin GEOrderTransactionSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *GEOrderTransactionSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *GEOrderTransactionSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *GEOrderTransactionSchemaCharacter) GetSkin() GEOrderTransactionSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *GEOrderTransactionSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *GEOrderTransactionSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *GEOrderTransactionSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *GEOrderTransactionSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *GEOrderTransactionSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *GEOrderTransactionSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *GEOrderTransactionSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *GEOrderTransactionSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *GEOrderTransactionSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *GEOrderTransactionSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *GEOrderTransactionSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *GEOrderTransactionSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *GEOrderTransactionSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *GEOrderTransactionSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *GEOrderTransactionSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *GEOrderTransactionSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *GEOrderTransactionSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *GEOrderTransactionSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *GEOrderTransactionSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *GEOrderTransactionSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *GEOrderTransactionSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *GEOrderTransactionSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *GEOrderTransactionSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *GEOrderTransactionSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *GEOrderTransactionSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *GEOrderTransactionSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *GEOrderTransactionSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *GEOrderTransactionSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *GEOrderTransactionSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *GEOrderTransactionSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *GEOrderTransactionSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *GEOrderTransactionSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *GEOrderTransactionSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *GEOrderTransactionSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *GEOrderTransactionSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *GEOrderTransactionSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *GEOrderTransactionSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *GEOrderTransactionSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *GEOrderTransactionSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *GEOrderTransactionSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *GEOrderTransactionSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *GEOrderTransactionSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *GEOrderTransactionSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *GEOrderTransactionSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *GEOrderTransactionSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *GEOrderTransactionSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *GEOrderTransactionSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *GEOrderTransactionSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *GEOrderTransactionSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *GEOrderTransactionSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *GEOrderTransactionSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *GEOrderTransactionSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *GEOrderTransactionSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *GEOrderTransactionSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *GEOrderTransactionSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *GEOrderTransactionSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *GEOrderTransactionSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *GEOrderTransactionSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *GEOrderTransactionSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *GEOrderTransactionSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *GEOrderTransactionSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *GEOrderTransactionSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *GEOrderTransactionSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *GEOrderTransactionSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *GEOrderTransactionSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *GEOrderTransactionSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *GEOrderTransactionSchemaCharacter) SetSkin(val GEOrderTransactionSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *GEOrderTransactionSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *GEOrderTransactionSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *GEOrderTransactionSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *GEOrderTransactionSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *GEOrderTransactionSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *GEOrderTransactionSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *GEOrderTransactionSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *GEOrderTransactionSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *GEOrderTransactionSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *GEOrderTransactionSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *GEOrderTransactionSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *GEOrderTransactionSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *GEOrderTransactionSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *GEOrderTransactionSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *GEOrderTransactionSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *GEOrderTransactionSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *GEOrderTransactionSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *GEOrderTransactionSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *GEOrderTransactionSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *GEOrderTransactionSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *GEOrderTransactionSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *GEOrderTransactionSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *GEOrderTransactionSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *GEOrderTransactionSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *GEOrderTransactionSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *GEOrderTransactionSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *GEOrderTransactionSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *GEOrderTransactionSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *GEOrderTransactionSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *GEOrderTransactionSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *GEOrderTransactionSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *GEOrderTransactionSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *GEOrderTransactionSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *GEOrderTransactionSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *GEOrderTransactionSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *GEOrderTransactionSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *GEOrderTransactionSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *GEOrderTransactionSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *GEOrderTransactionSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *GEOrderTransactionSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *GEOrderTransactionSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *GEOrderTransactionSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *GEOrderTransactionSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *GEOrderTransactionSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *GEOrderTransactionSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *GEOrderTransactionSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *GEOrderTransactionSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *GEOrderTransactionSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *GEOrderTransactionSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *GEOrderTransactionSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *GEOrderTransactionSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *GEOrderTransactionSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *GEOrderTransactionSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *GEOrderTransactionSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *GEOrderTransactionSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *GEOrderTransactionSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *GEOrderTransactionSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *GEOrderTransactionSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *GEOrderTransactionSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *GEOrderTransactionSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *GEOrderTransactionSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *GEOrderTransactionSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *GEOrderTransactionSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *GEOrderTransactionSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type GEOrderTransactionSchemaCharacterSkin string

const (
	GEOrderTransactionSchemaCharacterSkinMen1   GEOrderTransactionSchemaCharacterSkin = "men1"
	GEOrderTransactionSchemaCharacterSkinMen2   GEOrderTransactionSchemaCharacterSkin = "men2"
	GEOrderTransactionSchemaCharacterSkinMen3   GEOrderTransactionSchemaCharacterSkin = "men3"
	GEOrderTransactionSchemaCharacterSkinWomen1 GEOrderTransactionSchemaCharacterSkin = "women1"
	GEOrderTransactionSchemaCharacterSkinWomen2 GEOrderTransactionSchemaCharacterSkin = "women2"
	GEOrderTransactionSchemaCharacterSkinWomen3 GEOrderTransactionSchemaCharacterSkin = "women3"
)

// AllValues returns all GEOrderTransactionSchemaCharacterSkin values.
func (GEOrderTransactionSchemaCharacterSkin) AllValues() []GEOrderTransactionSchemaCharacterSkin {
	return []GEOrderTransactionSchemaCharacterSkin{
		GEOrderTransactionSchemaCharacterSkinMen1,
		GEOrderTransactionSchemaCharacterSkinMen2,
		GEOrderTransactionSchemaCharacterSkinMen3,
		GEOrderTransactionSchemaCharacterSkinWomen1,
		GEOrderTransactionSchemaCharacterSkinWomen2,
		GEOrderTransactionSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GEOrderTransactionSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case GEOrderTransactionSchemaCharacterSkinMen1:
		return []byte(s), nil
	case GEOrderTransactionSchemaCharacterSkinMen2:
		return []byte(s), nil
	case GEOrderTransactionSchemaCharacterSkinMen3:
		return []byte(s), nil
	case GEOrderTransactionSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case GEOrderTransactionSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case GEOrderTransactionSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GEOrderTransactionSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch GEOrderTransactionSchemaCharacterSkin(data) {
	case GEOrderTransactionSchemaCharacterSkinMen1:
		*s = GEOrderTransactionSchemaCharacterSkinMen1
		return nil
	case GEOrderTransactionSchemaCharacterSkinMen2:
		*s = GEOrderTransactionSchemaCharacterSkinMen2
		return nil
	case GEOrderTransactionSchemaCharacterSkinMen3:
		*s = GEOrderTransactionSchemaCharacterSkinMen3
		return nil
	case GEOrderTransactionSchemaCharacterSkinWomen1:
		*s = GEOrderTransactionSchemaCharacterSkinWomen1
		return nil
	case GEOrderTransactionSchemaCharacterSkinWomen2:
		*s = GEOrderTransactionSchemaCharacterSkinWomen2
		return nil
	case GEOrderTransactionSchemaCharacterSkinWomen3:
		*s = GEOrderTransactionSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GEOrderTransactionSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason GEOrderTransactionSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *GEOrderTransactionSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *GEOrderTransactionSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *GEOrderTransactionSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *GEOrderTransactionSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *GEOrderTransactionSchemaCooldown) GetReason() GEOrderTransactionSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *GEOrderTransactionSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *GEOrderTransactionSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *GEOrderTransactionSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *GEOrderTransactionSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *GEOrderTransactionSchemaCooldown) SetReason(val GEOrderTransactionSchemaCooldownReason) {
	s.Reason = val
}

type GEOrderTransactionSchemaCooldownReason string

const (
	GEOrderTransactionSchemaCooldownReasonMovement         GEOrderTransactionSchemaCooldownReason = "movement"
	GEOrderTransactionSchemaCooldownReasonFight            GEOrderTransactionSchemaCooldownReason = "fight"
	GEOrderTransactionSchemaCooldownReasonCrafting         GEOrderTransactionSchemaCooldownReason = "crafting"
	GEOrderTransactionSchemaCooldownReasonGathering        GEOrderTransactionSchemaCooldownReason = "gathering"
	GEOrderTransactionSchemaCooldownReasonBuyGe            GEOrderTransactionSchemaCooldownReason = "buy_ge"
	GEOrderTransactionSchemaCooldownReasonSellGe           GEOrderTransactionSchemaCooldownReason = "sell_ge"
	GEOrderTransactionSchemaCooldownReasonCancelGe         GEOrderTransactionSchemaCooldownReason = "cancel_ge"
	GEOrderTransactionSchemaCooldownReasonDeleteItem       GEOrderTransactionSchemaCooldownReason = "delete_item"
	GEOrderTransactionSchemaCooldownReasonDeposit          GEOrderTransactionSchemaCooldownReason = "deposit"
	GEOrderTransactionSchemaCooldownReasonWithdraw         GEOrderTransactionSchemaCooldownReason = "withdraw"
	GEOrderTransactionSchemaCooldownReasonDepositGold      GEOrderTransactionSchemaCooldownReason = "deposit_gold"
	GEOrderTransactionSchemaCooldownReasonWithdrawGold     GEOrderTransactionSchemaCooldownReason = "withdraw_gold"
	GEOrderTransactionSchemaCooldownReasonEquip            GEOrderTransactionSchemaCooldownReason = "equip"
	GEOrderTransactionSchemaCooldownReasonUnequip          GEOrderTransactionSchemaCooldownReason = "unequip"
	GEOrderTransactionSchemaCooldownReasonTask             GEOrderTransactionSchemaCooldownReason = "task"
	GEOrderTransactionSchemaCooldownReasonRecycling        GEOrderTransactionSchemaCooldownReason = "recycling"
	GEOrderTransactionSchemaCooldownReasonRest             GEOrderTransactionSchemaCooldownReason = "rest"
	GEOrderTransactionSchemaCooldownReasonUse              GEOrderTransactionSchemaCooldownReason = "use"
	GEOrderTransactionSchemaCooldownReasonBuyBankExpansion GEOrderTransactionSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all GEOrderTransactionSchemaCooldownReason values.
func (GEOrderTransactionSchemaCooldownReason) AllValues() []GEOrderTransactionSchemaCooldownReason {
	return []GEOrderTransactionSchemaCooldownReason{
		GEOrderTransactionSchemaCooldownReasonMovement,
		GEOrderTransactionSchemaCooldownReasonFight,
		GEOrderTransactionSchemaCooldownReasonCrafting,
		GEOrderTransactionSchemaCooldownReasonGathering,
		GEOrderTransactionSchemaCooldownReasonBuyGe,
		GEOrderTransactionSchemaCooldownReasonSellGe,
		GEOrderTransactionSchemaCooldownReasonCancelGe,
		GEOrderTransactionSchemaCooldownReasonDeleteItem,
		GEOrderTransactionSchemaCooldownReasonDeposit,
		GEOrderTransactionSchemaCooldownReasonWithdraw,
		GEOrderTransactionSchemaCooldownReasonDepositGold,
		GEOrderTransactionSchemaCooldownReasonWithdrawGold,
		GEOrderTransactionSchemaCooldownReasonEquip,
		GEOrderTransactionSchemaCooldownReasonUnequip,
		GEOrderTransactionSchemaCooldownReasonTask,
		GEOrderTransactionSchemaCooldownReasonRecycling,
		GEOrderTransactionSchemaCooldownReasonRest,
		GEOrderTransactionSchemaCooldownReasonUse,
		GEOrderTransactionSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GEOrderTransactionSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case GEOrderTransactionSchemaCooldownReasonMovement:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonFight:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonGathering:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonEquip:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonTask:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonRest:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonUse:
		return []byte(s), nil
	case GEOrderTransactionSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GEOrderTransactionSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch GEOrderTransactionSchemaCooldownReason(data) {
	case GEOrderTransactionSchemaCooldownReasonMovement:
		*s = GEOrderTransactionSchemaCooldownReasonMovement
		return nil
	case GEOrderTransactionSchemaCooldownReasonFight:
		*s = GEOrderTransactionSchemaCooldownReasonFight
		return nil
	case GEOrderTransactionSchemaCooldownReasonCrafting:
		*s = GEOrderTransactionSchemaCooldownReasonCrafting
		return nil
	case GEOrderTransactionSchemaCooldownReasonGathering:
		*s = GEOrderTransactionSchemaCooldownReasonGathering
		return nil
	case GEOrderTransactionSchemaCooldownReasonBuyGe:
		*s = GEOrderTransactionSchemaCooldownReasonBuyGe
		return nil
	case GEOrderTransactionSchemaCooldownReasonSellGe:
		*s = GEOrderTransactionSchemaCooldownReasonSellGe
		return nil
	case GEOrderTransactionSchemaCooldownReasonCancelGe:
		*s = GEOrderTransactionSchemaCooldownReasonCancelGe
		return nil
	case GEOrderTransactionSchemaCooldownReasonDeleteItem:
		*s = GEOrderTransactionSchemaCooldownReasonDeleteItem
		return nil
	case GEOrderTransactionSchemaCooldownReasonDeposit:
		*s = GEOrderTransactionSchemaCooldownReasonDeposit
		return nil
	case GEOrderTransactionSchemaCooldownReasonWithdraw:
		*s = GEOrderTransactionSchemaCooldownReasonWithdraw
		return nil
	case GEOrderTransactionSchemaCooldownReasonDepositGold:
		*s = GEOrderTransactionSchemaCooldownReasonDepositGold
		return nil
	case GEOrderTransactionSchemaCooldownReasonWithdrawGold:
		*s = GEOrderTransactionSchemaCooldownReasonWithdrawGold
		return nil
	case GEOrderTransactionSchemaCooldownReasonEquip:
		*s = GEOrderTransactionSchemaCooldownReasonEquip
		return nil
	case GEOrderTransactionSchemaCooldownReasonUnequip:
		*s = GEOrderTransactionSchemaCooldownReasonUnequip
		return nil
	case GEOrderTransactionSchemaCooldownReasonTask:
		*s = GEOrderTransactionSchemaCooldownReasonTask
		return nil
	case GEOrderTransactionSchemaCooldownReasonRecycling:
		*s = GEOrderTransactionSchemaCooldownReasonRecycling
		return nil
	case GEOrderTransactionSchemaCooldownReasonRest:
		*s = GEOrderTransactionSchemaCooldownReasonRest
		return nil
	case GEOrderTransactionSchemaCooldownReasonUse:
		*s = GEOrderTransactionSchemaCooldownReasonUse
		return nil
	case GEOrderTransactionSchemaCooldownReasonBuyBankExpansion:
		*s = GEOrderTransactionSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GEOrderTransactionSchemaOrder struct {
	// Order id.
	ID string `json:"id"`
	// Order created at.
	CreatedAt time.Time `json:"created_at"`
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
	// Item price per unit.
	Price int `json:"price"`
	// Total price.
	TotalPrice int `json:"total_price"`
	// Order creation tax (5%, minimum 1).
	Tax int `json:"tax"`
}

// GetID returns the value of ID.
func (s *GEOrderTransactionSchemaOrder) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GEOrderTransactionSchemaOrder) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCode returns the value of Code.
func (s *GEOrderTransactionSchemaOrder) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *GEOrderTransactionSchemaOrder) GetQuantity() int {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *GEOrderTransactionSchemaOrder) GetPrice() int {
	return s.Price
}

// GetTotalPrice returns the value of TotalPrice.
func (s *GEOrderTransactionSchemaOrder) GetTotalPrice() int {
	return s.TotalPrice
}

// GetTax returns the value of Tax.
func (s *GEOrderTransactionSchemaOrder) GetTax() int {
	return s.Tax
}

// SetID sets the value of ID.
func (s *GEOrderTransactionSchemaOrder) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GEOrderTransactionSchemaOrder) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCode sets the value of Code.
func (s *GEOrderTransactionSchemaOrder) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *GEOrderTransactionSchemaOrder) SetQuantity(val int) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *GEOrderTransactionSchemaOrder) SetPrice(val int) {
	s.Price = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *GEOrderTransactionSchemaOrder) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetTax sets the value of Tax.
func (s *GEOrderTransactionSchemaOrder) SetTax(val int) {
	s.Tax = val
}

// Ref: #/components/schemas/GETransactionListSchema
type GETransactionListSchema struct {
	// Cooldown details.
	Cooldown GETransactionListSchemaCooldown `json:"cooldown"`
	// Transaction details.
	Order GETransactionListSchemaOrder `json:"order"`
	// Character details.
	Character GETransactionListSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *GETransactionListSchema) GetCooldown() GETransactionListSchemaCooldown {
	return s.Cooldown
}

// GetOrder returns the value of Order.
func (s *GETransactionListSchema) GetOrder() GETransactionListSchemaOrder {
	return s.Order
}

// GetCharacter returns the value of Character.
func (s *GETransactionListSchema) GetCharacter() GETransactionListSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *GETransactionListSchema) SetCooldown(val GETransactionListSchemaCooldown) {
	s.Cooldown = val
}

// SetOrder sets the value of Order.
func (s *GETransactionListSchema) SetOrder(val GETransactionListSchemaOrder) {
	s.Order = val
}

// SetCharacter sets the value of Character.
func (s *GETransactionListSchema) SetCharacter(val GETransactionListSchemaCharacter) {
	s.Character = val
}

type GETransactionListSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin GETransactionListSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *GETransactionListSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *GETransactionListSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *GETransactionListSchemaCharacter) GetSkin() GETransactionListSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *GETransactionListSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *GETransactionListSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *GETransactionListSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *GETransactionListSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *GETransactionListSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *GETransactionListSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *GETransactionListSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *GETransactionListSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *GETransactionListSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *GETransactionListSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *GETransactionListSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *GETransactionListSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *GETransactionListSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *GETransactionListSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *GETransactionListSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *GETransactionListSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *GETransactionListSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *GETransactionListSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *GETransactionListSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *GETransactionListSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *GETransactionListSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *GETransactionListSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *GETransactionListSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *GETransactionListSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *GETransactionListSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *GETransactionListSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *GETransactionListSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *GETransactionListSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *GETransactionListSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *GETransactionListSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *GETransactionListSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *GETransactionListSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *GETransactionListSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *GETransactionListSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *GETransactionListSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *GETransactionListSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *GETransactionListSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *GETransactionListSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *GETransactionListSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *GETransactionListSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *GETransactionListSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *GETransactionListSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *GETransactionListSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *GETransactionListSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *GETransactionListSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *GETransactionListSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *GETransactionListSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *GETransactionListSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *GETransactionListSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *GETransactionListSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *GETransactionListSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *GETransactionListSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *GETransactionListSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *GETransactionListSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *GETransactionListSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *GETransactionListSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *GETransactionListSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *GETransactionListSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *GETransactionListSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *GETransactionListSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *GETransactionListSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *GETransactionListSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *GETransactionListSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *GETransactionListSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *GETransactionListSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *GETransactionListSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *GETransactionListSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *GETransactionListSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *GETransactionListSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *GETransactionListSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *GETransactionListSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *GETransactionListSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *GETransactionListSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *GETransactionListSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *GETransactionListSchemaCharacter) SetSkin(val GETransactionListSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *GETransactionListSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *GETransactionListSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *GETransactionListSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *GETransactionListSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *GETransactionListSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *GETransactionListSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *GETransactionListSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *GETransactionListSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *GETransactionListSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *GETransactionListSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *GETransactionListSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *GETransactionListSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *GETransactionListSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *GETransactionListSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *GETransactionListSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *GETransactionListSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *GETransactionListSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *GETransactionListSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *GETransactionListSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *GETransactionListSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *GETransactionListSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *GETransactionListSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *GETransactionListSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *GETransactionListSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *GETransactionListSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *GETransactionListSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *GETransactionListSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *GETransactionListSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *GETransactionListSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *GETransactionListSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *GETransactionListSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *GETransactionListSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *GETransactionListSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *GETransactionListSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *GETransactionListSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *GETransactionListSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *GETransactionListSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *GETransactionListSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *GETransactionListSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *GETransactionListSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *GETransactionListSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *GETransactionListSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *GETransactionListSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *GETransactionListSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *GETransactionListSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *GETransactionListSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *GETransactionListSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *GETransactionListSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *GETransactionListSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *GETransactionListSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *GETransactionListSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *GETransactionListSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *GETransactionListSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *GETransactionListSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *GETransactionListSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *GETransactionListSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *GETransactionListSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *GETransactionListSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *GETransactionListSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *GETransactionListSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *GETransactionListSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *GETransactionListSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *GETransactionListSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *GETransactionListSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *GETransactionListSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *GETransactionListSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *GETransactionListSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *GETransactionListSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *GETransactionListSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *GETransactionListSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *GETransactionListSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *GETransactionListSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type GETransactionListSchemaCharacterSkin string

const (
	GETransactionListSchemaCharacterSkinMen1   GETransactionListSchemaCharacterSkin = "men1"
	GETransactionListSchemaCharacterSkinMen2   GETransactionListSchemaCharacterSkin = "men2"
	GETransactionListSchemaCharacterSkinMen3   GETransactionListSchemaCharacterSkin = "men3"
	GETransactionListSchemaCharacterSkinWomen1 GETransactionListSchemaCharacterSkin = "women1"
	GETransactionListSchemaCharacterSkinWomen2 GETransactionListSchemaCharacterSkin = "women2"
	GETransactionListSchemaCharacterSkinWomen3 GETransactionListSchemaCharacterSkin = "women3"
)

// AllValues returns all GETransactionListSchemaCharacterSkin values.
func (GETransactionListSchemaCharacterSkin) AllValues() []GETransactionListSchemaCharacterSkin {
	return []GETransactionListSchemaCharacterSkin{
		GETransactionListSchemaCharacterSkinMen1,
		GETransactionListSchemaCharacterSkinMen2,
		GETransactionListSchemaCharacterSkinMen3,
		GETransactionListSchemaCharacterSkinWomen1,
		GETransactionListSchemaCharacterSkinWomen2,
		GETransactionListSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GETransactionListSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case GETransactionListSchemaCharacterSkinMen1:
		return []byte(s), nil
	case GETransactionListSchemaCharacterSkinMen2:
		return []byte(s), nil
	case GETransactionListSchemaCharacterSkinMen3:
		return []byte(s), nil
	case GETransactionListSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case GETransactionListSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case GETransactionListSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GETransactionListSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch GETransactionListSchemaCharacterSkin(data) {
	case GETransactionListSchemaCharacterSkinMen1:
		*s = GETransactionListSchemaCharacterSkinMen1
		return nil
	case GETransactionListSchemaCharacterSkinMen2:
		*s = GETransactionListSchemaCharacterSkinMen2
		return nil
	case GETransactionListSchemaCharacterSkinMen3:
		*s = GETransactionListSchemaCharacterSkinMen3
		return nil
	case GETransactionListSchemaCharacterSkinWomen1:
		*s = GETransactionListSchemaCharacterSkinWomen1
		return nil
	case GETransactionListSchemaCharacterSkinWomen2:
		*s = GETransactionListSchemaCharacterSkinWomen2
		return nil
	case GETransactionListSchemaCharacterSkinWomen3:
		*s = GETransactionListSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GETransactionListSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason GETransactionListSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *GETransactionListSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *GETransactionListSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *GETransactionListSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *GETransactionListSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *GETransactionListSchemaCooldown) GetReason() GETransactionListSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *GETransactionListSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *GETransactionListSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *GETransactionListSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *GETransactionListSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *GETransactionListSchemaCooldown) SetReason(val GETransactionListSchemaCooldownReason) {
	s.Reason = val
}

type GETransactionListSchemaCooldownReason string

const (
	GETransactionListSchemaCooldownReasonMovement         GETransactionListSchemaCooldownReason = "movement"
	GETransactionListSchemaCooldownReasonFight            GETransactionListSchemaCooldownReason = "fight"
	GETransactionListSchemaCooldownReasonCrafting         GETransactionListSchemaCooldownReason = "crafting"
	GETransactionListSchemaCooldownReasonGathering        GETransactionListSchemaCooldownReason = "gathering"
	GETransactionListSchemaCooldownReasonBuyGe            GETransactionListSchemaCooldownReason = "buy_ge"
	GETransactionListSchemaCooldownReasonSellGe           GETransactionListSchemaCooldownReason = "sell_ge"
	GETransactionListSchemaCooldownReasonCancelGe         GETransactionListSchemaCooldownReason = "cancel_ge"
	GETransactionListSchemaCooldownReasonDeleteItem       GETransactionListSchemaCooldownReason = "delete_item"
	GETransactionListSchemaCooldownReasonDeposit          GETransactionListSchemaCooldownReason = "deposit"
	GETransactionListSchemaCooldownReasonWithdraw         GETransactionListSchemaCooldownReason = "withdraw"
	GETransactionListSchemaCooldownReasonDepositGold      GETransactionListSchemaCooldownReason = "deposit_gold"
	GETransactionListSchemaCooldownReasonWithdrawGold     GETransactionListSchemaCooldownReason = "withdraw_gold"
	GETransactionListSchemaCooldownReasonEquip            GETransactionListSchemaCooldownReason = "equip"
	GETransactionListSchemaCooldownReasonUnequip          GETransactionListSchemaCooldownReason = "unequip"
	GETransactionListSchemaCooldownReasonTask             GETransactionListSchemaCooldownReason = "task"
	GETransactionListSchemaCooldownReasonRecycling        GETransactionListSchemaCooldownReason = "recycling"
	GETransactionListSchemaCooldownReasonRest             GETransactionListSchemaCooldownReason = "rest"
	GETransactionListSchemaCooldownReasonUse              GETransactionListSchemaCooldownReason = "use"
	GETransactionListSchemaCooldownReasonBuyBankExpansion GETransactionListSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all GETransactionListSchemaCooldownReason values.
func (GETransactionListSchemaCooldownReason) AllValues() []GETransactionListSchemaCooldownReason {
	return []GETransactionListSchemaCooldownReason{
		GETransactionListSchemaCooldownReasonMovement,
		GETransactionListSchemaCooldownReasonFight,
		GETransactionListSchemaCooldownReasonCrafting,
		GETransactionListSchemaCooldownReasonGathering,
		GETransactionListSchemaCooldownReasonBuyGe,
		GETransactionListSchemaCooldownReasonSellGe,
		GETransactionListSchemaCooldownReasonCancelGe,
		GETransactionListSchemaCooldownReasonDeleteItem,
		GETransactionListSchemaCooldownReasonDeposit,
		GETransactionListSchemaCooldownReasonWithdraw,
		GETransactionListSchemaCooldownReasonDepositGold,
		GETransactionListSchemaCooldownReasonWithdrawGold,
		GETransactionListSchemaCooldownReasonEquip,
		GETransactionListSchemaCooldownReasonUnequip,
		GETransactionListSchemaCooldownReasonTask,
		GETransactionListSchemaCooldownReasonRecycling,
		GETransactionListSchemaCooldownReasonRest,
		GETransactionListSchemaCooldownReasonUse,
		GETransactionListSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GETransactionListSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case GETransactionListSchemaCooldownReasonMovement:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonFight:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonGathering:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonEquip:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonTask:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonRest:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonUse:
		return []byte(s), nil
	case GETransactionListSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GETransactionListSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch GETransactionListSchemaCooldownReason(data) {
	case GETransactionListSchemaCooldownReasonMovement:
		*s = GETransactionListSchemaCooldownReasonMovement
		return nil
	case GETransactionListSchemaCooldownReasonFight:
		*s = GETransactionListSchemaCooldownReasonFight
		return nil
	case GETransactionListSchemaCooldownReasonCrafting:
		*s = GETransactionListSchemaCooldownReasonCrafting
		return nil
	case GETransactionListSchemaCooldownReasonGathering:
		*s = GETransactionListSchemaCooldownReasonGathering
		return nil
	case GETransactionListSchemaCooldownReasonBuyGe:
		*s = GETransactionListSchemaCooldownReasonBuyGe
		return nil
	case GETransactionListSchemaCooldownReasonSellGe:
		*s = GETransactionListSchemaCooldownReasonSellGe
		return nil
	case GETransactionListSchemaCooldownReasonCancelGe:
		*s = GETransactionListSchemaCooldownReasonCancelGe
		return nil
	case GETransactionListSchemaCooldownReasonDeleteItem:
		*s = GETransactionListSchemaCooldownReasonDeleteItem
		return nil
	case GETransactionListSchemaCooldownReasonDeposit:
		*s = GETransactionListSchemaCooldownReasonDeposit
		return nil
	case GETransactionListSchemaCooldownReasonWithdraw:
		*s = GETransactionListSchemaCooldownReasonWithdraw
		return nil
	case GETransactionListSchemaCooldownReasonDepositGold:
		*s = GETransactionListSchemaCooldownReasonDepositGold
		return nil
	case GETransactionListSchemaCooldownReasonWithdrawGold:
		*s = GETransactionListSchemaCooldownReasonWithdrawGold
		return nil
	case GETransactionListSchemaCooldownReasonEquip:
		*s = GETransactionListSchemaCooldownReasonEquip
		return nil
	case GETransactionListSchemaCooldownReasonUnequip:
		*s = GETransactionListSchemaCooldownReasonUnequip
		return nil
	case GETransactionListSchemaCooldownReasonTask:
		*s = GETransactionListSchemaCooldownReasonTask
		return nil
	case GETransactionListSchemaCooldownReasonRecycling:
		*s = GETransactionListSchemaCooldownReasonRecycling
		return nil
	case GETransactionListSchemaCooldownReasonRest:
		*s = GETransactionListSchemaCooldownReasonRest
		return nil
	case GETransactionListSchemaCooldownReasonUse:
		*s = GETransactionListSchemaCooldownReasonUse
		return nil
	case GETransactionListSchemaCooldownReasonBuyBankExpansion:
		*s = GETransactionListSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GETransactionListSchemaOrder struct {
	// Order id.
	ID string `json:"id"`
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
	// Item price.
	Price int `json:"price"`
	// Total price of the transaction.
	TotalPrice int `json:"total_price"`
}

// GetID returns the value of ID.
func (s *GETransactionListSchemaOrder) GetID() string {
	return s.ID
}

// GetCode returns the value of Code.
func (s *GETransactionListSchemaOrder) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *GETransactionListSchemaOrder) GetQuantity() int {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *GETransactionListSchemaOrder) GetPrice() int {
	return s.Price
}

// GetTotalPrice returns the value of TotalPrice.
func (s *GETransactionListSchemaOrder) GetTotalPrice() int {
	return s.TotalPrice
}

// SetID sets the value of ID.
func (s *GETransactionListSchemaOrder) SetID(val string) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *GETransactionListSchemaOrder) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *GETransactionListSchemaOrder) SetQuantity(val int) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *GETransactionListSchemaOrder) SetPrice(val int) {
	s.Price = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *GETransactionListSchemaOrder) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// Ref: #/components/schemas/GETransactionResponseSchema
type GETransactionResponseSchema struct {
	Data GETransactionListSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *GETransactionResponseSchema) GetData() GETransactionListSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *GETransactionResponseSchema) SetData(val GETransactionListSchema) {
	s.Data = val
}

func (*GETransactionResponseSchema) actionGeBuyItemMyNameActionGrandexchangeBuyPostRes()            {}
func (*GETransactionResponseSchema) actionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes() {}

// Ref: #/components/schemas/GeOrderHistorySchema
type GeOrderHistorySchema struct {
	// Order id.
	OrderID string `json:"order_id"`
	// Seller account name.
	Seller string `json:"seller"`
	// Buyer account name.
	Buyer string `json:"buyer"`
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
	// Item price per unit.
	Price int `json:"price"`
	// Sale datetime.
	SoldAt time.Time `json:"sold_at"`
}

// GetOrderID returns the value of OrderID.
func (s *GeOrderHistorySchema) GetOrderID() string {
	return s.OrderID
}

// GetSeller returns the value of Seller.
func (s *GeOrderHistorySchema) GetSeller() string {
	return s.Seller
}

// GetBuyer returns the value of Buyer.
func (s *GeOrderHistorySchema) GetBuyer() string {
	return s.Buyer
}

// GetCode returns the value of Code.
func (s *GeOrderHistorySchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *GeOrderHistorySchema) GetQuantity() int {
	return s.Quantity
}

// GetPrice returns the value of Price.
func (s *GeOrderHistorySchema) GetPrice() int {
	return s.Price
}

// GetSoldAt returns the value of SoldAt.
func (s *GeOrderHistorySchema) GetSoldAt() time.Time {
	return s.SoldAt
}

// SetOrderID sets the value of OrderID.
func (s *GeOrderHistorySchema) SetOrderID(val string) {
	s.OrderID = val
}

// SetSeller sets the value of Seller.
func (s *GeOrderHistorySchema) SetSeller(val string) {
	s.Seller = val
}

// SetBuyer sets the value of Buyer.
func (s *GeOrderHistorySchema) SetBuyer(val string) {
	s.Buyer = val
}

// SetCode sets the value of Code.
func (s *GeOrderHistorySchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *GeOrderHistorySchema) SetQuantity(val int) {
	s.Quantity = val
}

// SetPrice sets the value of Price.
func (s *GeOrderHistorySchema) SetPrice(val int) {
	s.Price = val
}

// SetSoldAt sets the value of SoldAt.
func (s *GeOrderHistorySchema) SetSoldAt(val time.Time) {
	s.SoldAt = val
}

// GenerateTokenTokenPostCode455 is response for GenerateTokenTokenPost operation.
type GenerateTokenTokenPostCode455 struct{}

func (*GenerateTokenTokenPostCode455) generateTokenTokenPostRes() {}

// GetAccountAccountsAccountGetNotFound is response for GetAccountAccountsAccountGet operation.
type GetAccountAccountsAccountGetNotFound struct{}

func (*GetAccountAccountsAccountGetNotFound) getAccountAccountsAccountGetRes() {}

// GetAccountAchievementsAccountsAccountAchievementsGetNotFound is response for GetAccountAchievementsAccountsAccountAchievementsGet operation.
type GetAccountAchievementsAccountsAccountAchievementsGetNotFound struct{}

func (*GetAccountAchievementsAccountsAccountAchievementsGetNotFound) getAccountAchievementsAccountsAccountAchievementsGetRes() {
}

type GetAccountAchievementsAccountsAccountAchievementsGetType string

const (
	GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatKill  GetAccountAchievementsAccountsAccountAchievementsGetType = "combat_kill"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatDrop  GetAccountAchievementsAccountsAccountAchievementsGetType = "combat_drop"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatLevel GetAccountAchievementsAccountsAccountAchievementsGetType = "combat_level"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeGathering   GetAccountAchievementsAccountsAccountAchievementsGetType = "gathering"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeCrafting    GetAccountAchievementsAccountsAccountAchievementsGetType = "crafting"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeRecycling   GetAccountAchievementsAccountsAccountAchievementsGetType = "recycling"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeTask        GetAccountAchievementsAccountsAccountAchievementsGetType = "task"
	GetAccountAchievementsAccountsAccountAchievementsGetTypeOther       GetAccountAchievementsAccountsAccountAchievementsGetType = "other"
)

// AllValues returns all GetAccountAchievementsAccountsAccountAchievementsGetType values.
func (GetAccountAchievementsAccountsAccountAchievementsGetType) AllValues() []GetAccountAchievementsAccountsAccountAchievementsGetType {
	return []GetAccountAchievementsAccountsAccountAchievementsGetType{
		GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatKill,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatDrop,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatLevel,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeGathering,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeCrafting,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeRecycling,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeTask,
		GetAccountAchievementsAccountsAccountAchievementsGetTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountAchievementsAccountsAccountAchievementsGetType) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatKill:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatDrop:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatLevel:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeGathering:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCrafting:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeRecycling:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeTask:
		return []byte(s), nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountAchievementsAccountsAccountAchievementsGetType) UnmarshalText(data []byte) error {
	switch GetAccountAchievementsAccountsAccountAchievementsGetType(data) {
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatKill:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatKill
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatDrop:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatDrop
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatLevel:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeCombatLevel
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeGathering:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeGathering
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeCrafting:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeCrafting
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeRecycling:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeRecycling
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeTask:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeTask
		return nil
	case GetAccountAchievementsAccountsAccountAchievementsGetTypeOther:
		*s = GetAccountAchievementsAccountsAccountAchievementsGetTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetAchievementAchievementsCodeGetNotFound is response for GetAchievementAchievementsCodeGet operation.
type GetAchievementAchievementsCodeGetNotFound struct{}

func (*GetAchievementAchievementsCodeGetNotFound) getAchievementAchievementsCodeGetRes() {}

type GetAllAchievementsAchievementsGetType string

const (
	GetAllAchievementsAchievementsGetTypeCombatKill  GetAllAchievementsAchievementsGetType = "combat_kill"
	GetAllAchievementsAchievementsGetTypeCombatDrop  GetAllAchievementsAchievementsGetType = "combat_drop"
	GetAllAchievementsAchievementsGetTypeCombatLevel GetAllAchievementsAchievementsGetType = "combat_level"
	GetAllAchievementsAchievementsGetTypeGathering   GetAllAchievementsAchievementsGetType = "gathering"
	GetAllAchievementsAchievementsGetTypeCrafting    GetAllAchievementsAchievementsGetType = "crafting"
	GetAllAchievementsAchievementsGetTypeRecycling   GetAllAchievementsAchievementsGetType = "recycling"
	GetAllAchievementsAchievementsGetTypeTask        GetAllAchievementsAchievementsGetType = "task"
	GetAllAchievementsAchievementsGetTypeOther       GetAllAchievementsAchievementsGetType = "other"
)

// AllValues returns all GetAllAchievementsAchievementsGetType values.
func (GetAllAchievementsAchievementsGetType) AllValues() []GetAllAchievementsAchievementsGetType {
	return []GetAllAchievementsAchievementsGetType{
		GetAllAchievementsAchievementsGetTypeCombatKill,
		GetAllAchievementsAchievementsGetTypeCombatDrop,
		GetAllAchievementsAchievementsGetTypeCombatLevel,
		GetAllAchievementsAchievementsGetTypeGathering,
		GetAllAchievementsAchievementsGetTypeCrafting,
		GetAllAchievementsAchievementsGetTypeRecycling,
		GetAllAchievementsAchievementsGetTypeTask,
		GetAllAchievementsAchievementsGetTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllAchievementsAchievementsGetType) MarshalText() ([]byte, error) {
	switch s {
	case GetAllAchievementsAchievementsGetTypeCombatKill:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeCombatDrop:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeCombatLevel:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeGathering:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeCrafting:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeRecycling:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeTask:
		return []byte(s), nil
	case GetAllAchievementsAchievementsGetTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllAchievementsAchievementsGetType) UnmarshalText(data []byte) error {
	switch GetAllAchievementsAchievementsGetType(data) {
	case GetAllAchievementsAchievementsGetTypeCombatKill:
		*s = GetAllAchievementsAchievementsGetTypeCombatKill
		return nil
	case GetAllAchievementsAchievementsGetTypeCombatDrop:
		*s = GetAllAchievementsAchievementsGetTypeCombatDrop
		return nil
	case GetAllAchievementsAchievementsGetTypeCombatLevel:
		*s = GetAllAchievementsAchievementsGetTypeCombatLevel
		return nil
	case GetAllAchievementsAchievementsGetTypeGathering:
		*s = GetAllAchievementsAchievementsGetTypeGathering
		return nil
	case GetAllAchievementsAchievementsGetTypeCrafting:
		*s = GetAllAchievementsAchievementsGetTypeCrafting
		return nil
	case GetAllAchievementsAchievementsGetTypeRecycling:
		*s = GetAllAchievementsAchievementsGetTypeRecycling
		return nil
	case GetAllAchievementsAchievementsGetTypeTask:
		*s = GetAllAchievementsAchievementsGetTypeTask
		return nil
	case GetAllAchievementsAchievementsGetTypeOther:
		*s = GetAllAchievementsAchievementsGetTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetAllCharactersLogsMyLogsGetCode498 is response for GetAllCharactersLogsMyLogsGet operation.
type GetAllCharactersLogsMyLogsGetCode498 struct{}

func (*GetAllCharactersLogsMyLogsGetCode498) getAllCharactersLogsMyLogsGetRes() {}

// GetAllCharactersLogsMyLogsGetNotFound is response for GetAllCharactersLogsMyLogsGet operation.
type GetAllCharactersLogsMyLogsGetNotFound struct{}

func (*GetAllCharactersLogsMyLogsGetNotFound) getAllCharactersLogsMyLogsGetRes() {}

type GetAllItemsItemsGetCraftSkill string

const (
	GetAllItemsItemsGetCraftSkillWeaponcrafting  GetAllItemsItemsGetCraftSkill = "weaponcrafting"
	GetAllItemsItemsGetCraftSkillGearcrafting    GetAllItemsItemsGetCraftSkill = "gearcrafting"
	GetAllItemsItemsGetCraftSkillJewelrycrafting GetAllItemsItemsGetCraftSkill = "jewelrycrafting"
	GetAllItemsItemsGetCraftSkillCooking         GetAllItemsItemsGetCraftSkill = "cooking"
	GetAllItemsItemsGetCraftSkillWoodcutting     GetAllItemsItemsGetCraftSkill = "woodcutting"
	GetAllItemsItemsGetCraftSkillMining          GetAllItemsItemsGetCraftSkill = "mining"
	GetAllItemsItemsGetCraftSkillAlchemy         GetAllItemsItemsGetCraftSkill = "alchemy"
)

// AllValues returns all GetAllItemsItemsGetCraftSkill values.
func (GetAllItemsItemsGetCraftSkill) AllValues() []GetAllItemsItemsGetCraftSkill {
	return []GetAllItemsItemsGetCraftSkill{
		GetAllItemsItemsGetCraftSkillWeaponcrafting,
		GetAllItemsItemsGetCraftSkillGearcrafting,
		GetAllItemsItemsGetCraftSkillJewelrycrafting,
		GetAllItemsItemsGetCraftSkillCooking,
		GetAllItemsItemsGetCraftSkillWoodcutting,
		GetAllItemsItemsGetCraftSkillMining,
		GetAllItemsItemsGetCraftSkillAlchemy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllItemsItemsGetCraftSkill) MarshalText() ([]byte, error) {
	switch s {
	case GetAllItemsItemsGetCraftSkillWeaponcrafting:
		return []byte(s), nil
	case GetAllItemsItemsGetCraftSkillGearcrafting:
		return []byte(s), nil
	case GetAllItemsItemsGetCraftSkillJewelrycrafting:
		return []byte(s), nil
	case GetAllItemsItemsGetCraftSkillCooking:
		return []byte(s), nil
	case GetAllItemsItemsGetCraftSkillWoodcutting:
		return []byte(s), nil
	case GetAllItemsItemsGetCraftSkillMining:
		return []byte(s), nil
	case GetAllItemsItemsGetCraftSkillAlchemy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllItemsItemsGetCraftSkill) UnmarshalText(data []byte) error {
	switch GetAllItemsItemsGetCraftSkill(data) {
	case GetAllItemsItemsGetCraftSkillWeaponcrafting:
		*s = GetAllItemsItemsGetCraftSkillWeaponcrafting
		return nil
	case GetAllItemsItemsGetCraftSkillGearcrafting:
		*s = GetAllItemsItemsGetCraftSkillGearcrafting
		return nil
	case GetAllItemsItemsGetCraftSkillJewelrycrafting:
		*s = GetAllItemsItemsGetCraftSkillJewelrycrafting
		return nil
	case GetAllItemsItemsGetCraftSkillCooking:
		*s = GetAllItemsItemsGetCraftSkillCooking
		return nil
	case GetAllItemsItemsGetCraftSkillWoodcutting:
		*s = GetAllItemsItemsGetCraftSkillWoodcutting
		return nil
	case GetAllItemsItemsGetCraftSkillMining:
		*s = GetAllItemsItemsGetCraftSkillMining
		return nil
	case GetAllItemsItemsGetCraftSkillAlchemy:
		*s = GetAllItemsItemsGetCraftSkillAlchemy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAllItemsItemsGetType string

const (
	GetAllItemsItemsGetTypeUtility    GetAllItemsItemsGetType = "utility"
	GetAllItemsItemsGetTypeBodyArmor  GetAllItemsItemsGetType = "body_armor"
	GetAllItemsItemsGetTypeWeapon     GetAllItemsItemsGetType = "weapon"
	GetAllItemsItemsGetTypeResource   GetAllItemsItemsGetType = "resource"
	GetAllItemsItemsGetTypeLegArmor   GetAllItemsItemsGetType = "leg_armor"
	GetAllItemsItemsGetTypeHelmet     GetAllItemsItemsGetType = "helmet"
	GetAllItemsItemsGetTypeBoots      GetAllItemsItemsGetType = "boots"
	GetAllItemsItemsGetTypeShield     GetAllItemsItemsGetType = "shield"
	GetAllItemsItemsGetTypeAmulet     GetAllItemsItemsGetType = "amulet"
	GetAllItemsItemsGetTypeRing       GetAllItemsItemsGetType = "ring"
	GetAllItemsItemsGetTypeArtifact   GetAllItemsItemsGetType = "artifact"
	GetAllItemsItemsGetTypeCurrency   GetAllItemsItemsGetType = "currency"
	GetAllItemsItemsGetTypeConsumable GetAllItemsItemsGetType = "consumable"
)

// AllValues returns all GetAllItemsItemsGetType values.
func (GetAllItemsItemsGetType) AllValues() []GetAllItemsItemsGetType {
	return []GetAllItemsItemsGetType{
		GetAllItemsItemsGetTypeUtility,
		GetAllItemsItemsGetTypeBodyArmor,
		GetAllItemsItemsGetTypeWeapon,
		GetAllItemsItemsGetTypeResource,
		GetAllItemsItemsGetTypeLegArmor,
		GetAllItemsItemsGetTypeHelmet,
		GetAllItemsItemsGetTypeBoots,
		GetAllItemsItemsGetTypeShield,
		GetAllItemsItemsGetTypeAmulet,
		GetAllItemsItemsGetTypeRing,
		GetAllItemsItemsGetTypeArtifact,
		GetAllItemsItemsGetTypeCurrency,
		GetAllItemsItemsGetTypeConsumable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllItemsItemsGetType) MarshalText() ([]byte, error) {
	switch s {
	case GetAllItemsItemsGetTypeUtility:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeBodyArmor:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeWeapon:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeResource:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeLegArmor:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeHelmet:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeBoots:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeShield:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeAmulet:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeRing:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeArtifact:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeCurrency:
		return []byte(s), nil
	case GetAllItemsItemsGetTypeConsumable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllItemsItemsGetType) UnmarshalText(data []byte) error {
	switch GetAllItemsItemsGetType(data) {
	case GetAllItemsItemsGetTypeUtility:
		*s = GetAllItemsItemsGetTypeUtility
		return nil
	case GetAllItemsItemsGetTypeBodyArmor:
		*s = GetAllItemsItemsGetTypeBodyArmor
		return nil
	case GetAllItemsItemsGetTypeWeapon:
		*s = GetAllItemsItemsGetTypeWeapon
		return nil
	case GetAllItemsItemsGetTypeResource:
		*s = GetAllItemsItemsGetTypeResource
		return nil
	case GetAllItemsItemsGetTypeLegArmor:
		*s = GetAllItemsItemsGetTypeLegArmor
		return nil
	case GetAllItemsItemsGetTypeHelmet:
		*s = GetAllItemsItemsGetTypeHelmet
		return nil
	case GetAllItemsItemsGetTypeBoots:
		*s = GetAllItemsItemsGetTypeBoots
		return nil
	case GetAllItemsItemsGetTypeShield:
		*s = GetAllItemsItemsGetTypeShield
		return nil
	case GetAllItemsItemsGetTypeAmulet:
		*s = GetAllItemsItemsGetTypeAmulet
		return nil
	case GetAllItemsItemsGetTypeRing:
		*s = GetAllItemsItemsGetTypeRing
		return nil
	case GetAllItemsItemsGetTypeArtifact:
		*s = GetAllItemsItemsGetTypeArtifact
		return nil
	case GetAllItemsItemsGetTypeCurrency:
		*s = GetAllItemsItemsGetTypeCurrency
		return nil
	case GetAllItemsItemsGetTypeConsumable:
		*s = GetAllItemsItemsGetTypeConsumable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAllMapsMapsGetContentType string

const (
	GetAllMapsMapsGetContentTypeMonster       GetAllMapsMapsGetContentType = "monster"
	GetAllMapsMapsGetContentTypeResource      GetAllMapsMapsGetContentType = "resource"
	GetAllMapsMapsGetContentTypeWorkshop      GetAllMapsMapsGetContentType = "workshop"
	GetAllMapsMapsGetContentTypeBank          GetAllMapsMapsGetContentType = "bank"
	GetAllMapsMapsGetContentTypeGrandExchange GetAllMapsMapsGetContentType = "grand_exchange"
	GetAllMapsMapsGetContentTypeTasksMaster   GetAllMapsMapsGetContentType = "tasks_master"
)

// AllValues returns all GetAllMapsMapsGetContentType values.
func (GetAllMapsMapsGetContentType) AllValues() []GetAllMapsMapsGetContentType {
	return []GetAllMapsMapsGetContentType{
		GetAllMapsMapsGetContentTypeMonster,
		GetAllMapsMapsGetContentTypeResource,
		GetAllMapsMapsGetContentTypeWorkshop,
		GetAllMapsMapsGetContentTypeBank,
		GetAllMapsMapsGetContentTypeGrandExchange,
		GetAllMapsMapsGetContentTypeTasksMaster,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllMapsMapsGetContentType) MarshalText() ([]byte, error) {
	switch s {
	case GetAllMapsMapsGetContentTypeMonster:
		return []byte(s), nil
	case GetAllMapsMapsGetContentTypeResource:
		return []byte(s), nil
	case GetAllMapsMapsGetContentTypeWorkshop:
		return []byte(s), nil
	case GetAllMapsMapsGetContentTypeBank:
		return []byte(s), nil
	case GetAllMapsMapsGetContentTypeGrandExchange:
		return []byte(s), nil
	case GetAllMapsMapsGetContentTypeTasksMaster:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllMapsMapsGetContentType) UnmarshalText(data []byte) error {
	switch GetAllMapsMapsGetContentType(data) {
	case GetAllMapsMapsGetContentTypeMonster:
		*s = GetAllMapsMapsGetContentTypeMonster
		return nil
	case GetAllMapsMapsGetContentTypeResource:
		*s = GetAllMapsMapsGetContentTypeResource
		return nil
	case GetAllMapsMapsGetContentTypeWorkshop:
		*s = GetAllMapsMapsGetContentTypeWorkshop
		return nil
	case GetAllMapsMapsGetContentTypeBank:
		*s = GetAllMapsMapsGetContentTypeBank
		return nil
	case GetAllMapsMapsGetContentTypeGrandExchange:
		*s = GetAllMapsMapsGetContentTypeGrandExchange
		return nil
	case GetAllMapsMapsGetContentTypeTasksMaster:
		*s = GetAllMapsMapsGetContentTypeTasksMaster
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAllResourcesResourcesGetSkill string

const (
	GetAllResourcesResourcesGetSkillMining      GetAllResourcesResourcesGetSkill = "mining"
	GetAllResourcesResourcesGetSkillWoodcutting GetAllResourcesResourcesGetSkill = "woodcutting"
	GetAllResourcesResourcesGetSkillFishing     GetAllResourcesResourcesGetSkill = "fishing"
	GetAllResourcesResourcesGetSkillAlchemy     GetAllResourcesResourcesGetSkill = "alchemy"
)

// AllValues returns all GetAllResourcesResourcesGetSkill values.
func (GetAllResourcesResourcesGetSkill) AllValues() []GetAllResourcesResourcesGetSkill {
	return []GetAllResourcesResourcesGetSkill{
		GetAllResourcesResourcesGetSkillMining,
		GetAllResourcesResourcesGetSkillWoodcutting,
		GetAllResourcesResourcesGetSkillFishing,
		GetAllResourcesResourcesGetSkillAlchemy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllResourcesResourcesGetSkill) MarshalText() ([]byte, error) {
	switch s {
	case GetAllResourcesResourcesGetSkillMining:
		return []byte(s), nil
	case GetAllResourcesResourcesGetSkillWoodcutting:
		return []byte(s), nil
	case GetAllResourcesResourcesGetSkillFishing:
		return []byte(s), nil
	case GetAllResourcesResourcesGetSkillAlchemy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllResourcesResourcesGetSkill) UnmarshalText(data []byte) error {
	switch GetAllResourcesResourcesGetSkill(data) {
	case GetAllResourcesResourcesGetSkillMining:
		*s = GetAllResourcesResourcesGetSkillMining
		return nil
	case GetAllResourcesResourcesGetSkillWoodcutting:
		*s = GetAllResourcesResourcesGetSkillWoodcutting
		return nil
	case GetAllResourcesResourcesGetSkillFishing:
		*s = GetAllResourcesResourcesGetSkillFishing
		return nil
	case GetAllResourcesResourcesGetSkillAlchemy:
		*s = GetAllResourcesResourcesGetSkillAlchemy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAllTasksTasksListGetSkill string

const (
	GetAllTasksTasksListGetSkillWeaponcrafting  GetAllTasksTasksListGetSkill = "weaponcrafting"
	GetAllTasksTasksListGetSkillGearcrafting    GetAllTasksTasksListGetSkill = "gearcrafting"
	GetAllTasksTasksListGetSkillJewelrycrafting GetAllTasksTasksListGetSkill = "jewelrycrafting"
	GetAllTasksTasksListGetSkillCooking         GetAllTasksTasksListGetSkill = "cooking"
	GetAllTasksTasksListGetSkillWoodcutting     GetAllTasksTasksListGetSkill = "woodcutting"
	GetAllTasksTasksListGetSkillMining          GetAllTasksTasksListGetSkill = "mining"
	GetAllTasksTasksListGetSkillAlchemy         GetAllTasksTasksListGetSkill = "alchemy"
	GetAllTasksTasksListGetSkillFishing         GetAllTasksTasksListGetSkill = "fishing"
)

// AllValues returns all GetAllTasksTasksListGetSkill values.
func (GetAllTasksTasksListGetSkill) AllValues() []GetAllTasksTasksListGetSkill {
	return []GetAllTasksTasksListGetSkill{
		GetAllTasksTasksListGetSkillWeaponcrafting,
		GetAllTasksTasksListGetSkillGearcrafting,
		GetAllTasksTasksListGetSkillJewelrycrafting,
		GetAllTasksTasksListGetSkillCooking,
		GetAllTasksTasksListGetSkillWoodcutting,
		GetAllTasksTasksListGetSkillMining,
		GetAllTasksTasksListGetSkillAlchemy,
		GetAllTasksTasksListGetSkillFishing,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllTasksTasksListGetSkill) MarshalText() ([]byte, error) {
	switch s {
	case GetAllTasksTasksListGetSkillWeaponcrafting:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillGearcrafting:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillJewelrycrafting:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillCooking:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillWoodcutting:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillMining:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillAlchemy:
		return []byte(s), nil
	case GetAllTasksTasksListGetSkillFishing:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllTasksTasksListGetSkill) UnmarshalText(data []byte) error {
	switch GetAllTasksTasksListGetSkill(data) {
	case GetAllTasksTasksListGetSkillWeaponcrafting:
		*s = GetAllTasksTasksListGetSkillWeaponcrafting
		return nil
	case GetAllTasksTasksListGetSkillGearcrafting:
		*s = GetAllTasksTasksListGetSkillGearcrafting
		return nil
	case GetAllTasksTasksListGetSkillJewelrycrafting:
		*s = GetAllTasksTasksListGetSkillJewelrycrafting
		return nil
	case GetAllTasksTasksListGetSkillCooking:
		*s = GetAllTasksTasksListGetSkillCooking
		return nil
	case GetAllTasksTasksListGetSkillWoodcutting:
		*s = GetAllTasksTasksListGetSkillWoodcutting
		return nil
	case GetAllTasksTasksListGetSkillMining:
		*s = GetAllTasksTasksListGetSkillMining
		return nil
	case GetAllTasksTasksListGetSkillAlchemy:
		*s = GetAllTasksTasksListGetSkillAlchemy
		return nil
	case GetAllTasksTasksListGetSkillFishing:
		*s = GetAllTasksTasksListGetSkillFishing
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAllTasksTasksListGetType string

const (
	GetAllTasksTasksListGetTypeMonsters GetAllTasksTasksListGetType = "monsters"
	GetAllTasksTasksListGetTypeItems    GetAllTasksTasksListGetType = "items"
)

// AllValues returns all GetAllTasksTasksListGetType values.
func (GetAllTasksTasksListGetType) AllValues() []GetAllTasksTasksListGetType {
	return []GetAllTasksTasksListGetType{
		GetAllTasksTasksListGetTypeMonsters,
		GetAllTasksTasksListGetTypeItems,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAllTasksTasksListGetType) MarshalText() ([]byte, error) {
	switch s {
	case GetAllTasksTasksListGetTypeMonsters:
		return []byte(s), nil
	case GetAllTasksTasksListGetTypeItems:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAllTasksTasksListGetType) UnmarshalText(data []byte) error {
	switch GetAllTasksTasksListGetType(data) {
	case GetAllTasksTasksListGetTypeMonsters:
		*s = GetAllTasksTasksListGetTypeMonsters
		return nil
	case GetAllTasksTasksListGetTypeItems:
		*s = GetAllTasksTasksListGetTypeItems
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetCharacterCharactersNameGetNotFound is response for GetCharacterCharactersNameGet operation.
type GetCharacterCharactersNameGetNotFound struct{}

func (*GetCharacterCharactersNameGetNotFound) getCharacterCharactersNameGetRes() {}

type GetCharactersLeaderboardLeaderboardCharactersGetSort string

const (
	GetCharactersLeaderboardLeaderboardCharactersGetSortCombat          GetCharactersLeaderboardLeaderboardCharactersGetSort = "combat"
	GetCharactersLeaderboardLeaderboardCharactersGetSortWoodcutting     GetCharactersLeaderboardLeaderboardCharactersGetSort = "woodcutting"
	GetCharactersLeaderboardLeaderboardCharactersGetSortMining          GetCharactersLeaderboardLeaderboardCharactersGetSort = "mining"
	GetCharactersLeaderboardLeaderboardCharactersGetSortFishing         GetCharactersLeaderboardLeaderboardCharactersGetSort = "fishing"
	GetCharactersLeaderboardLeaderboardCharactersGetSortWeaponcrafting  GetCharactersLeaderboardLeaderboardCharactersGetSort = "weaponcrafting"
	GetCharactersLeaderboardLeaderboardCharactersGetSortGearcrafting    GetCharactersLeaderboardLeaderboardCharactersGetSort = "gearcrafting"
	GetCharactersLeaderboardLeaderboardCharactersGetSortJewelrycrafting GetCharactersLeaderboardLeaderboardCharactersGetSort = "jewelrycrafting"
	GetCharactersLeaderboardLeaderboardCharactersGetSortCooking         GetCharactersLeaderboardLeaderboardCharactersGetSort = "cooking"
	GetCharactersLeaderboardLeaderboardCharactersGetSortAlchemy         GetCharactersLeaderboardLeaderboardCharactersGetSort = "alchemy"
	GetCharactersLeaderboardLeaderboardCharactersGetSortGold            GetCharactersLeaderboardLeaderboardCharactersGetSort = "gold"
)

// AllValues returns all GetCharactersLeaderboardLeaderboardCharactersGetSort values.
func (GetCharactersLeaderboardLeaderboardCharactersGetSort) AllValues() []GetCharactersLeaderboardLeaderboardCharactersGetSort {
	return []GetCharactersLeaderboardLeaderboardCharactersGetSort{
		GetCharactersLeaderboardLeaderboardCharactersGetSortCombat,
		GetCharactersLeaderboardLeaderboardCharactersGetSortWoodcutting,
		GetCharactersLeaderboardLeaderboardCharactersGetSortMining,
		GetCharactersLeaderboardLeaderboardCharactersGetSortFishing,
		GetCharactersLeaderboardLeaderboardCharactersGetSortWeaponcrafting,
		GetCharactersLeaderboardLeaderboardCharactersGetSortGearcrafting,
		GetCharactersLeaderboardLeaderboardCharactersGetSortJewelrycrafting,
		GetCharactersLeaderboardLeaderboardCharactersGetSortCooking,
		GetCharactersLeaderboardLeaderboardCharactersGetSortAlchemy,
		GetCharactersLeaderboardLeaderboardCharactersGetSortGold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetCharactersLeaderboardLeaderboardCharactersGetSort) MarshalText() ([]byte, error) {
	switch s {
	case GetCharactersLeaderboardLeaderboardCharactersGetSortCombat:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortWoodcutting:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortMining:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortFishing:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortWeaponcrafting:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortGearcrafting:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortJewelrycrafting:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortCooking:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortAlchemy:
		return []byte(s), nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortGold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetCharactersLeaderboardLeaderboardCharactersGetSort) UnmarshalText(data []byte) error {
	switch GetCharactersLeaderboardLeaderboardCharactersGetSort(data) {
	case GetCharactersLeaderboardLeaderboardCharactersGetSortCombat:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortCombat
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortWoodcutting:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortWoodcutting
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortMining:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortMining
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortFishing:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortFishing
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortWeaponcrafting:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortWeaponcrafting
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortGearcrafting:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortGearcrafting
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortJewelrycrafting:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortJewelrycrafting
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortCooking:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortCooking
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortAlchemy:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortAlchemy
		return nil
	case GetCharactersLeaderboardLeaderboardCharactersGetSortGold:
		*s = GetCharactersLeaderboardLeaderboardCharactersGetSortGold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetGeSellHistoryGrandexchangeHistoryCodeGetNotFound is response for GetGeSellHistoryGrandexchangeHistoryCodeGet operation.
type GetGeSellHistoryGrandexchangeHistoryCodeGetNotFound struct{}

func (*GetGeSellHistoryGrandexchangeHistoryCodeGetNotFound) getGeSellHistoryGrandexchangeHistoryCodeGetRes() {
}

// GetGeSellOrderGrandexchangeOrdersIDGetNotFound is response for GetGeSellOrderGrandexchangeOrdersIDGet operation.
type GetGeSellOrderGrandexchangeOrdersIDGetNotFound struct{}

func (*GetGeSellOrderGrandexchangeOrdersIDGetNotFound) getGeSellOrderGrandexchangeOrdersIDGetRes() {}

// GetItemItemsCodeGetNotFound is response for GetItemItemsCodeGet operation.
type GetItemItemsCodeGetNotFound struct{}

func (*GetItemItemsCodeGetNotFound) getItemItemsCodeGetRes() {}

// GetMapMapsXYGetNotFound is response for GetMapMapsXYGet operation.
type GetMapMapsXYGetNotFound struct{}

func (*GetMapMapsXYGetNotFound) getMapMapsXYGetRes() {}

// GetMonsterMonstersCodeGetNotFound is response for GetMonsterMonstersCodeGet operation.
type GetMonsterMonstersCodeGetNotFound struct{}

func (*GetMonsterMonstersCodeGetNotFound) getMonsterMonstersCodeGetRes() {}

// GetResourceResourcesCodeGetNotFound is response for GetResourceResourcesCodeGet operation.
type GetResourceResourcesCodeGetNotFound struct{}

func (*GetResourceResourcesCodeGetNotFound) getResourceResourcesCodeGetRes() {}

// GetTaskTasksListCodeGetNotFound is response for GetTaskTasksListCodeGet operation.
type GetTaskTasksListCodeGetNotFound struct{}

func (*GetTaskTasksListCodeGetNotFound) getTaskTasksListCodeGetRes() {}

// GetTasksRewardTasksRewardsCodeGetNotFound is response for GetTasksRewardTasksRewardsCodeGet operation.
type GetTasksRewardTasksRewardsCodeGetNotFound struct{}

func (*GetTasksRewardTasksRewardsCodeGetNotFound) getTasksRewardTasksRewardsCodeGetRes() {}

type HTTPBasic struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *HTTPBasic) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *HTTPBasic) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *HTTPBasic) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *HTTPBasic) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/InventorySlot
type InventorySlot struct {
	// Inventory slot identifier.
	Slot int `json:"slot"`
	// Item code.
	Code string `json:"code"`
	// Quantity in the slot.
	Quantity int `json:"quantity"`
}

// GetSlot returns the value of Slot.
func (s *InventorySlot) GetSlot() int {
	return s.Slot
}

// GetCode returns the value of Code.
func (s *InventorySlot) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *InventorySlot) GetQuantity() int {
	return s.Quantity
}

// SetSlot sets the value of Slot.
func (s *InventorySlot) SetSlot(val int) {
	s.Slot = val
}

// SetCode sets the value of Code.
func (s *InventorySlot) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *InventorySlot) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/ItemEffectSchema
type ItemEffectSchema struct {
	// Effect name.
	Name string `json:"name"`
	// Effect value.
	Value int `json:"value"`
}

// GetName returns the value of Name.
func (s *ItemEffectSchema) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *ItemEffectSchema) GetValue() int {
	return s.Value
}

// SetName sets the value of Name.
func (s *ItemEffectSchema) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *ItemEffectSchema) SetValue(val int) {
	s.Value = val
}

// Ref: #/components/schemas/ItemResponseSchema
type ItemResponseSchema struct {
	Data ItemSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *ItemResponseSchema) GetData() ItemSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *ItemResponseSchema) SetData(val ItemSchema) {
	s.Data = val
}

func (*ItemResponseSchema) getItemItemsCodeGetRes() {}

// Ref: #/components/schemas/ItemSchema
type ItemSchema struct {
	// Item name.
	Name string `json:"name"`
	// Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`
	// Item level.
	Level int `json:"level"`
	// Item type.
	Type string `json:"type"`
	// Item subtype.
	Subtype string `json:"subtype"`
	// Item description.
	Description string `json:"description"`
	// List of object effects. For equipment, it will include item stats.
	Effects []ItemEffectSchema `json:"effects"`
	// Craft information. If applicable.
	Craft OptItemSchemaCraft `json:"craft"`
	// Item tradeable status. A non-tradeable item cannot be exchanged or sold.
	Tradeable bool `json:"tradeable"`
}

// GetName returns the value of Name.
func (s *ItemSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ItemSchema) GetCode() string {
	return s.Code
}

// GetLevel returns the value of Level.
func (s *ItemSchema) GetLevel() int {
	return s.Level
}

// GetType returns the value of Type.
func (s *ItemSchema) GetType() string {
	return s.Type
}

// GetSubtype returns the value of Subtype.
func (s *ItemSchema) GetSubtype() string {
	return s.Subtype
}

// GetDescription returns the value of Description.
func (s *ItemSchema) GetDescription() string {
	return s.Description
}

// GetEffects returns the value of Effects.
func (s *ItemSchema) GetEffects() []ItemEffectSchema {
	return s.Effects
}

// GetCraft returns the value of Craft.
func (s *ItemSchema) GetCraft() OptItemSchemaCraft {
	return s.Craft
}

// GetTradeable returns the value of Tradeable.
func (s *ItemSchema) GetTradeable() bool {
	return s.Tradeable
}

// SetName sets the value of Name.
func (s *ItemSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ItemSchema) SetCode(val string) {
	s.Code = val
}

// SetLevel sets the value of Level.
func (s *ItemSchema) SetLevel(val int) {
	s.Level = val
}

// SetType sets the value of Type.
func (s *ItemSchema) SetType(val string) {
	s.Type = val
}

// SetSubtype sets the value of Subtype.
func (s *ItemSchema) SetSubtype(val string) {
	s.Subtype = val
}

// SetDescription sets the value of Description.
func (s *ItemSchema) SetDescription(val string) {
	s.Description = val
}

// SetEffects sets the value of Effects.
func (s *ItemSchema) SetEffects(val []ItemEffectSchema) {
	s.Effects = val
}

// SetCraft sets the value of Craft.
func (s *ItemSchema) SetCraft(val OptItemSchemaCraft) {
	s.Craft = val
}

// SetTradeable sets the value of Tradeable.
func (s *ItemSchema) SetTradeable(val bool) {
	s.Tradeable = val
}

// Craft information. If applicable.
// ItemSchemaCraft represents sum type.
type ItemSchemaCraft struct {
	Type        ItemSchemaCraftType // switch on this field
	CraftSchema CraftSchema
	Null        struct{}
}

// ItemSchemaCraftType is oneOf type of ItemSchemaCraft.
type ItemSchemaCraftType string

// Possible values for ItemSchemaCraftType.
const (
	CraftSchemaItemSchemaCraft ItemSchemaCraftType = "CraftSchema"
	NullItemSchemaCraft        ItemSchemaCraftType = "struct{}"
)

// IsCraftSchema reports whether ItemSchemaCraft is CraftSchema.
func (s ItemSchemaCraft) IsCraftSchema() bool { return s.Type == CraftSchemaItemSchemaCraft }

// IsNull reports whether ItemSchemaCraft is struct{}.
func (s ItemSchemaCraft) IsNull() bool { return s.Type == NullItemSchemaCraft }

// SetCraftSchema sets ItemSchemaCraft to CraftSchema.
func (s *ItemSchemaCraft) SetCraftSchema(v CraftSchema) {
	s.Type = CraftSchemaItemSchemaCraft
	s.CraftSchema = v
}

// GetCraftSchema returns CraftSchema and true boolean if ItemSchemaCraft is CraftSchema.
func (s ItemSchemaCraft) GetCraftSchema() (v CraftSchema, ok bool) {
	if !s.IsCraftSchema() {
		return v, false
	}
	return s.CraftSchema, true
}

// NewCraftSchemaItemSchemaCraft returns new ItemSchemaCraft from CraftSchema.
func NewCraftSchemaItemSchemaCraft(v CraftSchema) ItemSchemaCraft {
	var s ItemSchemaCraft
	s.SetCraftSchema(v)
	return s
}

// SetNull sets ItemSchemaCraft to struct{}.
func (s *ItemSchemaCraft) SetNull(v struct{}) {
	s.Type = NullItemSchemaCraft
	s.Null = v
}

// GetNull returns struct{} and true boolean if ItemSchemaCraft is struct{}.
func (s ItemSchemaCraft) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullItemSchemaCraft returns new ItemSchemaCraft from struct{}.
func NewNullItemSchemaCraft(v struct{}) ItemSchemaCraft {
	var s ItemSchemaCraft
	s.SetNull(v)
	return s
}

type JWTBearer struct {
	Token string
}

// GetToken returns the value of Token.
func (s *JWTBearer) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *JWTBearer) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/LogSchema
type LogSchema struct {
	// Character name.
	Character string `json:"character"`
	// Account character.
	Account string `json:"account"`
	// Type of action.
	Type LogSchemaType `json:"type"`
	// Description of action.
	Description string `json:"description"`
	// Content of action.
	Content jx.Raw `json:"content"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime of cooldown expiration.
	CooldownExpiration LogSchemaCooldownExpiration `json:"cooldown_expiration"`
	// Datetime of creation.
	CreatedAt time.Time `json:"created_at"`
}

// GetCharacter returns the value of Character.
func (s *LogSchema) GetCharacter() string {
	return s.Character
}

// GetAccount returns the value of Account.
func (s *LogSchema) GetAccount() string {
	return s.Account
}

// GetType returns the value of Type.
func (s *LogSchema) GetType() LogSchemaType {
	return s.Type
}

// GetDescription returns the value of Description.
func (s *LogSchema) GetDescription() string {
	return s.Description
}

// GetContent returns the value of Content.
func (s *LogSchema) GetContent() jx.Raw {
	return s.Content
}

// GetCooldown returns the value of Cooldown.
func (s *LogSchema) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *LogSchema) GetCooldownExpiration() LogSchemaCooldownExpiration {
	return s.CooldownExpiration
}

// GetCreatedAt returns the value of CreatedAt.
func (s *LogSchema) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetCharacter sets the value of Character.
func (s *LogSchema) SetCharacter(val string) {
	s.Character = val
}

// SetAccount sets the value of Account.
func (s *LogSchema) SetAccount(val string) {
	s.Account = val
}

// SetType sets the value of Type.
func (s *LogSchema) SetType(val LogSchemaType) {
	s.Type = val
}

// SetDescription sets the value of Description.
func (s *LogSchema) SetDescription(val string) {
	s.Description = val
}

// SetContent sets the value of Content.
func (s *LogSchema) SetContent(val jx.Raw) {
	s.Content = val
}

// SetCooldown sets the value of Cooldown.
func (s *LogSchema) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *LogSchema) SetCooldownExpiration(val LogSchemaCooldownExpiration) {
	s.CooldownExpiration = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *LogSchema) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Datetime of cooldown expiration.
// LogSchemaCooldownExpiration represents sum type.
type LogSchemaCooldownExpiration struct {
	Type     LogSchemaCooldownExpirationType // switch on this field
	DateTime time.Time
	Null     struct{}
}

// LogSchemaCooldownExpirationType is oneOf type of LogSchemaCooldownExpiration.
type LogSchemaCooldownExpirationType string

// Possible values for LogSchemaCooldownExpirationType.
const (
	DateTimeLogSchemaCooldownExpiration LogSchemaCooldownExpirationType = "time.Time"
	NullLogSchemaCooldownExpiration     LogSchemaCooldownExpirationType = "struct{}"
)

// IsDateTime reports whether LogSchemaCooldownExpiration is time.Time.
func (s LogSchemaCooldownExpiration) IsDateTime() bool {
	return s.Type == DateTimeLogSchemaCooldownExpiration
}

// IsNull reports whether LogSchemaCooldownExpiration is struct{}.
func (s LogSchemaCooldownExpiration) IsNull() bool { return s.Type == NullLogSchemaCooldownExpiration }

// SetDateTime sets LogSchemaCooldownExpiration to time.Time.
func (s *LogSchemaCooldownExpiration) SetDateTime(v time.Time) {
	s.Type = DateTimeLogSchemaCooldownExpiration
	s.DateTime = v
}

// GetDateTime returns time.Time and true boolean if LogSchemaCooldownExpiration is time.Time.
func (s LogSchemaCooldownExpiration) GetDateTime() (v time.Time, ok bool) {
	if !s.IsDateTime() {
		return v, false
	}
	return s.DateTime, true
}

// NewDateTimeLogSchemaCooldownExpiration returns new LogSchemaCooldownExpiration from time.Time.
func NewDateTimeLogSchemaCooldownExpiration(v time.Time) LogSchemaCooldownExpiration {
	var s LogSchemaCooldownExpiration
	s.SetDateTime(v)
	return s
}

// SetNull sets LogSchemaCooldownExpiration to struct{}.
func (s *LogSchemaCooldownExpiration) SetNull(v struct{}) {
	s.Type = NullLogSchemaCooldownExpiration
	s.Null = v
}

// GetNull returns struct{} and true boolean if LogSchemaCooldownExpiration is struct{}.
func (s LogSchemaCooldownExpiration) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullLogSchemaCooldownExpiration returns new LogSchemaCooldownExpiration from struct{}.
func NewNullLogSchemaCooldownExpiration(v struct{}) LogSchemaCooldownExpiration {
	var s LogSchemaCooldownExpiration
	s.SetNull(v)
	return s
}

type LogSchemaType string

const (
	LogSchemaTypeSpawn            LogSchemaType = "spawn"
	LogSchemaTypeMovement         LogSchemaType = "movement"
	LogSchemaTypeFight            LogSchemaType = "fight"
	LogSchemaTypeCrafting         LogSchemaType = "crafting"
	LogSchemaTypeGathering        LogSchemaType = "gathering"
	LogSchemaTypeBuyGe            LogSchemaType = "buy_ge"
	LogSchemaTypeSellGe           LogSchemaType = "sell_ge"
	LogSchemaTypeCancelGe         LogSchemaType = "cancel_ge"
	LogSchemaTypeDeleteItem       LogSchemaType = "delete_item"
	LogSchemaTypeDeposit          LogSchemaType = "deposit"
	LogSchemaTypeWithdraw         LogSchemaType = "withdraw"
	LogSchemaTypeDepositGold      LogSchemaType = "deposit_gold"
	LogSchemaTypeWithdrawGold     LogSchemaType = "withdraw_gold"
	LogSchemaTypeEquip            LogSchemaType = "equip"
	LogSchemaTypeUnequip          LogSchemaType = "unequip"
	LogSchemaTypeNewTask          LogSchemaType = "new_task"
	LogSchemaTypeTaskExchange     LogSchemaType = "task_exchange"
	LogSchemaTypeTaskCancelled    LogSchemaType = "task_cancelled"
	LogSchemaTypeTaskCompleted    LogSchemaType = "task_completed"
	LogSchemaTypeTaskTrade        LogSchemaType = "task_trade"
	LogSchemaTypeRecycling        LogSchemaType = "recycling"
	LogSchemaTypeRest             LogSchemaType = "rest"
	LogSchemaTypeUse              LogSchemaType = "use"
	LogSchemaTypeBuyBankExpansion LogSchemaType = "buy_bank_expansion"
	LogSchemaTypeAchievement      LogSchemaType = "achievement"
)

// AllValues returns all LogSchemaType values.
func (LogSchemaType) AllValues() []LogSchemaType {
	return []LogSchemaType{
		LogSchemaTypeSpawn,
		LogSchemaTypeMovement,
		LogSchemaTypeFight,
		LogSchemaTypeCrafting,
		LogSchemaTypeGathering,
		LogSchemaTypeBuyGe,
		LogSchemaTypeSellGe,
		LogSchemaTypeCancelGe,
		LogSchemaTypeDeleteItem,
		LogSchemaTypeDeposit,
		LogSchemaTypeWithdraw,
		LogSchemaTypeDepositGold,
		LogSchemaTypeWithdrawGold,
		LogSchemaTypeEquip,
		LogSchemaTypeUnequip,
		LogSchemaTypeNewTask,
		LogSchemaTypeTaskExchange,
		LogSchemaTypeTaskCancelled,
		LogSchemaTypeTaskCompleted,
		LogSchemaTypeTaskTrade,
		LogSchemaTypeRecycling,
		LogSchemaTypeRest,
		LogSchemaTypeUse,
		LogSchemaTypeBuyBankExpansion,
		LogSchemaTypeAchievement,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LogSchemaType) MarshalText() ([]byte, error) {
	switch s {
	case LogSchemaTypeSpawn:
		return []byte(s), nil
	case LogSchemaTypeMovement:
		return []byte(s), nil
	case LogSchemaTypeFight:
		return []byte(s), nil
	case LogSchemaTypeCrafting:
		return []byte(s), nil
	case LogSchemaTypeGathering:
		return []byte(s), nil
	case LogSchemaTypeBuyGe:
		return []byte(s), nil
	case LogSchemaTypeSellGe:
		return []byte(s), nil
	case LogSchemaTypeCancelGe:
		return []byte(s), nil
	case LogSchemaTypeDeleteItem:
		return []byte(s), nil
	case LogSchemaTypeDeposit:
		return []byte(s), nil
	case LogSchemaTypeWithdraw:
		return []byte(s), nil
	case LogSchemaTypeDepositGold:
		return []byte(s), nil
	case LogSchemaTypeWithdrawGold:
		return []byte(s), nil
	case LogSchemaTypeEquip:
		return []byte(s), nil
	case LogSchemaTypeUnequip:
		return []byte(s), nil
	case LogSchemaTypeNewTask:
		return []byte(s), nil
	case LogSchemaTypeTaskExchange:
		return []byte(s), nil
	case LogSchemaTypeTaskCancelled:
		return []byte(s), nil
	case LogSchemaTypeTaskCompleted:
		return []byte(s), nil
	case LogSchemaTypeTaskTrade:
		return []byte(s), nil
	case LogSchemaTypeRecycling:
		return []byte(s), nil
	case LogSchemaTypeRest:
		return []byte(s), nil
	case LogSchemaTypeUse:
		return []byte(s), nil
	case LogSchemaTypeBuyBankExpansion:
		return []byte(s), nil
	case LogSchemaTypeAchievement:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LogSchemaType) UnmarshalText(data []byte) error {
	switch LogSchemaType(data) {
	case LogSchemaTypeSpawn:
		*s = LogSchemaTypeSpawn
		return nil
	case LogSchemaTypeMovement:
		*s = LogSchemaTypeMovement
		return nil
	case LogSchemaTypeFight:
		*s = LogSchemaTypeFight
		return nil
	case LogSchemaTypeCrafting:
		*s = LogSchemaTypeCrafting
		return nil
	case LogSchemaTypeGathering:
		*s = LogSchemaTypeGathering
		return nil
	case LogSchemaTypeBuyGe:
		*s = LogSchemaTypeBuyGe
		return nil
	case LogSchemaTypeSellGe:
		*s = LogSchemaTypeSellGe
		return nil
	case LogSchemaTypeCancelGe:
		*s = LogSchemaTypeCancelGe
		return nil
	case LogSchemaTypeDeleteItem:
		*s = LogSchemaTypeDeleteItem
		return nil
	case LogSchemaTypeDeposit:
		*s = LogSchemaTypeDeposit
		return nil
	case LogSchemaTypeWithdraw:
		*s = LogSchemaTypeWithdraw
		return nil
	case LogSchemaTypeDepositGold:
		*s = LogSchemaTypeDepositGold
		return nil
	case LogSchemaTypeWithdrawGold:
		*s = LogSchemaTypeWithdrawGold
		return nil
	case LogSchemaTypeEquip:
		*s = LogSchemaTypeEquip
		return nil
	case LogSchemaTypeUnequip:
		*s = LogSchemaTypeUnequip
		return nil
	case LogSchemaTypeNewTask:
		*s = LogSchemaTypeNewTask
		return nil
	case LogSchemaTypeTaskExchange:
		*s = LogSchemaTypeTaskExchange
		return nil
	case LogSchemaTypeTaskCancelled:
		*s = LogSchemaTypeTaskCancelled
		return nil
	case LogSchemaTypeTaskCompleted:
		*s = LogSchemaTypeTaskCompleted
		return nil
	case LogSchemaTypeTaskTrade:
		*s = LogSchemaTypeTaskTrade
		return nil
	case LogSchemaTypeRecycling:
		*s = LogSchemaTypeRecycling
		return nil
	case LogSchemaTypeRest:
		*s = LogSchemaTypeRest
		return nil
	case LogSchemaTypeUse:
		*s = LogSchemaTypeUse
		return nil
	case LogSchemaTypeBuyBankExpansion:
		*s = LogSchemaTypeBuyBankExpansion
		return nil
	case LogSchemaTypeAchievement:
		*s = LogSchemaTypeAchievement
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MapContentSchema
type MapContentSchema struct {
	// Type of the content.
	Type string `json:"type"`
	// Code of the content.
	Code string `json:"code"`
}

// GetType returns the value of Type.
func (s *MapContentSchema) GetType() string {
	return s.Type
}

// GetCode returns the value of Code.
func (s *MapContentSchema) GetCode() string {
	return s.Code
}

// SetType sets the value of Type.
func (s *MapContentSchema) SetType(val string) {
	s.Type = val
}

// SetCode sets the value of Code.
func (s *MapContentSchema) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/MapResponseSchema
type MapResponseSchema struct {
	Data MapSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *MapResponseSchema) GetData() MapSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *MapResponseSchema) SetData(val MapSchema) {
	s.Data = val
}

func (*MapResponseSchema) getMapMapsXYGetRes() {}

// Ref: #/components/schemas/MapSchema
type MapSchema struct {
	// Name of the map.
	Name string `json:"name"`
	// Skin of the map.
	Skin string `json:"skin"`
	// Position X of the map.
	X int `json:"x"`
	// Position Y of the map.
	Y int `json:"y"`
	// Content of the map.
	Content MapSchemaContent `json:"content"`
}

// GetName returns the value of Name.
func (s *MapSchema) GetName() string {
	return s.Name
}

// GetSkin returns the value of Skin.
func (s *MapSchema) GetSkin() string {
	return s.Skin
}

// GetX returns the value of X.
func (s *MapSchema) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *MapSchema) GetY() int {
	return s.Y
}

// GetContent returns the value of Content.
func (s *MapSchema) GetContent() MapSchemaContent {
	return s.Content
}

// SetName sets the value of Name.
func (s *MapSchema) SetName(val string) {
	s.Name = val
}

// SetSkin sets the value of Skin.
func (s *MapSchema) SetSkin(val string) {
	s.Skin = val
}

// SetX sets the value of X.
func (s *MapSchema) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *MapSchema) SetY(val int) {
	s.Y = val
}

// SetContent sets the value of Content.
func (s *MapSchema) SetContent(val MapSchemaContent) {
	s.Content = val
}

// Content of the map.
// MapSchemaContent represents sum type.
type MapSchemaContent struct {
	Type             MapSchemaContentType // switch on this field
	MapContentSchema MapContentSchema
	Null             struct{}
}

// MapSchemaContentType is oneOf type of MapSchemaContent.
type MapSchemaContentType string

// Possible values for MapSchemaContentType.
const (
	MapContentSchemaMapSchemaContent MapSchemaContentType = "MapContentSchema"
	NullMapSchemaContent             MapSchemaContentType = "struct{}"
)

// IsMapContentSchema reports whether MapSchemaContent is MapContentSchema.
func (s MapSchemaContent) IsMapContentSchema() bool {
	return s.Type == MapContentSchemaMapSchemaContent
}

// IsNull reports whether MapSchemaContent is struct{}.
func (s MapSchemaContent) IsNull() bool { return s.Type == NullMapSchemaContent }

// SetMapContentSchema sets MapSchemaContent to MapContentSchema.
func (s *MapSchemaContent) SetMapContentSchema(v MapContentSchema) {
	s.Type = MapContentSchemaMapSchemaContent
	s.MapContentSchema = v
}

// GetMapContentSchema returns MapContentSchema and true boolean if MapSchemaContent is MapContentSchema.
func (s MapSchemaContent) GetMapContentSchema() (v MapContentSchema, ok bool) {
	if !s.IsMapContentSchema() {
		return v, false
	}
	return s.MapContentSchema, true
}

// NewMapContentSchemaMapSchemaContent returns new MapSchemaContent from MapContentSchema.
func NewMapContentSchemaMapSchemaContent(v MapContentSchema) MapSchemaContent {
	var s MapSchemaContent
	s.SetMapContentSchema(v)
	return s
}

// SetNull sets MapSchemaContent to struct{}.
func (s *MapSchemaContent) SetNull(v struct{}) {
	s.Type = NullMapSchemaContent
	s.Null = v
}

// GetNull returns struct{} and true boolean if MapSchemaContent is struct{}.
func (s MapSchemaContent) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullMapSchemaContent returns new MapSchemaContent from struct{}.
func NewNullMapSchemaContent(v struct{}) MapSchemaContent {
	var s MapSchemaContent
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/MonsterResponseSchema
type MonsterResponseSchema struct {
	Data MonsterSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *MonsterResponseSchema) GetData() MonsterSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *MonsterResponseSchema) SetData(val MonsterSchema) {
	s.Data = val
}

func (*MonsterResponseSchema) getMonsterMonstersCodeGetRes() {}

// Ref: #/components/schemas/MonsterSchema
type MonsterSchema struct {
	// Name of the monster.
	Name string `json:"name"`
	// The code of the monster. This is the monster's unique identifier (ID).
	Code string `json:"code"`
	// Monster level.
	Level int `json:"level"`
	// Monster hit points.
	Hp int `json:"hp"`
	// Monster fire attack.
	AttackFire int `json:"attack_fire"`
	// Monster earth attack.
	AttackEarth int `json:"attack_earth"`
	// Monster water attack.
	AttackWater int `json:"attack_water"`
	// Monster air attack.
	AttackAir int `json:"attack_air"`
	// Monster % fire resistance.
	ResFire int `json:"res_fire"`
	// Monster % earth resistance.
	ResEarth int `json:"res_earth"`
	// Monster % water resistance.
	ResWater int `json:"res_water"`
	// Monster % air resistance.
	ResAir int `json:"res_air"`
	// Monster minimum gold drop.
	MinGold int `json:"min_gold"`
	// Monster maximum gold drop.
	MaxGold int `json:"max_gold"`
	// Monster drops. This is a list of items that the monster drops after killing the monster.
	Drops []DropRateSchema `json:"drops"`
}

// GetName returns the value of Name.
func (s *MonsterSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *MonsterSchema) GetCode() string {
	return s.Code
}

// GetLevel returns the value of Level.
func (s *MonsterSchema) GetLevel() int {
	return s.Level
}

// GetHp returns the value of Hp.
func (s *MonsterSchema) GetHp() int {
	return s.Hp
}

// GetAttackFire returns the value of AttackFire.
func (s *MonsterSchema) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *MonsterSchema) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *MonsterSchema) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *MonsterSchema) GetAttackAir() int {
	return s.AttackAir
}

// GetResFire returns the value of ResFire.
func (s *MonsterSchema) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *MonsterSchema) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *MonsterSchema) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *MonsterSchema) GetResAir() int {
	return s.ResAir
}

// GetMinGold returns the value of MinGold.
func (s *MonsterSchema) GetMinGold() int {
	return s.MinGold
}

// GetMaxGold returns the value of MaxGold.
func (s *MonsterSchema) GetMaxGold() int {
	return s.MaxGold
}

// GetDrops returns the value of Drops.
func (s *MonsterSchema) GetDrops() []DropRateSchema {
	return s.Drops
}

// SetName sets the value of Name.
func (s *MonsterSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *MonsterSchema) SetCode(val string) {
	s.Code = val
}

// SetLevel sets the value of Level.
func (s *MonsterSchema) SetLevel(val int) {
	s.Level = val
}

// SetHp sets the value of Hp.
func (s *MonsterSchema) SetHp(val int) {
	s.Hp = val
}

// SetAttackFire sets the value of AttackFire.
func (s *MonsterSchema) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *MonsterSchema) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *MonsterSchema) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *MonsterSchema) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetResFire sets the value of ResFire.
func (s *MonsterSchema) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *MonsterSchema) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *MonsterSchema) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *MonsterSchema) SetResAir(val int) {
	s.ResAir = val
}

// SetMinGold sets the value of MinGold.
func (s *MonsterSchema) SetMinGold(val int) {
	s.MinGold = val
}

// SetMaxGold sets the value of MaxGold.
func (s *MonsterSchema) SetMaxGold(val int) {
	s.MaxGold = val
}

// SetDrops sets the value of Drops.
func (s *MonsterSchema) SetDrops(val []DropRateSchema) {
	s.Drops = val
}

// Ref: #/components/schemas/MyAccountDetails
type MyAccountDetails struct {
	// Username.
	Username string `json:"username"`
	// Email.
	Email string `json:"email"`
	// Subscribed for the current season.
	Subscribed bool `json:"subscribed"`
	// Member status.
	Status MyAccountDetailsStatus `json:"status"`
	// Account badges.
	Badges OptMyAccountDetailsBadges `json:"badges"`
	// Gems.
	Gems int `json:"gems"`
	// Achievement points.
	AchievementsPoints int `json:"achievements_points"`
	// Banned.
	Banned bool `json:"banned"`
	// Ban reason.
	BanReason OptString `json:"ban_reason"`
}

// GetUsername returns the value of Username.
func (s *MyAccountDetails) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *MyAccountDetails) GetEmail() string {
	return s.Email
}

// GetSubscribed returns the value of Subscribed.
func (s *MyAccountDetails) GetSubscribed() bool {
	return s.Subscribed
}

// GetStatus returns the value of Status.
func (s *MyAccountDetails) GetStatus() MyAccountDetailsStatus {
	return s.Status
}

// GetBadges returns the value of Badges.
func (s *MyAccountDetails) GetBadges() OptMyAccountDetailsBadges {
	return s.Badges
}

// GetGems returns the value of Gems.
func (s *MyAccountDetails) GetGems() int {
	return s.Gems
}

// GetAchievementsPoints returns the value of AchievementsPoints.
func (s *MyAccountDetails) GetAchievementsPoints() int {
	return s.AchievementsPoints
}

// GetBanned returns the value of Banned.
func (s *MyAccountDetails) GetBanned() bool {
	return s.Banned
}

// GetBanReason returns the value of BanReason.
func (s *MyAccountDetails) GetBanReason() OptString {
	return s.BanReason
}

// SetUsername sets the value of Username.
func (s *MyAccountDetails) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *MyAccountDetails) SetEmail(val string) {
	s.Email = val
}

// SetSubscribed sets the value of Subscribed.
func (s *MyAccountDetails) SetSubscribed(val bool) {
	s.Subscribed = val
}

// SetStatus sets the value of Status.
func (s *MyAccountDetails) SetStatus(val MyAccountDetailsStatus) {
	s.Status = val
}

// SetBadges sets the value of Badges.
func (s *MyAccountDetails) SetBadges(val OptMyAccountDetailsBadges) {
	s.Badges = val
}

// SetGems sets the value of Gems.
func (s *MyAccountDetails) SetGems(val int) {
	s.Gems = val
}

// SetAchievementsPoints sets the value of AchievementsPoints.
func (s *MyAccountDetails) SetAchievementsPoints(val int) {
	s.AchievementsPoints = val
}

// SetBanned sets the value of Banned.
func (s *MyAccountDetails) SetBanned(val bool) {
	s.Banned = val
}

// SetBanReason sets the value of BanReason.
func (s *MyAccountDetails) SetBanReason(val OptString) {
	s.BanReason = val
}

// Account badges.
// MyAccountDetailsBadges represents sum type.
type MyAccountDetailsBadges struct {
	Type     MyAccountDetailsBadgesType // switch on this field
	AnyArray []jx.Raw
	Null     struct{}
}

// MyAccountDetailsBadgesType is oneOf type of MyAccountDetailsBadges.
type MyAccountDetailsBadgesType string

// Possible values for MyAccountDetailsBadgesType.
const (
	AnyArrayMyAccountDetailsBadges MyAccountDetailsBadgesType = "[]jx.Raw"
	NullMyAccountDetailsBadges     MyAccountDetailsBadgesType = "struct{}"
)

// IsAnyArray reports whether MyAccountDetailsBadges is []jx.Raw.
func (s MyAccountDetailsBadges) IsAnyArray() bool { return s.Type == AnyArrayMyAccountDetailsBadges }

// IsNull reports whether MyAccountDetailsBadges is struct{}.
func (s MyAccountDetailsBadges) IsNull() bool { return s.Type == NullMyAccountDetailsBadges }

// SetAnyArray sets MyAccountDetailsBadges to []jx.Raw.
func (s *MyAccountDetailsBadges) SetAnyArray(v []jx.Raw) {
	s.Type = AnyArrayMyAccountDetailsBadges
	s.AnyArray = v
}

// GetAnyArray returns []jx.Raw and true boolean if MyAccountDetailsBadges is []jx.Raw.
func (s MyAccountDetailsBadges) GetAnyArray() (v []jx.Raw, ok bool) {
	if !s.IsAnyArray() {
		return v, false
	}
	return s.AnyArray, true
}

// NewAnyArrayMyAccountDetailsBadges returns new MyAccountDetailsBadges from []jx.Raw.
func NewAnyArrayMyAccountDetailsBadges(v []jx.Raw) MyAccountDetailsBadges {
	var s MyAccountDetailsBadges
	s.SetAnyArray(v)
	return s
}

// SetNull sets MyAccountDetailsBadges to struct{}.
func (s *MyAccountDetailsBadges) SetNull(v struct{}) {
	s.Type = NullMyAccountDetailsBadges
	s.Null = v
}

// GetNull returns struct{} and true boolean if MyAccountDetailsBadges is struct{}.
func (s MyAccountDetailsBadges) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullMyAccountDetailsBadges returns new MyAccountDetailsBadges from struct{}.
func NewNullMyAccountDetailsBadges(v struct{}) MyAccountDetailsBadges {
	var s MyAccountDetailsBadges
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/MyAccountDetailsSchema
type MyAccountDetailsSchema struct {
	Data MyAccountDetails `json:"data"`
}

// GetData returns the value of Data.
func (s *MyAccountDetailsSchema) GetData() MyAccountDetails {
	return s.Data
}

// SetData sets the value of Data.
func (s *MyAccountDetailsSchema) SetData(val MyAccountDetails) {
	s.Data = val
}

type MyAccountDetailsStatus string

const (
	MyAccountDetailsStatusStandard    MyAccountDetailsStatus = "standard"
	MyAccountDetailsStatusFounder     MyAccountDetailsStatus = "founder"
	MyAccountDetailsStatusGoldFounder MyAccountDetailsStatus = "gold_founder"
	MyAccountDetailsStatusVipFounder  MyAccountDetailsStatus = "vip_founder"
)

// AllValues returns all MyAccountDetailsStatus values.
func (MyAccountDetailsStatus) AllValues() []MyAccountDetailsStatus {
	return []MyAccountDetailsStatus{
		MyAccountDetailsStatusStandard,
		MyAccountDetailsStatusFounder,
		MyAccountDetailsStatusGoldFounder,
		MyAccountDetailsStatusVipFounder,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MyAccountDetailsStatus) MarshalText() ([]byte, error) {
	switch s {
	case MyAccountDetailsStatusStandard:
		return []byte(s), nil
	case MyAccountDetailsStatusFounder:
		return []byte(s), nil
	case MyAccountDetailsStatusGoldFounder:
		return []byte(s), nil
	case MyAccountDetailsStatusVipFounder:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MyAccountDetailsStatus) UnmarshalText(data []byte) error {
	switch MyAccountDetailsStatus(data) {
	case MyAccountDetailsStatusStandard:
		*s = MyAccountDetailsStatusStandard
		return nil
	case MyAccountDetailsStatusFounder:
		*s = MyAccountDetailsStatusFounder
		return nil
	case MyAccountDetailsStatusGoldFounder:
		*s = MyAccountDetailsStatusGoldFounder
		return nil
	case MyAccountDetailsStatusVipFounder:
		*s = MyAccountDetailsStatusVipFounder
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MyCharactersListSchema
type MyCharactersListSchema struct {
	// List of your characters.
	Data []CharacterSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *MyCharactersListSchema) GetData() []CharacterSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *MyCharactersListSchema) SetData(val []CharacterSchema) {
	s.Data = val
}

// NewOptAccountDetailsBadges returns new OptAccountDetailsBadges with value set to v.
func NewOptAccountDetailsBadges(v AccountDetailsBadges) OptAccountDetailsBadges {
	return OptAccountDetailsBadges{
		Value: v,
		Set:   true,
	}
}

// OptAccountDetailsBadges is optional AccountDetailsBadges.
type OptAccountDetailsBadges struct {
	Value AccountDetailsBadges
	Set   bool
}

// IsSet returns true if OptAccountDetailsBadges was set.
func (o OptAccountDetailsBadges) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountDetailsBadges) Reset() {
	var v AccountDetailsBadges
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountDetailsBadges) SetTo(v AccountDetailsBadges) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountDetailsBadges) Get() (v AccountDetailsBadges, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountDetailsBadges) Or(d AccountDetailsBadges) AccountDetailsBadges {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBankItemTransactionSchemaItemCraft returns new OptBankItemTransactionSchemaItemCraft with value set to v.
func NewOptBankItemTransactionSchemaItemCraft(v BankItemTransactionSchemaItemCraft) OptBankItemTransactionSchemaItemCraft {
	return OptBankItemTransactionSchemaItemCraft{
		Value: v,
		Set:   true,
	}
}

// OptBankItemTransactionSchemaItemCraft is optional BankItemTransactionSchemaItemCraft.
type OptBankItemTransactionSchemaItemCraft struct {
	Value BankItemTransactionSchemaItemCraft
	Set   bool
}

// IsSet returns true if OptBankItemTransactionSchemaItemCraft was set.
func (o OptBankItemTransactionSchemaItemCraft) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBankItemTransactionSchemaItemCraft) Reset() {
	var v BankItemTransactionSchemaItemCraft
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBankItemTransactionSchemaItemCraft) SetTo(v BankItemTransactionSchemaItemCraft) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBankItemTransactionSchemaItemCraft) Get() (v BankItemTransactionSchemaItemCraft, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBankItemTransactionSchemaItemCraft) Or(d BankItemTransactionSchemaItemCraft) BankItemTransactionSchemaItemCraft {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCraftSchemaSkill returns new OptCraftSchemaSkill with value set to v.
func NewOptCraftSchemaSkill(v CraftSchemaSkill) OptCraftSchemaSkill {
	return OptCraftSchemaSkill{
		Value: v,
		Set:   true,
	}
}

// OptCraftSchemaSkill is optional CraftSchemaSkill.
type OptCraftSchemaSkill struct {
	Value CraftSchemaSkill
	Set   bool
}

// IsSet returns true if OptCraftSchemaSkill was set.
func (o OptCraftSchemaSkill) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCraftSchemaSkill) Reset() {
	var v CraftSchemaSkill
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCraftSchemaSkill) SetTo(v CraftSchemaSkill) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCraftSchemaSkill) Get() (v CraftSchemaSkill, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCraftSchemaSkill) Or(d CraftSchemaSkill) CraftSchemaSkill {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageAccountAchievementSchemaPages returns new OptDataPageAccountAchievementSchemaPages with value set to v.
func NewOptDataPageAccountAchievementSchemaPages(v DataPageAccountAchievementSchemaPages) OptDataPageAccountAchievementSchemaPages {
	return OptDataPageAccountAchievementSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageAccountAchievementSchemaPages is optional DataPageAccountAchievementSchemaPages.
type OptDataPageAccountAchievementSchemaPages struct {
	Value DataPageAccountAchievementSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageAccountAchievementSchemaPages was set.
func (o OptDataPageAccountAchievementSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageAccountAchievementSchemaPages) Reset() {
	var v DataPageAccountAchievementSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageAccountAchievementSchemaPages) SetTo(v DataPageAccountAchievementSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageAccountAchievementSchemaPages) Get() (v DataPageAccountAchievementSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageAccountAchievementSchemaPages) Or(d DataPageAccountAchievementSchemaPages) DataPageAccountAchievementSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageAccountLeaderboardSchemaPages returns new OptDataPageAccountLeaderboardSchemaPages with value set to v.
func NewOptDataPageAccountLeaderboardSchemaPages(v DataPageAccountLeaderboardSchemaPages) OptDataPageAccountLeaderboardSchemaPages {
	return OptDataPageAccountLeaderboardSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageAccountLeaderboardSchemaPages is optional DataPageAccountLeaderboardSchemaPages.
type OptDataPageAccountLeaderboardSchemaPages struct {
	Value DataPageAccountLeaderboardSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageAccountLeaderboardSchemaPages was set.
func (o OptDataPageAccountLeaderboardSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageAccountLeaderboardSchemaPages) Reset() {
	var v DataPageAccountLeaderboardSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageAccountLeaderboardSchemaPages) SetTo(v DataPageAccountLeaderboardSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageAccountLeaderboardSchemaPages) Get() (v DataPageAccountLeaderboardSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageAccountLeaderboardSchemaPages) Or(d DataPageAccountLeaderboardSchemaPages) DataPageAccountLeaderboardSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageAchievementSchemaPages returns new OptDataPageAchievementSchemaPages with value set to v.
func NewOptDataPageAchievementSchemaPages(v DataPageAchievementSchemaPages) OptDataPageAchievementSchemaPages {
	return OptDataPageAchievementSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageAchievementSchemaPages is optional DataPageAchievementSchemaPages.
type OptDataPageAchievementSchemaPages struct {
	Value DataPageAchievementSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageAchievementSchemaPages was set.
func (o OptDataPageAchievementSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageAchievementSchemaPages) Reset() {
	var v DataPageAchievementSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageAchievementSchemaPages) SetTo(v DataPageAchievementSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageAchievementSchemaPages) Get() (v DataPageAchievementSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageAchievementSchemaPages) Or(d DataPageAchievementSchemaPages) DataPageAchievementSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageActiveEventSchemaPages returns new OptDataPageActiveEventSchemaPages with value set to v.
func NewOptDataPageActiveEventSchemaPages(v DataPageActiveEventSchemaPages) OptDataPageActiveEventSchemaPages {
	return OptDataPageActiveEventSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageActiveEventSchemaPages is optional DataPageActiveEventSchemaPages.
type OptDataPageActiveEventSchemaPages struct {
	Value DataPageActiveEventSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageActiveEventSchemaPages was set.
func (o OptDataPageActiveEventSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageActiveEventSchemaPages) Reset() {
	var v DataPageActiveEventSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageActiveEventSchemaPages) SetTo(v DataPageActiveEventSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageActiveEventSchemaPages) Get() (v DataPageActiveEventSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageActiveEventSchemaPages) Or(d DataPageActiveEventSchemaPages) DataPageActiveEventSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageCharacterLeaderboardSchemaPages returns new OptDataPageCharacterLeaderboardSchemaPages with value set to v.
func NewOptDataPageCharacterLeaderboardSchemaPages(v DataPageCharacterLeaderboardSchemaPages) OptDataPageCharacterLeaderboardSchemaPages {
	return OptDataPageCharacterLeaderboardSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageCharacterLeaderboardSchemaPages is optional DataPageCharacterLeaderboardSchemaPages.
type OptDataPageCharacterLeaderboardSchemaPages struct {
	Value DataPageCharacterLeaderboardSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageCharacterLeaderboardSchemaPages was set.
func (o OptDataPageCharacterLeaderboardSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageCharacterLeaderboardSchemaPages) Reset() {
	var v DataPageCharacterLeaderboardSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageCharacterLeaderboardSchemaPages) SetTo(v DataPageCharacterLeaderboardSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageCharacterLeaderboardSchemaPages) Get() (v DataPageCharacterLeaderboardSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageCharacterLeaderboardSchemaPages) Or(d DataPageCharacterLeaderboardSchemaPages) DataPageCharacterLeaderboardSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageDropRateSchemaPages returns new OptDataPageDropRateSchemaPages with value set to v.
func NewOptDataPageDropRateSchemaPages(v DataPageDropRateSchemaPages) OptDataPageDropRateSchemaPages {
	return OptDataPageDropRateSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageDropRateSchemaPages is optional DataPageDropRateSchemaPages.
type OptDataPageDropRateSchemaPages struct {
	Value DataPageDropRateSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageDropRateSchemaPages was set.
func (o OptDataPageDropRateSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageDropRateSchemaPages) Reset() {
	var v DataPageDropRateSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageDropRateSchemaPages) SetTo(v DataPageDropRateSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageDropRateSchemaPages) Get() (v DataPageDropRateSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageDropRateSchemaPages) Or(d DataPageDropRateSchemaPages) DataPageDropRateSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageEventSchemaPages returns new OptDataPageEventSchemaPages with value set to v.
func NewOptDataPageEventSchemaPages(v DataPageEventSchemaPages) OptDataPageEventSchemaPages {
	return OptDataPageEventSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageEventSchemaPages is optional DataPageEventSchemaPages.
type OptDataPageEventSchemaPages struct {
	Value DataPageEventSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageEventSchemaPages was set.
func (o OptDataPageEventSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageEventSchemaPages) Reset() {
	var v DataPageEventSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageEventSchemaPages) SetTo(v DataPageEventSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageEventSchemaPages) Get() (v DataPageEventSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageEventSchemaPages) Or(d DataPageEventSchemaPages) DataPageEventSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageGEOrderSchemaPages returns new OptDataPageGEOrderSchemaPages with value set to v.
func NewOptDataPageGEOrderSchemaPages(v DataPageGEOrderSchemaPages) OptDataPageGEOrderSchemaPages {
	return OptDataPageGEOrderSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageGEOrderSchemaPages is optional DataPageGEOrderSchemaPages.
type OptDataPageGEOrderSchemaPages struct {
	Value DataPageGEOrderSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageGEOrderSchemaPages was set.
func (o OptDataPageGEOrderSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageGEOrderSchemaPages) Reset() {
	var v DataPageGEOrderSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageGEOrderSchemaPages) SetTo(v DataPageGEOrderSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageGEOrderSchemaPages) Get() (v DataPageGEOrderSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageGEOrderSchemaPages) Or(d DataPageGEOrderSchemaPages) DataPageGEOrderSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageGeOrderHistorySchemaPages returns new OptDataPageGeOrderHistorySchemaPages with value set to v.
func NewOptDataPageGeOrderHistorySchemaPages(v DataPageGeOrderHistorySchemaPages) OptDataPageGeOrderHistorySchemaPages {
	return OptDataPageGeOrderHistorySchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageGeOrderHistorySchemaPages is optional DataPageGeOrderHistorySchemaPages.
type OptDataPageGeOrderHistorySchemaPages struct {
	Value DataPageGeOrderHistorySchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageGeOrderHistorySchemaPages was set.
func (o OptDataPageGeOrderHistorySchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageGeOrderHistorySchemaPages) Reset() {
	var v DataPageGeOrderHistorySchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageGeOrderHistorySchemaPages) SetTo(v DataPageGeOrderHistorySchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageGeOrderHistorySchemaPages) Get() (v DataPageGeOrderHistorySchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageGeOrderHistorySchemaPages) Or(d DataPageGeOrderHistorySchemaPages) DataPageGeOrderHistorySchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageItemSchemaPages returns new OptDataPageItemSchemaPages with value set to v.
func NewOptDataPageItemSchemaPages(v DataPageItemSchemaPages) OptDataPageItemSchemaPages {
	return OptDataPageItemSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageItemSchemaPages is optional DataPageItemSchemaPages.
type OptDataPageItemSchemaPages struct {
	Value DataPageItemSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageItemSchemaPages was set.
func (o OptDataPageItemSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageItemSchemaPages) Reset() {
	var v DataPageItemSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageItemSchemaPages) SetTo(v DataPageItemSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageItemSchemaPages) Get() (v DataPageItemSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageItemSchemaPages) Or(d DataPageItemSchemaPages) DataPageItemSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageLogSchemaPages returns new OptDataPageLogSchemaPages with value set to v.
func NewOptDataPageLogSchemaPages(v DataPageLogSchemaPages) OptDataPageLogSchemaPages {
	return OptDataPageLogSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageLogSchemaPages is optional DataPageLogSchemaPages.
type OptDataPageLogSchemaPages struct {
	Value DataPageLogSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageLogSchemaPages was set.
func (o OptDataPageLogSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageLogSchemaPages) Reset() {
	var v DataPageLogSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageLogSchemaPages) SetTo(v DataPageLogSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageLogSchemaPages) Get() (v DataPageLogSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageLogSchemaPages) Or(d DataPageLogSchemaPages) DataPageLogSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageMapSchemaPages returns new OptDataPageMapSchemaPages with value set to v.
func NewOptDataPageMapSchemaPages(v DataPageMapSchemaPages) OptDataPageMapSchemaPages {
	return OptDataPageMapSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageMapSchemaPages is optional DataPageMapSchemaPages.
type OptDataPageMapSchemaPages struct {
	Value DataPageMapSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageMapSchemaPages was set.
func (o OptDataPageMapSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageMapSchemaPages) Reset() {
	var v DataPageMapSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageMapSchemaPages) SetTo(v DataPageMapSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageMapSchemaPages) Get() (v DataPageMapSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageMapSchemaPages) Or(d DataPageMapSchemaPages) DataPageMapSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageMonsterSchemaPages returns new OptDataPageMonsterSchemaPages with value set to v.
func NewOptDataPageMonsterSchemaPages(v DataPageMonsterSchemaPages) OptDataPageMonsterSchemaPages {
	return OptDataPageMonsterSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageMonsterSchemaPages is optional DataPageMonsterSchemaPages.
type OptDataPageMonsterSchemaPages struct {
	Value DataPageMonsterSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageMonsterSchemaPages was set.
func (o OptDataPageMonsterSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageMonsterSchemaPages) Reset() {
	var v DataPageMonsterSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageMonsterSchemaPages) SetTo(v DataPageMonsterSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageMonsterSchemaPages) Get() (v DataPageMonsterSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageMonsterSchemaPages) Or(d DataPageMonsterSchemaPages) DataPageMonsterSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageResourceSchemaPages returns new OptDataPageResourceSchemaPages with value set to v.
func NewOptDataPageResourceSchemaPages(v DataPageResourceSchemaPages) OptDataPageResourceSchemaPages {
	return OptDataPageResourceSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageResourceSchemaPages is optional DataPageResourceSchemaPages.
type OptDataPageResourceSchemaPages struct {
	Value DataPageResourceSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageResourceSchemaPages was set.
func (o OptDataPageResourceSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageResourceSchemaPages) Reset() {
	var v DataPageResourceSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageResourceSchemaPages) SetTo(v DataPageResourceSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageResourceSchemaPages) Get() (v DataPageResourceSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageResourceSchemaPages) Or(d DataPageResourceSchemaPages) DataPageResourceSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageSimpleItemSchemaPages returns new OptDataPageSimpleItemSchemaPages with value set to v.
func NewOptDataPageSimpleItemSchemaPages(v DataPageSimpleItemSchemaPages) OptDataPageSimpleItemSchemaPages {
	return OptDataPageSimpleItemSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageSimpleItemSchemaPages is optional DataPageSimpleItemSchemaPages.
type OptDataPageSimpleItemSchemaPages struct {
	Value DataPageSimpleItemSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageSimpleItemSchemaPages was set.
func (o OptDataPageSimpleItemSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageSimpleItemSchemaPages) Reset() {
	var v DataPageSimpleItemSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageSimpleItemSchemaPages) SetTo(v DataPageSimpleItemSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageSimpleItemSchemaPages) Get() (v DataPageSimpleItemSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageSimpleItemSchemaPages) Or(d DataPageSimpleItemSchemaPages) DataPageSimpleItemSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataPageTaskFullSchemaPages returns new OptDataPageTaskFullSchemaPages with value set to v.
func NewOptDataPageTaskFullSchemaPages(v DataPageTaskFullSchemaPages) OptDataPageTaskFullSchemaPages {
	return OptDataPageTaskFullSchemaPages{
		Value: v,
		Set:   true,
	}
}

// OptDataPageTaskFullSchemaPages is optional DataPageTaskFullSchemaPages.
type OptDataPageTaskFullSchemaPages struct {
	Value DataPageTaskFullSchemaPages
	Set   bool
}

// IsSet returns true if OptDataPageTaskFullSchemaPages was set.
func (o OptDataPageTaskFullSchemaPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataPageTaskFullSchemaPages) Reset() {
	var v DataPageTaskFullSchemaPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataPageTaskFullSchemaPages) SetTo(v DataPageTaskFullSchemaPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataPageTaskFullSchemaPages) Get() (v DataPageTaskFullSchemaPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataPageTaskFullSchemaPages) Or(d DataPageTaskFullSchemaPages) DataPageTaskFullSchemaPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEquipRequestSchemaItemCraft returns new OptEquipRequestSchemaItemCraft with value set to v.
func NewOptEquipRequestSchemaItemCraft(v EquipRequestSchemaItemCraft) OptEquipRequestSchemaItemCraft {
	return OptEquipRequestSchemaItemCraft{
		Value: v,
		Set:   true,
	}
}

// OptEquipRequestSchemaItemCraft is optional EquipRequestSchemaItemCraft.
type OptEquipRequestSchemaItemCraft struct {
	Value EquipRequestSchemaItemCraft
	Set   bool
}

// IsSet returns true if OptEquipRequestSchemaItemCraft was set.
func (o OptEquipRequestSchemaItemCraft) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEquipRequestSchemaItemCraft) Reset() {
	var v EquipRequestSchemaItemCraft
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEquipRequestSchemaItemCraft) SetTo(v EquipRequestSchemaItemCraft) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEquipRequestSchemaItemCraft) Get() (v EquipRequestSchemaItemCraft, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEquipRequestSchemaItemCraft) Or(d EquipRequestSchemaItemCraft) EquipRequestSchemaItemCraft {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountAchievementsAccountsAccountAchievementsGetType returns new OptGetAccountAchievementsAccountsAccountAchievementsGetType with value set to v.
func NewOptGetAccountAchievementsAccountsAccountAchievementsGetType(v GetAccountAchievementsAccountsAccountAchievementsGetType) OptGetAccountAchievementsAccountsAccountAchievementsGetType {
	return OptGetAccountAchievementsAccountsAccountAchievementsGetType{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountAchievementsAccountsAccountAchievementsGetType is optional GetAccountAchievementsAccountsAccountAchievementsGetType.
type OptGetAccountAchievementsAccountsAccountAchievementsGetType struct {
	Value GetAccountAchievementsAccountsAccountAchievementsGetType
	Set   bool
}

// IsSet returns true if OptGetAccountAchievementsAccountsAccountAchievementsGetType was set.
func (o OptGetAccountAchievementsAccountsAccountAchievementsGetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountAchievementsAccountsAccountAchievementsGetType) Reset() {
	var v GetAccountAchievementsAccountsAccountAchievementsGetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountAchievementsAccountsAccountAchievementsGetType) SetTo(v GetAccountAchievementsAccountsAccountAchievementsGetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountAchievementsAccountsAccountAchievementsGetType) Get() (v GetAccountAchievementsAccountsAccountAchievementsGetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountAchievementsAccountsAccountAchievementsGetType) Or(d GetAccountAchievementsAccountsAccountAchievementsGetType) GetAccountAchievementsAccountsAccountAchievementsGetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllAchievementsAchievementsGetType returns new OptGetAllAchievementsAchievementsGetType with value set to v.
func NewOptGetAllAchievementsAchievementsGetType(v GetAllAchievementsAchievementsGetType) OptGetAllAchievementsAchievementsGetType {
	return OptGetAllAchievementsAchievementsGetType{
		Value: v,
		Set:   true,
	}
}

// OptGetAllAchievementsAchievementsGetType is optional GetAllAchievementsAchievementsGetType.
type OptGetAllAchievementsAchievementsGetType struct {
	Value GetAllAchievementsAchievementsGetType
	Set   bool
}

// IsSet returns true if OptGetAllAchievementsAchievementsGetType was set.
func (o OptGetAllAchievementsAchievementsGetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllAchievementsAchievementsGetType) Reset() {
	var v GetAllAchievementsAchievementsGetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllAchievementsAchievementsGetType) SetTo(v GetAllAchievementsAchievementsGetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllAchievementsAchievementsGetType) Get() (v GetAllAchievementsAchievementsGetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllAchievementsAchievementsGetType) Or(d GetAllAchievementsAchievementsGetType) GetAllAchievementsAchievementsGetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllItemsItemsGetCraftSkill returns new OptGetAllItemsItemsGetCraftSkill with value set to v.
func NewOptGetAllItemsItemsGetCraftSkill(v GetAllItemsItemsGetCraftSkill) OptGetAllItemsItemsGetCraftSkill {
	return OptGetAllItemsItemsGetCraftSkill{
		Value: v,
		Set:   true,
	}
}

// OptGetAllItemsItemsGetCraftSkill is optional GetAllItemsItemsGetCraftSkill.
type OptGetAllItemsItemsGetCraftSkill struct {
	Value GetAllItemsItemsGetCraftSkill
	Set   bool
}

// IsSet returns true if OptGetAllItemsItemsGetCraftSkill was set.
func (o OptGetAllItemsItemsGetCraftSkill) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllItemsItemsGetCraftSkill) Reset() {
	var v GetAllItemsItemsGetCraftSkill
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllItemsItemsGetCraftSkill) SetTo(v GetAllItemsItemsGetCraftSkill) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllItemsItemsGetCraftSkill) Get() (v GetAllItemsItemsGetCraftSkill, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllItemsItemsGetCraftSkill) Or(d GetAllItemsItemsGetCraftSkill) GetAllItemsItemsGetCraftSkill {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllItemsItemsGetType returns new OptGetAllItemsItemsGetType with value set to v.
func NewOptGetAllItemsItemsGetType(v GetAllItemsItemsGetType) OptGetAllItemsItemsGetType {
	return OptGetAllItemsItemsGetType{
		Value: v,
		Set:   true,
	}
}

// OptGetAllItemsItemsGetType is optional GetAllItemsItemsGetType.
type OptGetAllItemsItemsGetType struct {
	Value GetAllItemsItemsGetType
	Set   bool
}

// IsSet returns true if OptGetAllItemsItemsGetType was set.
func (o OptGetAllItemsItemsGetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllItemsItemsGetType) Reset() {
	var v GetAllItemsItemsGetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllItemsItemsGetType) SetTo(v GetAllItemsItemsGetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllItemsItemsGetType) Get() (v GetAllItemsItemsGetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllItemsItemsGetType) Or(d GetAllItemsItemsGetType) GetAllItemsItemsGetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllMapsMapsGetContentType returns new OptGetAllMapsMapsGetContentType with value set to v.
func NewOptGetAllMapsMapsGetContentType(v GetAllMapsMapsGetContentType) OptGetAllMapsMapsGetContentType {
	return OptGetAllMapsMapsGetContentType{
		Value: v,
		Set:   true,
	}
}

// OptGetAllMapsMapsGetContentType is optional GetAllMapsMapsGetContentType.
type OptGetAllMapsMapsGetContentType struct {
	Value GetAllMapsMapsGetContentType
	Set   bool
}

// IsSet returns true if OptGetAllMapsMapsGetContentType was set.
func (o OptGetAllMapsMapsGetContentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllMapsMapsGetContentType) Reset() {
	var v GetAllMapsMapsGetContentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllMapsMapsGetContentType) SetTo(v GetAllMapsMapsGetContentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllMapsMapsGetContentType) Get() (v GetAllMapsMapsGetContentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllMapsMapsGetContentType) Or(d GetAllMapsMapsGetContentType) GetAllMapsMapsGetContentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllResourcesResourcesGetSkill returns new OptGetAllResourcesResourcesGetSkill with value set to v.
func NewOptGetAllResourcesResourcesGetSkill(v GetAllResourcesResourcesGetSkill) OptGetAllResourcesResourcesGetSkill {
	return OptGetAllResourcesResourcesGetSkill{
		Value: v,
		Set:   true,
	}
}

// OptGetAllResourcesResourcesGetSkill is optional GetAllResourcesResourcesGetSkill.
type OptGetAllResourcesResourcesGetSkill struct {
	Value GetAllResourcesResourcesGetSkill
	Set   bool
}

// IsSet returns true if OptGetAllResourcesResourcesGetSkill was set.
func (o OptGetAllResourcesResourcesGetSkill) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllResourcesResourcesGetSkill) Reset() {
	var v GetAllResourcesResourcesGetSkill
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllResourcesResourcesGetSkill) SetTo(v GetAllResourcesResourcesGetSkill) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllResourcesResourcesGetSkill) Get() (v GetAllResourcesResourcesGetSkill, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllResourcesResourcesGetSkill) Or(d GetAllResourcesResourcesGetSkill) GetAllResourcesResourcesGetSkill {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllTasksTasksListGetSkill returns new OptGetAllTasksTasksListGetSkill with value set to v.
func NewOptGetAllTasksTasksListGetSkill(v GetAllTasksTasksListGetSkill) OptGetAllTasksTasksListGetSkill {
	return OptGetAllTasksTasksListGetSkill{
		Value: v,
		Set:   true,
	}
}

// OptGetAllTasksTasksListGetSkill is optional GetAllTasksTasksListGetSkill.
type OptGetAllTasksTasksListGetSkill struct {
	Value GetAllTasksTasksListGetSkill
	Set   bool
}

// IsSet returns true if OptGetAllTasksTasksListGetSkill was set.
func (o OptGetAllTasksTasksListGetSkill) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllTasksTasksListGetSkill) Reset() {
	var v GetAllTasksTasksListGetSkill
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllTasksTasksListGetSkill) SetTo(v GetAllTasksTasksListGetSkill) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllTasksTasksListGetSkill) Get() (v GetAllTasksTasksListGetSkill, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllTasksTasksListGetSkill) Or(d GetAllTasksTasksListGetSkill) GetAllTasksTasksListGetSkill {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAllTasksTasksListGetType returns new OptGetAllTasksTasksListGetType with value set to v.
func NewOptGetAllTasksTasksListGetType(v GetAllTasksTasksListGetType) OptGetAllTasksTasksListGetType {
	return OptGetAllTasksTasksListGetType{
		Value: v,
		Set:   true,
	}
}

// OptGetAllTasksTasksListGetType is optional GetAllTasksTasksListGetType.
type OptGetAllTasksTasksListGetType struct {
	Value GetAllTasksTasksListGetType
	Set   bool
}

// IsSet returns true if OptGetAllTasksTasksListGetType was set.
func (o OptGetAllTasksTasksListGetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAllTasksTasksListGetType) Reset() {
	var v GetAllTasksTasksListGetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAllTasksTasksListGetType) SetTo(v GetAllTasksTasksListGetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAllTasksTasksListGetType) Get() (v GetAllTasksTasksListGetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAllTasksTasksListGetType) Or(d GetAllTasksTasksListGetType) GetAllTasksTasksListGetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCharactersLeaderboardLeaderboardCharactersGetSort returns new OptGetCharactersLeaderboardLeaderboardCharactersGetSort with value set to v.
func NewOptGetCharactersLeaderboardLeaderboardCharactersGetSort(v GetCharactersLeaderboardLeaderboardCharactersGetSort) OptGetCharactersLeaderboardLeaderboardCharactersGetSort {
	return OptGetCharactersLeaderboardLeaderboardCharactersGetSort{
		Value: v,
		Set:   true,
	}
}

// OptGetCharactersLeaderboardLeaderboardCharactersGetSort is optional GetCharactersLeaderboardLeaderboardCharactersGetSort.
type OptGetCharactersLeaderboardLeaderboardCharactersGetSort struct {
	Value GetCharactersLeaderboardLeaderboardCharactersGetSort
	Set   bool
}

// IsSet returns true if OptGetCharactersLeaderboardLeaderboardCharactersGetSort was set.
func (o OptGetCharactersLeaderboardLeaderboardCharactersGetSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCharactersLeaderboardLeaderboardCharactersGetSort) Reset() {
	var v GetCharactersLeaderboardLeaderboardCharactersGetSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCharactersLeaderboardLeaderboardCharactersGetSort) SetTo(v GetCharactersLeaderboardLeaderboardCharactersGetSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCharactersLeaderboardLeaderboardCharactersGetSort) Get() (v GetCharactersLeaderboardLeaderboardCharactersGetSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCharactersLeaderboardLeaderboardCharactersGetSort) Or(d GetCharactersLeaderboardLeaderboardCharactersGetSort) GetCharactersLeaderboardLeaderboardCharactersGetSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptItemSchemaCraft returns new OptItemSchemaCraft with value set to v.
func NewOptItemSchemaCraft(v ItemSchemaCraft) OptItemSchemaCraft {
	return OptItemSchemaCraft{
		Value: v,
		Set:   true,
	}
}

// OptItemSchemaCraft is optional ItemSchemaCraft.
type OptItemSchemaCraft struct {
	Value ItemSchemaCraft
	Set   bool
}

// IsSet returns true if OptItemSchemaCraft was set.
func (o OptItemSchemaCraft) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptItemSchemaCraft) Reset() {
	var v ItemSchemaCraft
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptItemSchemaCraft) SetTo(v ItemSchemaCraft) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptItemSchemaCraft) Get() (v ItemSchemaCraft, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptItemSchemaCraft) Or(d ItemSchemaCraft) ItemSchemaCraft {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMyAccountDetailsBadges returns new OptMyAccountDetailsBadges with value set to v.
func NewOptMyAccountDetailsBadges(v MyAccountDetailsBadges) OptMyAccountDetailsBadges {
	return OptMyAccountDetailsBadges{
		Value: v,
		Set:   true,
	}
}

// OptMyAccountDetailsBadges is optional MyAccountDetailsBadges.
type OptMyAccountDetailsBadges struct {
	Value MyAccountDetailsBadges
	Set   bool
}

// IsSet returns true if OptMyAccountDetailsBadges was set.
func (o OptMyAccountDetailsBadges) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMyAccountDetailsBadges) Reset() {
	var v MyAccountDetailsBadges
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMyAccountDetailsBadges) SetTo(v MyAccountDetailsBadges) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMyAccountDetailsBadges) Get() (v MyAccountDetailsBadges, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMyAccountDetailsBadges) Or(d MyAccountDetailsBadges) MyAccountDetailsBadges {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUseItemSchemaItemCraft returns new OptUseItemSchemaItemCraft with value set to v.
func NewOptUseItemSchemaItemCraft(v UseItemSchemaItemCraft) OptUseItemSchemaItemCraft {
	return OptUseItemSchemaItemCraft{
		Value: v,
		Set:   true,
	}
}

// OptUseItemSchemaItemCraft is optional UseItemSchemaItemCraft.
type OptUseItemSchemaItemCraft struct {
	Value UseItemSchemaItemCraft
	Set   bool
}

// IsSet returns true if OptUseItemSchemaItemCraft was set.
func (o OptUseItemSchemaItemCraft) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUseItemSchemaItemCraft) Reset() {
	var v UseItemSchemaItemCraft
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUseItemSchemaItemCraft) SetTo(v UseItemSchemaItemCraft) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUseItemSchemaItemCraft) Get() (v UseItemSchemaItemCraft, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUseItemSchemaItemCraft) Or(d UseItemSchemaItemCraft) UseItemSchemaItemCraft {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/RecyclingDataSchema
type RecyclingDataSchema struct {
	// Cooldown details.
	Cooldown RecyclingDataSchemaCooldown `json:"cooldown"`
	// Craft details.
	Details RecyclingDataSchemaDetails `json:"details"`
	// Player details.
	Character RecyclingDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *RecyclingDataSchema) GetCooldown() RecyclingDataSchemaCooldown {
	return s.Cooldown
}

// GetDetails returns the value of Details.
func (s *RecyclingDataSchema) GetDetails() RecyclingDataSchemaDetails {
	return s.Details
}

// GetCharacter returns the value of Character.
func (s *RecyclingDataSchema) GetCharacter() RecyclingDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *RecyclingDataSchema) SetCooldown(val RecyclingDataSchemaCooldown) {
	s.Cooldown = val
}

// SetDetails sets the value of Details.
func (s *RecyclingDataSchema) SetDetails(val RecyclingDataSchemaDetails) {
	s.Details = val
}

// SetCharacter sets the value of Character.
func (s *RecyclingDataSchema) SetCharacter(val RecyclingDataSchemaCharacter) {
	s.Character = val
}

type RecyclingDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin RecyclingDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *RecyclingDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *RecyclingDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *RecyclingDataSchemaCharacter) GetSkin() RecyclingDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *RecyclingDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *RecyclingDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *RecyclingDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *RecyclingDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *RecyclingDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *RecyclingDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *RecyclingDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *RecyclingDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *RecyclingDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *RecyclingDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *RecyclingDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *RecyclingDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *RecyclingDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *RecyclingDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *RecyclingDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *RecyclingDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *RecyclingDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *RecyclingDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *RecyclingDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *RecyclingDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *RecyclingDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *RecyclingDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *RecyclingDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *RecyclingDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *RecyclingDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *RecyclingDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *RecyclingDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *RecyclingDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *RecyclingDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *RecyclingDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *RecyclingDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *RecyclingDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *RecyclingDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *RecyclingDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *RecyclingDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *RecyclingDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *RecyclingDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *RecyclingDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *RecyclingDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *RecyclingDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *RecyclingDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *RecyclingDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *RecyclingDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *RecyclingDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *RecyclingDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *RecyclingDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *RecyclingDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *RecyclingDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *RecyclingDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *RecyclingDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *RecyclingDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *RecyclingDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *RecyclingDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *RecyclingDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *RecyclingDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *RecyclingDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *RecyclingDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *RecyclingDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *RecyclingDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *RecyclingDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *RecyclingDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *RecyclingDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *RecyclingDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *RecyclingDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *RecyclingDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *RecyclingDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *RecyclingDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *RecyclingDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *RecyclingDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *RecyclingDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *RecyclingDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *RecyclingDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *RecyclingDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *RecyclingDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *RecyclingDataSchemaCharacter) SetSkin(val RecyclingDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *RecyclingDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *RecyclingDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *RecyclingDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *RecyclingDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *RecyclingDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *RecyclingDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *RecyclingDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *RecyclingDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *RecyclingDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *RecyclingDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *RecyclingDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *RecyclingDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *RecyclingDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *RecyclingDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *RecyclingDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *RecyclingDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *RecyclingDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *RecyclingDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *RecyclingDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *RecyclingDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *RecyclingDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *RecyclingDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *RecyclingDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *RecyclingDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *RecyclingDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *RecyclingDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *RecyclingDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *RecyclingDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *RecyclingDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *RecyclingDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *RecyclingDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *RecyclingDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *RecyclingDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *RecyclingDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *RecyclingDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *RecyclingDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *RecyclingDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *RecyclingDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *RecyclingDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *RecyclingDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *RecyclingDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *RecyclingDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *RecyclingDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *RecyclingDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *RecyclingDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *RecyclingDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *RecyclingDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *RecyclingDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *RecyclingDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *RecyclingDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *RecyclingDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *RecyclingDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *RecyclingDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *RecyclingDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *RecyclingDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *RecyclingDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *RecyclingDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *RecyclingDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *RecyclingDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *RecyclingDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *RecyclingDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *RecyclingDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *RecyclingDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *RecyclingDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *RecyclingDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *RecyclingDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *RecyclingDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *RecyclingDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *RecyclingDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *RecyclingDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *RecyclingDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *RecyclingDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type RecyclingDataSchemaCharacterSkin string

const (
	RecyclingDataSchemaCharacterSkinMen1   RecyclingDataSchemaCharacterSkin = "men1"
	RecyclingDataSchemaCharacterSkinMen2   RecyclingDataSchemaCharacterSkin = "men2"
	RecyclingDataSchemaCharacterSkinMen3   RecyclingDataSchemaCharacterSkin = "men3"
	RecyclingDataSchemaCharacterSkinWomen1 RecyclingDataSchemaCharacterSkin = "women1"
	RecyclingDataSchemaCharacterSkinWomen2 RecyclingDataSchemaCharacterSkin = "women2"
	RecyclingDataSchemaCharacterSkinWomen3 RecyclingDataSchemaCharacterSkin = "women3"
)

// AllValues returns all RecyclingDataSchemaCharacterSkin values.
func (RecyclingDataSchemaCharacterSkin) AllValues() []RecyclingDataSchemaCharacterSkin {
	return []RecyclingDataSchemaCharacterSkin{
		RecyclingDataSchemaCharacterSkinMen1,
		RecyclingDataSchemaCharacterSkinMen2,
		RecyclingDataSchemaCharacterSkinMen3,
		RecyclingDataSchemaCharacterSkinWomen1,
		RecyclingDataSchemaCharacterSkinWomen2,
		RecyclingDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecyclingDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case RecyclingDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case RecyclingDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case RecyclingDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case RecyclingDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case RecyclingDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case RecyclingDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecyclingDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch RecyclingDataSchemaCharacterSkin(data) {
	case RecyclingDataSchemaCharacterSkinMen1:
		*s = RecyclingDataSchemaCharacterSkinMen1
		return nil
	case RecyclingDataSchemaCharacterSkinMen2:
		*s = RecyclingDataSchemaCharacterSkinMen2
		return nil
	case RecyclingDataSchemaCharacterSkinMen3:
		*s = RecyclingDataSchemaCharacterSkinMen3
		return nil
	case RecyclingDataSchemaCharacterSkinWomen1:
		*s = RecyclingDataSchemaCharacterSkinWomen1
		return nil
	case RecyclingDataSchemaCharacterSkinWomen2:
		*s = RecyclingDataSchemaCharacterSkinWomen2
		return nil
	case RecyclingDataSchemaCharacterSkinWomen3:
		*s = RecyclingDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecyclingDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason RecyclingDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *RecyclingDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *RecyclingDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *RecyclingDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *RecyclingDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *RecyclingDataSchemaCooldown) GetReason() RecyclingDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *RecyclingDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *RecyclingDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *RecyclingDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *RecyclingDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *RecyclingDataSchemaCooldown) SetReason(val RecyclingDataSchemaCooldownReason) {
	s.Reason = val
}

type RecyclingDataSchemaCooldownReason string

const (
	RecyclingDataSchemaCooldownReasonMovement         RecyclingDataSchemaCooldownReason = "movement"
	RecyclingDataSchemaCooldownReasonFight            RecyclingDataSchemaCooldownReason = "fight"
	RecyclingDataSchemaCooldownReasonCrafting         RecyclingDataSchemaCooldownReason = "crafting"
	RecyclingDataSchemaCooldownReasonGathering        RecyclingDataSchemaCooldownReason = "gathering"
	RecyclingDataSchemaCooldownReasonBuyGe            RecyclingDataSchemaCooldownReason = "buy_ge"
	RecyclingDataSchemaCooldownReasonSellGe           RecyclingDataSchemaCooldownReason = "sell_ge"
	RecyclingDataSchemaCooldownReasonCancelGe         RecyclingDataSchemaCooldownReason = "cancel_ge"
	RecyclingDataSchemaCooldownReasonDeleteItem       RecyclingDataSchemaCooldownReason = "delete_item"
	RecyclingDataSchemaCooldownReasonDeposit          RecyclingDataSchemaCooldownReason = "deposit"
	RecyclingDataSchemaCooldownReasonWithdraw         RecyclingDataSchemaCooldownReason = "withdraw"
	RecyclingDataSchemaCooldownReasonDepositGold      RecyclingDataSchemaCooldownReason = "deposit_gold"
	RecyclingDataSchemaCooldownReasonWithdrawGold     RecyclingDataSchemaCooldownReason = "withdraw_gold"
	RecyclingDataSchemaCooldownReasonEquip            RecyclingDataSchemaCooldownReason = "equip"
	RecyclingDataSchemaCooldownReasonUnequip          RecyclingDataSchemaCooldownReason = "unequip"
	RecyclingDataSchemaCooldownReasonTask             RecyclingDataSchemaCooldownReason = "task"
	RecyclingDataSchemaCooldownReasonRecycling        RecyclingDataSchemaCooldownReason = "recycling"
	RecyclingDataSchemaCooldownReasonRest             RecyclingDataSchemaCooldownReason = "rest"
	RecyclingDataSchemaCooldownReasonUse              RecyclingDataSchemaCooldownReason = "use"
	RecyclingDataSchemaCooldownReasonBuyBankExpansion RecyclingDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all RecyclingDataSchemaCooldownReason values.
func (RecyclingDataSchemaCooldownReason) AllValues() []RecyclingDataSchemaCooldownReason {
	return []RecyclingDataSchemaCooldownReason{
		RecyclingDataSchemaCooldownReasonMovement,
		RecyclingDataSchemaCooldownReasonFight,
		RecyclingDataSchemaCooldownReasonCrafting,
		RecyclingDataSchemaCooldownReasonGathering,
		RecyclingDataSchemaCooldownReasonBuyGe,
		RecyclingDataSchemaCooldownReasonSellGe,
		RecyclingDataSchemaCooldownReasonCancelGe,
		RecyclingDataSchemaCooldownReasonDeleteItem,
		RecyclingDataSchemaCooldownReasonDeposit,
		RecyclingDataSchemaCooldownReasonWithdraw,
		RecyclingDataSchemaCooldownReasonDepositGold,
		RecyclingDataSchemaCooldownReasonWithdrawGold,
		RecyclingDataSchemaCooldownReasonEquip,
		RecyclingDataSchemaCooldownReasonUnequip,
		RecyclingDataSchemaCooldownReasonTask,
		RecyclingDataSchemaCooldownReasonRecycling,
		RecyclingDataSchemaCooldownReasonRest,
		RecyclingDataSchemaCooldownReasonUse,
		RecyclingDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecyclingDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case RecyclingDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case RecyclingDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecyclingDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch RecyclingDataSchemaCooldownReason(data) {
	case RecyclingDataSchemaCooldownReasonMovement:
		*s = RecyclingDataSchemaCooldownReasonMovement
		return nil
	case RecyclingDataSchemaCooldownReasonFight:
		*s = RecyclingDataSchemaCooldownReasonFight
		return nil
	case RecyclingDataSchemaCooldownReasonCrafting:
		*s = RecyclingDataSchemaCooldownReasonCrafting
		return nil
	case RecyclingDataSchemaCooldownReasonGathering:
		*s = RecyclingDataSchemaCooldownReasonGathering
		return nil
	case RecyclingDataSchemaCooldownReasonBuyGe:
		*s = RecyclingDataSchemaCooldownReasonBuyGe
		return nil
	case RecyclingDataSchemaCooldownReasonSellGe:
		*s = RecyclingDataSchemaCooldownReasonSellGe
		return nil
	case RecyclingDataSchemaCooldownReasonCancelGe:
		*s = RecyclingDataSchemaCooldownReasonCancelGe
		return nil
	case RecyclingDataSchemaCooldownReasonDeleteItem:
		*s = RecyclingDataSchemaCooldownReasonDeleteItem
		return nil
	case RecyclingDataSchemaCooldownReasonDeposit:
		*s = RecyclingDataSchemaCooldownReasonDeposit
		return nil
	case RecyclingDataSchemaCooldownReasonWithdraw:
		*s = RecyclingDataSchemaCooldownReasonWithdraw
		return nil
	case RecyclingDataSchemaCooldownReasonDepositGold:
		*s = RecyclingDataSchemaCooldownReasonDepositGold
		return nil
	case RecyclingDataSchemaCooldownReasonWithdrawGold:
		*s = RecyclingDataSchemaCooldownReasonWithdrawGold
		return nil
	case RecyclingDataSchemaCooldownReasonEquip:
		*s = RecyclingDataSchemaCooldownReasonEquip
		return nil
	case RecyclingDataSchemaCooldownReasonUnequip:
		*s = RecyclingDataSchemaCooldownReasonUnequip
		return nil
	case RecyclingDataSchemaCooldownReasonTask:
		*s = RecyclingDataSchemaCooldownReasonTask
		return nil
	case RecyclingDataSchemaCooldownReasonRecycling:
		*s = RecyclingDataSchemaCooldownReasonRecycling
		return nil
	case RecyclingDataSchemaCooldownReasonRest:
		*s = RecyclingDataSchemaCooldownReasonRest
		return nil
	case RecyclingDataSchemaCooldownReasonUse:
		*s = RecyclingDataSchemaCooldownReasonUse
		return nil
	case RecyclingDataSchemaCooldownReasonBuyBankExpansion:
		*s = RecyclingDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecyclingDataSchemaDetails struct {
	// Objects received.
	Items []DropSchema `json:"items"`
}

// GetItems returns the value of Items.
func (s *RecyclingDataSchemaDetails) GetItems() []DropSchema {
	return s.Items
}

// SetItems sets the value of Items.
func (s *RecyclingDataSchemaDetails) SetItems(val []DropSchema) {
	s.Items = val
}

// Ref: #/components/schemas/RecyclingResponseSchema
type RecyclingResponseSchema struct {
	Data RecyclingDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *RecyclingResponseSchema) GetData() RecyclingDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecyclingResponseSchema) SetData(val RecyclingDataSchema) {
	s.Data = val
}

func (*RecyclingResponseSchema) actionRecyclingMyNameActionRecyclingPostRes() {}

// Ref: #/components/schemas/RecyclingSchema
type RecyclingSchema struct {
	// Item code.
	Code string `json:"code"`
	// Quantity of items to recycle.
	Quantity OptInt `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *RecyclingSchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *RecyclingSchema) GetQuantity() OptInt {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *RecyclingSchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *RecyclingSchema) SetQuantity(val OptInt) {
	s.Quantity = val
}

// Ref: #/components/schemas/ResourceResponseSchema
type ResourceResponseSchema struct {
	Data ResourceSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *ResourceResponseSchema) GetData() ResourceSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *ResourceResponseSchema) SetData(val ResourceSchema) {
	s.Data = val
}

func (*ResourceResponseSchema) getResourceResourcesCodeGetRes() {}

// Ref: #/components/schemas/ResourceSchema
type ResourceSchema struct {
	// The name of the resource.
	Name string `json:"name"`
	// The code of the resource. This is the resource's unique identifier (ID).
	Code string `json:"code"`
	// The skill required to gather this resource.
	Skill ResourceSchemaSkill `json:"skill"`
	// The skill level required to gather this resource.
	Level int `json:"level"`
	// The drops of this resource.
	Drops []DropRateSchema `json:"drops"`
}

// GetName returns the value of Name.
func (s *ResourceSchema) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ResourceSchema) GetCode() string {
	return s.Code
}

// GetSkill returns the value of Skill.
func (s *ResourceSchema) GetSkill() ResourceSchemaSkill {
	return s.Skill
}

// GetLevel returns the value of Level.
func (s *ResourceSchema) GetLevel() int {
	return s.Level
}

// GetDrops returns the value of Drops.
func (s *ResourceSchema) GetDrops() []DropRateSchema {
	return s.Drops
}

// SetName sets the value of Name.
func (s *ResourceSchema) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ResourceSchema) SetCode(val string) {
	s.Code = val
}

// SetSkill sets the value of Skill.
func (s *ResourceSchema) SetSkill(val ResourceSchemaSkill) {
	s.Skill = val
}

// SetLevel sets the value of Level.
func (s *ResourceSchema) SetLevel(val int) {
	s.Level = val
}

// SetDrops sets the value of Drops.
func (s *ResourceSchema) SetDrops(val []DropRateSchema) {
	s.Drops = val
}

type ResourceSchemaSkill string

const (
	ResourceSchemaSkillMining      ResourceSchemaSkill = "mining"
	ResourceSchemaSkillWoodcutting ResourceSchemaSkill = "woodcutting"
	ResourceSchemaSkillFishing     ResourceSchemaSkill = "fishing"
	ResourceSchemaSkillAlchemy     ResourceSchemaSkill = "alchemy"
)

// AllValues returns all ResourceSchemaSkill values.
func (ResourceSchemaSkill) AllValues() []ResourceSchemaSkill {
	return []ResourceSchemaSkill{
		ResourceSchemaSkillMining,
		ResourceSchemaSkillWoodcutting,
		ResourceSchemaSkillFishing,
		ResourceSchemaSkillAlchemy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceSchemaSkill) MarshalText() ([]byte, error) {
	switch s {
	case ResourceSchemaSkillMining:
		return []byte(s), nil
	case ResourceSchemaSkillWoodcutting:
		return []byte(s), nil
	case ResourceSchemaSkillFishing:
		return []byte(s), nil
	case ResourceSchemaSkillAlchemy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceSchemaSkill) UnmarshalText(data []byte) error {
	switch ResourceSchemaSkill(data) {
	case ResourceSchemaSkillMining:
		*s = ResourceSchemaSkillMining
		return nil
	case ResourceSchemaSkillWoodcutting:
		*s = ResourceSchemaSkillWoodcutting
		return nil
	case ResourceSchemaSkillFishing:
		*s = ResourceSchemaSkillFishing
		return nil
	case ResourceSchemaSkillAlchemy:
		*s = ResourceSchemaSkillAlchemy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ResponseSchema
type ResponseSchema struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ResponseSchema) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ResponseSchema) SetMessage(val string) {
	s.Message = val
}

func (*ResponseSchema) changePasswordMyChangePasswordPostRes() {}
func (*ResponseSchema) createAccountAccountsCreatePostRes()    {}

// Ref: #/components/schemas/SimpleItemSchema
type SimpleItemSchema struct {
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *SimpleItemSchema) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *SimpleItemSchema) GetQuantity() int {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *SimpleItemSchema) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *SimpleItemSchema) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/SkillDataSchema
type SkillDataSchema struct {
	// Cooldown details.
	Cooldown SkillDataSchemaCooldown `json:"cooldown"`
	// Craft details.
	Details SkillDataSchemaDetails `json:"details"`
	// Player details.
	Character SkillDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *SkillDataSchema) GetCooldown() SkillDataSchemaCooldown {
	return s.Cooldown
}

// GetDetails returns the value of Details.
func (s *SkillDataSchema) GetDetails() SkillDataSchemaDetails {
	return s.Details
}

// GetCharacter returns the value of Character.
func (s *SkillDataSchema) GetCharacter() SkillDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *SkillDataSchema) SetCooldown(val SkillDataSchemaCooldown) {
	s.Cooldown = val
}

// SetDetails sets the value of Details.
func (s *SkillDataSchema) SetDetails(val SkillDataSchemaDetails) {
	s.Details = val
}

// SetCharacter sets the value of Character.
func (s *SkillDataSchema) SetCharacter(val SkillDataSchemaCharacter) {
	s.Character = val
}

type SkillDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin SkillDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *SkillDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *SkillDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *SkillDataSchemaCharacter) GetSkin() SkillDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *SkillDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *SkillDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *SkillDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *SkillDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *SkillDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *SkillDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *SkillDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *SkillDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *SkillDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *SkillDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *SkillDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *SkillDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *SkillDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *SkillDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *SkillDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *SkillDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *SkillDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *SkillDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *SkillDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *SkillDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *SkillDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *SkillDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *SkillDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *SkillDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *SkillDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *SkillDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *SkillDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *SkillDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *SkillDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *SkillDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *SkillDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *SkillDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *SkillDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *SkillDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *SkillDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *SkillDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *SkillDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *SkillDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *SkillDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *SkillDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *SkillDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *SkillDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *SkillDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *SkillDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *SkillDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *SkillDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *SkillDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *SkillDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *SkillDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *SkillDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *SkillDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *SkillDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *SkillDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *SkillDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *SkillDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *SkillDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *SkillDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *SkillDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *SkillDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *SkillDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *SkillDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *SkillDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *SkillDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *SkillDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *SkillDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *SkillDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *SkillDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *SkillDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *SkillDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *SkillDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *SkillDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *SkillDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *SkillDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *SkillDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *SkillDataSchemaCharacter) SetSkin(val SkillDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *SkillDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *SkillDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *SkillDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *SkillDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *SkillDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *SkillDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *SkillDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *SkillDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *SkillDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *SkillDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *SkillDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *SkillDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *SkillDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *SkillDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *SkillDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *SkillDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *SkillDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *SkillDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *SkillDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *SkillDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *SkillDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *SkillDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *SkillDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *SkillDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *SkillDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *SkillDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *SkillDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *SkillDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *SkillDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *SkillDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *SkillDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *SkillDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *SkillDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *SkillDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *SkillDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *SkillDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *SkillDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *SkillDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *SkillDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *SkillDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *SkillDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *SkillDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *SkillDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *SkillDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *SkillDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *SkillDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *SkillDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *SkillDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *SkillDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *SkillDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *SkillDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *SkillDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *SkillDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *SkillDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *SkillDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *SkillDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *SkillDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *SkillDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *SkillDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *SkillDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *SkillDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *SkillDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *SkillDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *SkillDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *SkillDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *SkillDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *SkillDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *SkillDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *SkillDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *SkillDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *SkillDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *SkillDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type SkillDataSchemaCharacterSkin string

const (
	SkillDataSchemaCharacterSkinMen1   SkillDataSchemaCharacterSkin = "men1"
	SkillDataSchemaCharacterSkinMen2   SkillDataSchemaCharacterSkin = "men2"
	SkillDataSchemaCharacterSkinMen3   SkillDataSchemaCharacterSkin = "men3"
	SkillDataSchemaCharacterSkinWomen1 SkillDataSchemaCharacterSkin = "women1"
	SkillDataSchemaCharacterSkinWomen2 SkillDataSchemaCharacterSkin = "women2"
	SkillDataSchemaCharacterSkinWomen3 SkillDataSchemaCharacterSkin = "women3"
)

// AllValues returns all SkillDataSchemaCharacterSkin values.
func (SkillDataSchemaCharacterSkin) AllValues() []SkillDataSchemaCharacterSkin {
	return []SkillDataSchemaCharacterSkin{
		SkillDataSchemaCharacterSkinMen1,
		SkillDataSchemaCharacterSkinMen2,
		SkillDataSchemaCharacterSkinMen3,
		SkillDataSchemaCharacterSkinWomen1,
		SkillDataSchemaCharacterSkinWomen2,
		SkillDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SkillDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case SkillDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case SkillDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case SkillDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case SkillDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case SkillDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case SkillDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SkillDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch SkillDataSchemaCharacterSkin(data) {
	case SkillDataSchemaCharacterSkinMen1:
		*s = SkillDataSchemaCharacterSkinMen1
		return nil
	case SkillDataSchemaCharacterSkinMen2:
		*s = SkillDataSchemaCharacterSkinMen2
		return nil
	case SkillDataSchemaCharacterSkinMen3:
		*s = SkillDataSchemaCharacterSkinMen3
		return nil
	case SkillDataSchemaCharacterSkinWomen1:
		*s = SkillDataSchemaCharacterSkinWomen1
		return nil
	case SkillDataSchemaCharacterSkinWomen2:
		*s = SkillDataSchemaCharacterSkinWomen2
		return nil
	case SkillDataSchemaCharacterSkinWomen3:
		*s = SkillDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SkillDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason SkillDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *SkillDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *SkillDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *SkillDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *SkillDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *SkillDataSchemaCooldown) GetReason() SkillDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *SkillDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *SkillDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *SkillDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *SkillDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *SkillDataSchemaCooldown) SetReason(val SkillDataSchemaCooldownReason) {
	s.Reason = val
}

type SkillDataSchemaCooldownReason string

const (
	SkillDataSchemaCooldownReasonMovement         SkillDataSchemaCooldownReason = "movement"
	SkillDataSchemaCooldownReasonFight            SkillDataSchemaCooldownReason = "fight"
	SkillDataSchemaCooldownReasonCrafting         SkillDataSchemaCooldownReason = "crafting"
	SkillDataSchemaCooldownReasonGathering        SkillDataSchemaCooldownReason = "gathering"
	SkillDataSchemaCooldownReasonBuyGe            SkillDataSchemaCooldownReason = "buy_ge"
	SkillDataSchemaCooldownReasonSellGe           SkillDataSchemaCooldownReason = "sell_ge"
	SkillDataSchemaCooldownReasonCancelGe         SkillDataSchemaCooldownReason = "cancel_ge"
	SkillDataSchemaCooldownReasonDeleteItem       SkillDataSchemaCooldownReason = "delete_item"
	SkillDataSchemaCooldownReasonDeposit          SkillDataSchemaCooldownReason = "deposit"
	SkillDataSchemaCooldownReasonWithdraw         SkillDataSchemaCooldownReason = "withdraw"
	SkillDataSchemaCooldownReasonDepositGold      SkillDataSchemaCooldownReason = "deposit_gold"
	SkillDataSchemaCooldownReasonWithdrawGold     SkillDataSchemaCooldownReason = "withdraw_gold"
	SkillDataSchemaCooldownReasonEquip            SkillDataSchemaCooldownReason = "equip"
	SkillDataSchemaCooldownReasonUnequip          SkillDataSchemaCooldownReason = "unequip"
	SkillDataSchemaCooldownReasonTask             SkillDataSchemaCooldownReason = "task"
	SkillDataSchemaCooldownReasonRecycling        SkillDataSchemaCooldownReason = "recycling"
	SkillDataSchemaCooldownReasonRest             SkillDataSchemaCooldownReason = "rest"
	SkillDataSchemaCooldownReasonUse              SkillDataSchemaCooldownReason = "use"
	SkillDataSchemaCooldownReasonBuyBankExpansion SkillDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all SkillDataSchemaCooldownReason values.
func (SkillDataSchemaCooldownReason) AllValues() []SkillDataSchemaCooldownReason {
	return []SkillDataSchemaCooldownReason{
		SkillDataSchemaCooldownReasonMovement,
		SkillDataSchemaCooldownReasonFight,
		SkillDataSchemaCooldownReasonCrafting,
		SkillDataSchemaCooldownReasonGathering,
		SkillDataSchemaCooldownReasonBuyGe,
		SkillDataSchemaCooldownReasonSellGe,
		SkillDataSchemaCooldownReasonCancelGe,
		SkillDataSchemaCooldownReasonDeleteItem,
		SkillDataSchemaCooldownReasonDeposit,
		SkillDataSchemaCooldownReasonWithdraw,
		SkillDataSchemaCooldownReasonDepositGold,
		SkillDataSchemaCooldownReasonWithdrawGold,
		SkillDataSchemaCooldownReasonEquip,
		SkillDataSchemaCooldownReasonUnequip,
		SkillDataSchemaCooldownReasonTask,
		SkillDataSchemaCooldownReasonRecycling,
		SkillDataSchemaCooldownReasonRest,
		SkillDataSchemaCooldownReasonUse,
		SkillDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SkillDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case SkillDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case SkillDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SkillDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch SkillDataSchemaCooldownReason(data) {
	case SkillDataSchemaCooldownReasonMovement:
		*s = SkillDataSchemaCooldownReasonMovement
		return nil
	case SkillDataSchemaCooldownReasonFight:
		*s = SkillDataSchemaCooldownReasonFight
		return nil
	case SkillDataSchemaCooldownReasonCrafting:
		*s = SkillDataSchemaCooldownReasonCrafting
		return nil
	case SkillDataSchemaCooldownReasonGathering:
		*s = SkillDataSchemaCooldownReasonGathering
		return nil
	case SkillDataSchemaCooldownReasonBuyGe:
		*s = SkillDataSchemaCooldownReasonBuyGe
		return nil
	case SkillDataSchemaCooldownReasonSellGe:
		*s = SkillDataSchemaCooldownReasonSellGe
		return nil
	case SkillDataSchemaCooldownReasonCancelGe:
		*s = SkillDataSchemaCooldownReasonCancelGe
		return nil
	case SkillDataSchemaCooldownReasonDeleteItem:
		*s = SkillDataSchemaCooldownReasonDeleteItem
		return nil
	case SkillDataSchemaCooldownReasonDeposit:
		*s = SkillDataSchemaCooldownReasonDeposit
		return nil
	case SkillDataSchemaCooldownReasonWithdraw:
		*s = SkillDataSchemaCooldownReasonWithdraw
		return nil
	case SkillDataSchemaCooldownReasonDepositGold:
		*s = SkillDataSchemaCooldownReasonDepositGold
		return nil
	case SkillDataSchemaCooldownReasonWithdrawGold:
		*s = SkillDataSchemaCooldownReasonWithdrawGold
		return nil
	case SkillDataSchemaCooldownReasonEquip:
		*s = SkillDataSchemaCooldownReasonEquip
		return nil
	case SkillDataSchemaCooldownReasonUnequip:
		*s = SkillDataSchemaCooldownReasonUnequip
		return nil
	case SkillDataSchemaCooldownReasonTask:
		*s = SkillDataSchemaCooldownReasonTask
		return nil
	case SkillDataSchemaCooldownReasonRecycling:
		*s = SkillDataSchemaCooldownReasonRecycling
		return nil
	case SkillDataSchemaCooldownReasonRest:
		*s = SkillDataSchemaCooldownReasonRest
		return nil
	case SkillDataSchemaCooldownReasonUse:
		*s = SkillDataSchemaCooldownReasonUse
		return nil
	case SkillDataSchemaCooldownReasonBuyBankExpansion:
		*s = SkillDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SkillDataSchemaDetails struct {
	// The amount of xp gained.
	Xp int `json:"xp"`
	// Objects received.
	Items []DropSchema `json:"items"`
}

// GetXp returns the value of Xp.
func (s *SkillDataSchemaDetails) GetXp() int {
	return s.Xp
}

// GetItems returns the value of Items.
func (s *SkillDataSchemaDetails) GetItems() []DropSchema {
	return s.Items
}

// SetXp sets the value of Xp.
func (s *SkillDataSchemaDetails) SetXp(val int) {
	s.Xp = val
}

// SetItems sets the value of Items.
func (s *SkillDataSchemaDetails) SetItems(val []DropSchema) {
	s.Items = val
}

// Ref: #/components/schemas/SkillResponseSchema
type SkillResponseSchema struct {
	Data SkillDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *SkillResponseSchema) GetData() SkillDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *SkillResponseSchema) SetData(val SkillDataSchema) {
	s.Data = val
}

func (*SkillResponseSchema) actionCraftingMyNameActionCraftingPostRes()   {}
func (*SkillResponseSchema) actionGatheringMyNameActionGatheringPostRes() {}

// Ref: #/components/schemas/StatusResponseSchema
type StatusResponseSchema struct {
	Data StatusSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *StatusResponseSchema) GetData() StatusSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *StatusResponseSchema) SetData(val StatusSchema) {
	s.Data = val
}

// Ref: #/components/schemas/StatusSchema
type StatusSchema struct {
	// Server status.
	Status string `json:"status"`
	// Game version.
	Version string `json:"version"`
	// Maximum level.
	MaxLevel int `json:"max_level"`
	// Characters online.
	CharactersOnline int `json:"characters_online"`
	// Server time.
	ServerTime time.Time `json:"server_time"`
	// Server announcements.
	Announcements []AnnouncementSchema `json:"announcements"`
	// Last server wipe.
	LastWipe string `json:"last_wipe"`
	// Next server wipe.
	NextWipe string `json:"next_wipe"`
}

// GetStatus returns the value of Status.
func (s *StatusSchema) GetStatus() string {
	return s.Status
}

// GetVersion returns the value of Version.
func (s *StatusSchema) GetVersion() string {
	return s.Version
}

// GetMaxLevel returns the value of MaxLevel.
func (s *StatusSchema) GetMaxLevel() int {
	return s.MaxLevel
}

// GetCharactersOnline returns the value of CharactersOnline.
func (s *StatusSchema) GetCharactersOnline() int {
	return s.CharactersOnline
}

// GetServerTime returns the value of ServerTime.
func (s *StatusSchema) GetServerTime() time.Time {
	return s.ServerTime
}

// GetAnnouncements returns the value of Announcements.
func (s *StatusSchema) GetAnnouncements() []AnnouncementSchema {
	return s.Announcements
}

// GetLastWipe returns the value of LastWipe.
func (s *StatusSchema) GetLastWipe() string {
	return s.LastWipe
}

// GetNextWipe returns the value of NextWipe.
func (s *StatusSchema) GetNextWipe() string {
	return s.NextWipe
}

// SetStatus sets the value of Status.
func (s *StatusSchema) SetStatus(val string) {
	s.Status = val
}

// SetVersion sets the value of Version.
func (s *StatusSchema) SetVersion(val string) {
	s.Version = val
}

// SetMaxLevel sets the value of MaxLevel.
func (s *StatusSchema) SetMaxLevel(val int) {
	s.MaxLevel = val
}

// SetCharactersOnline sets the value of CharactersOnline.
func (s *StatusSchema) SetCharactersOnline(val int) {
	s.CharactersOnline = val
}

// SetServerTime sets the value of ServerTime.
func (s *StatusSchema) SetServerTime(val time.Time) {
	s.ServerTime = val
}

// SetAnnouncements sets the value of Announcements.
func (s *StatusSchema) SetAnnouncements(val []AnnouncementSchema) {
	s.Announcements = val
}

// SetLastWipe sets the value of LastWipe.
func (s *StatusSchema) SetLastWipe(val string) {
	s.LastWipe = val
}

// SetNextWipe sets the value of NextWipe.
func (s *StatusSchema) SetNextWipe(val string) {
	s.NextWipe = val
}

// Ref: #/components/schemas/TaskCancelledResponseSchema
type TaskCancelledResponseSchema struct {
	Data TaskCancelledSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *TaskCancelledResponseSchema) GetData() TaskCancelledSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *TaskCancelledResponseSchema) SetData(val TaskCancelledSchema) {
	s.Data = val
}

func (*TaskCancelledResponseSchema) actionTaskCancelMyNameActionTaskCancelPostRes() {}

// Ref: #/components/schemas/TaskCancelledSchema
type TaskCancelledSchema struct {
	// Cooldown details.
	Cooldown TaskCancelledSchemaCooldown `json:"cooldown"`
	// Player details.
	Character TaskCancelledSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *TaskCancelledSchema) GetCooldown() TaskCancelledSchemaCooldown {
	return s.Cooldown
}

// GetCharacter returns the value of Character.
func (s *TaskCancelledSchema) GetCharacter() TaskCancelledSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *TaskCancelledSchema) SetCooldown(val TaskCancelledSchemaCooldown) {
	s.Cooldown = val
}

// SetCharacter sets the value of Character.
func (s *TaskCancelledSchema) SetCharacter(val TaskCancelledSchemaCharacter) {
	s.Character = val
}

type TaskCancelledSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin TaskCancelledSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *TaskCancelledSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *TaskCancelledSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *TaskCancelledSchemaCharacter) GetSkin() TaskCancelledSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *TaskCancelledSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *TaskCancelledSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *TaskCancelledSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *TaskCancelledSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *TaskCancelledSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *TaskCancelledSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *TaskCancelledSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *TaskCancelledSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *TaskCancelledSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *TaskCancelledSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *TaskCancelledSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *TaskCancelledSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *TaskCancelledSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *TaskCancelledSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *TaskCancelledSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *TaskCancelledSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *TaskCancelledSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *TaskCancelledSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *TaskCancelledSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *TaskCancelledSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *TaskCancelledSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *TaskCancelledSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *TaskCancelledSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *TaskCancelledSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *TaskCancelledSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *TaskCancelledSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *TaskCancelledSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *TaskCancelledSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *TaskCancelledSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *TaskCancelledSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *TaskCancelledSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *TaskCancelledSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *TaskCancelledSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *TaskCancelledSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *TaskCancelledSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *TaskCancelledSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *TaskCancelledSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *TaskCancelledSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *TaskCancelledSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *TaskCancelledSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *TaskCancelledSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *TaskCancelledSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *TaskCancelledSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *TaskCancelledSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *TaskCancelledSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *TaskCancelledSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *TaskCancelledSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *TaskCancelledSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *TaskCancelledSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *TaskCancelledSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *TaskCancelledSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *TaskCancelledSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *TaskCancelledSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *TaskCancelledSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *TaskCancelledSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *TaskCancelledSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *TaskCancelledSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *TaskCancelledSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *TaskCancelledSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *TaskCancelledSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *TaskCancelledSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *TaskCancelledSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *TaskCancelledSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *TaskCancelledSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *TaskCancelledSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *TaskCancelledSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *TaskCancelledSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *TaskCancelledSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *TaskCancelledSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *TaskCancelledSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *TaskCancelledSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *TaskCancelledSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *TaskCancelledSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *TaskCancelledSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *TaskCancelledSchemaCharacter) SetSkin(val TaskCancelledSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *TaskCancelledSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *TaskCancelledSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *TaskCancelledSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *TaskCancelledSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *TaskCancelledSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *TaskCancelledSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *TaskCancelledSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *TaskCancelledSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *TaskCancelledSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *TaskCancelledSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *TaskCancelledSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *TaskCancelledSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *TaskCancelledSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *TaskCancelledSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *TaskCancelledSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *TaskCancelledSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *TaskCancelledSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *TaskCancelledSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *TaskCancelledSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *TaskCancelledSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *TaskCancelledSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *TaskCancelledSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *TaskCancelledSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *TaskCancelledSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *TaskCancelledSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *TaskCancelledSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *TaskCancelledSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *TaskCancelledSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *TaskCancelledSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *TaskCancelledSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *TaskCancelledSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *TaskCancelledSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *TaskCancelledSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *TaskCancelledSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *TaskCancelledSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *TaskCancelledSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *TaskCancelledSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *TaskCancelledSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *TaskCancelledSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *TaskCancelledSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *TaskCancelledSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *TaskCancelledSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *TaskCancelledSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *TaskCancelledSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *TaskCancelledSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *TaskCancelledSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *TaskCancelledSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *TaskCancelledSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *TaskCancelledSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *TaskCancelledSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *TaskCancelledSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *TaskCancelledSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *TaskCancelledSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *TaskCancelledSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *TaskCancelledSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *TaskCancelledSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *TaskCancelledSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *TaskCancelledSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *TaskCancelledSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *TaskCancelledSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *TaskCancelledSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *TaskCancelledSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *TaskCancelledSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *TaskCancelledSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *TaskCancelledSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *TaskCancelledSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *TaskCancelledSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *TaskCancelledSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *TaskCancelledSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *TaskCancelledSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *TaskCancelledSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *TaskCancelledSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type TaskCancelledSchemaCharacterSkin string

const (
	TaskCancelledSchemaCharacterSkinMen1   TaskCancelledSchemaCharacterSkin = "men1"
	TaskCancelledSchemaCharacterSkinMen2   TaskCancelledSchemaCharacterSkin = "men2"
	TaskCancelledSchemaCharacterSkinMen3   TaskCancelledSchemaCharacterSkin = "men3"
	TaskCancelledSchemaCharacterSkinWomen1 TaskCancelledSchemaCharacterSkin = "women1"
	TaskCancelledSchemaCharacterSkinWomen2 TaskCancelledSchemaCharacterSkin = "women2"
	TaskCancelledSchemaCharacterSkinWomen3 TaskCancelledSchemaCharacterSkin = "women3"
)

// AllValues returns all TaskCancelledSchemaCharacterSkin values.
func (TaskCancelledSchemaCharacterSkin) AllValues() []TaskCancelledSchemaCharacterSkin {
	return []TaskCancelledSchemaCharacterSkin{
		TaskCancelledSchemaCharacterSkinMen1,
		TaskCancelledSchemaCharacterSkinMen2,
		TaskCancelledSchemaCharacterSkinMen3,
		TaskCancelledSchemaCharacterSkinWomen1,
		TaskCancelledSchemaCharacterSkinWomen2,
		TaskCancelledSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskCancelledSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case TaskCancelledSchemaCharacterSkinMen1:
		return []byte(s), nil
	case TaskCancelledSchemaCharacterSkinMen2:
		return []byte(s), nil
	case TaskCancelledSchemaCharacterSkinMen3:
		return []byte(s), nil
	case TaskCancelledSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case TaskCancelledSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case TaskCancelledSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskCancelledSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch TaskCancelledSchemaCharacterSkin(data) {
	case TaskCancelledSchemaCharacterSkinMen1:
		*s = TaskCancelledSchemaCharacterSkinMen1
		return nil
	case TaskCancelledSchemaCharacterSkinMen2:
		*s = TaskCancelledSchemaCharacterSkinMen2
		return nil
	case TaskCancelledSchemaCharacterSkinMen3:
		*s = TaskCancelledSchemaCharacterSkinMen3
		return nil
	case TaskCancelledSchemaCharacterSkinWomen1:
		*s = TaskCancelledSchemaCharacterSkinWomen1
		return nil
	case TaskCancelledSchemaCharacterSkinWomen2:
		*s = TaskCancelledSchemaCharacterSkinWomen2
		return nil
	case TaskCancelledSchemaCharacterSkinWomen3:
		*s = TaskCancelledSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TaskCancelledSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason TaskCancelledSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *TaskCancelledSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *TaskCancelledSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *TaskCancelledSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *TaskCancelledSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *TaskCancelledSchemaCooldown) GetReason() TaskCancelledSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *TaskCancelledSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *TaskCancelledSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *TaskCancelledSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *TaskCancelledSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *TaskCancelledSchemaCooldown) SetReason(val TaskCancelledSchemaCooldownReason) {
	s.Reason = val
}

type TaskCancelledSchemaCooldownReason string

const (
	TaskCancelledSchemaCooldownReasonMovement         TaskCancelledSchemaCooldownReason = "movement"
	TaskCancelledSchemaCooldownReasonFight            TaskCancelledSchemaCooldownReason = "fight"
	TaskCancelledSchemaCooldownReasonCrafting         TaskCancelledSchemaCooldownReason = "crafting"
	TaskCancelledSchemaCooldownReasonGathering        TaskCancelledSchemaCooldownReason = "gathering"
	TaskCancelledSchemaCooldownReasonBuyGe            TaskCancelledSchemaCooldownReason = "buy_ge"
	TaskCancelledSchemaCooldownReasonSellGe           TaskCancelledSchemaCooldownReason = "sell_ge"
	TaskCancelledSchemaCooldownReasonCancelGe         TaskCancelledSchemaCooldownReason = "cancel_ge"
	TaskCancelledSchemaCooldownReasonDeleteItem       TaskCancelledSchemaCooldownReason = "delete_item"
	TaskCancelledSchemaCooldownReasonDeposit          TaskCancelledSchemaCooldownReason = "deposit"
	TaskCancelledSchemaCooldownReasonWithdraw         TaskCancelledSchemaCooldownReason = "withdraw"
	TaskCancelledSchemaCooldownReasonDepositGold      TaskCancelledSchemaCooldownReason = "deposit_gold"
	TaskCancelledSchemaCooldownReasonWithdrawGold     TaskCancelledSchemaCooldownReason = "withdraw_gold"
	TaskCancelledSchemaCooldownReasonEquip            TaskCancelledSchemaCooldownReason = "equip"
	TaskCancelledSchemaCooldownReasonUnequip          TaskCancelledSchemaCooldownReason = "unequip"
	TaskCancelledSchemaCooldownReasonTask             TaskCancelledSchemaCooldownReason = "task"
	TaskCancelledSchemaCooldownReasonRecycling        TaskCancelledSchemaCooldownReason = "recycling"
	TaskCancelledSchemaCooldownReasonRest             TaskCancelledSchemaCooldownReason = "rest"
	TaskCancelledSchemaCooldownReasonUse              TaskCancelledSchemaCooldownReason = "use"
	TaskCancelledSchemaCooldownReasonBuyBankExpansion TaskCancelledSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all TaskCancelledSchemaCooldownReason values.
func (TaskCancelledSchemaCooldownReason) AllValues() []TaskCancelledSchemaCooldownReason {
	return []TaskCancelledSchemaCooldownReason{
		TaskCancelledSchemaCooldownReasonMovement,
		TaskCancelledSchemaCooldownReasonFight,
		TaskCancelledSchemaCooldownReasonCrafting,
		TaskCancelledSchemaCooldownReasonGathering,
		TaskCancelledSchemaCooldownReasonBuyGe,
		TaskCancelledSchemaCooldownReasonSellGe,
		TaskCancelledSchemaCooldownReasonCancelGe,
		TaskCancelledSchemaCooldownReasonDeleteItem,
		TaskCancelledSchemaCooldownReasonDeposit,
		TaskCancelledSchemaCooldownReasonWithdraw,
		TaskCancelledSchemaCooldownReasonDepositGold,
		TaskCancelledSchemaCooldownReasonWithdrawGold,
		TaskCancelledSchemaCooldownReasonEquip,
		TaskCancelledSchemaCooldownReasonUnequip,
		TaskCancelledSchemaCooldownReasonTask,
		TaskCancelledSchemaCooldownReasonRecycling,
		TaskCancelledSchemaCooldownReasonRest,
		TaskCancelledSchemaCooldownReasonUse,
		TaskCancelledSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskCancelledSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case TaskCancelledSchemaCooldownReasonMovement:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonFight:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonGathering:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonEquip:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonTask:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonRest:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonUse:
		return []byte(s), nil
	case TaskCancelledSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskCancelledSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch TaskCancelledSchemaCooldownReason(data) {
	case TaskCancelledSchemaCooldownReasonMovement:
		*s = TaskCancelledSchemaCooldownReasonMovement
		return nil
	case TaskCancelledSchemaCooldownReasonFight:
		*s = TaskCancelledSchemaCooldownReasonFight
		return nil
	case TaskCancelledSchemaCooldownReasonCrafting:
		*s = TaskCancelledSchemaCooldownReasonCrafting
		return nil
	case TaskCancelledSchemaCooldownReasonGathering:
		*s = TaskCancelledSchemaCooldownReasonGathering
		return nil
	case TaskCancelledSchemaCooldownReasonBuyGe:
		*s = TaskCancelledSchemaCooldownReasonBuyGe
		return nil
	case TaskCancelledSchemaCooldownReasonSellGe:
		*s = TaskCancelledSchemaCooldownReasonSellGe
		return nil
	case TaskCancelledSchemaCooldownReasonCancelGe:
		*s = TaskCancelledSchemaCooldownReasonCancelGe
		return nil
	case TaskCancelledSchemaCooldownReasonDeleteItem:
		*s = TaskCancelledSchemaCooldownReasonDeleteItem
		return nil
	case TaskCancelledSchemaCooldownReasonDeposit:
		*s = TaskCancelledSchemaCooldownReasonDeposit
		return nil
	case TaskCancelledSchemaCooldownReasonWithdraw:
		*s = TaskCancelledSchemaCooldownReasonWithdraw
		return nil
	case TaskCancelledSchemaCooldownReasonDepositGold:
		*s = TaskCancelledSchemaCooldownReasonDepositGold
		return nil
	case TaskCancelledSchemaCooldownReasonWithdrawGold:
		*s = TaskCancelledSchemaCooldownReasonWithdrawGold
		return nil
	case TaskCancelledSchemaCooldownReasonEquip:
		*s = TaskCancelledSchemaCooldownReasonEquip
		return nil
	case TaskCancelledSchemaCooldownReasonUnequip:
		*s = TaskCancelledSchemaCooldownReasonUnequip
		return nil
	case TaskCancelledSchemaCooldownReasonTask:
		*s = TaskCancelledSchemaCooldownReasonTask
		return nil
	case TaskCancelledSchemaCooldownReasonRecycling:
		*s = TaskCancelledSchemaCooldownReasonRecycling
		return nil
	case TaskCancelledSchemaCooldownReasonRest:
		*s = TaskCancelledSchemaCooldownReasonRest
		return nil
	case TaskCancelledSchemaCooldownReasonUse:
		*s = TaskCancelledSchemaCooldownReasonUse
		return nil
	case TaskCancelledSchemaCooldownReasonBuyBankExpansion:
		*s = TaskCancelledSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TaskDataSchema
type TaskDataSchema struct {
	// Cooldown details.
	Cooldown TaskDataSchemaCooldown `json:"cooldown"`
	// Task details.
	Task TaskDataSchemaTask `json:"task"`
	// Player details.
	Character TaskDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *TaskDataSchema) GetCooldown() TaskDataSchemaCooldown {
	return s.Cooldown
}

// GetTask returns the value of Task.
func (s *TaskDataSchema) GetTask() TaskDataSchemaTask {
	return s.Task
}

// GetCharacter returns the value of Character.
func (s *TaskDataSchema) GetCharacter() TaskDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *TaskDataSchema) SetCooldown(val TaskDataSchemaCooldown) {
	s.Cooldown = val
}

// SetTask sets the value of Task.
func (s *TaskDataSchema) SetTask(val TaskDataSchemaTask) {
	s.Task = val
}

// SetCharacter sets the value of Character.
func (s *TaskDataSchema) SetCharacter(val TaskDataSchemaCharacter) {
	s.Character = val
}

type TaskDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin TaskDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *TaskDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *TaskDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *TaskDataSchemaCharacter) GetSkin() TaskDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *TaskDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *TaskDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *TaskDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *TaskDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *TaskDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *TaskDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *TaskDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *TaskDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *TaskDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *TaskDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *TaskDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *TaskDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *TaskDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *TaskDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *TaskDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *TaskDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *TaskDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *TaskDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *TaskDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *TaskDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *TaskDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *TaskDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *TaskDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *TaskDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *TaskDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *TaskDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *TaskDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *TaskDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *TaskDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *TaskDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *TaskDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *TaskDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *TaskDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *TaskDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *TaskDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *TaskDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *TaskDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *TaskDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *TaskDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *TaskDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *TaskDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *TaskDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *TaskDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *TaskDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *TaskDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *TaskDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *TaskDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *TaskDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *TaskDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *TaskDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *TaskDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *TaskDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *TaskDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *TaskDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *TaskDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *TaskDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *TaskDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *TaskDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *TaskDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *TaskDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *TaskDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *TaskDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *TaskDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *TaskDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *TaskDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *TaskDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *TaskDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *TaskDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *TaskDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *TaskDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *TaskDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *TaskDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *TaskDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *TaskDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *TaskDataSchemaCharacter) SetSkin(val TaskDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *TaskDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *TaskDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *TaskDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *TaskDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *TaskDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *TaskDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *TaskDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *TaskDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *TaskDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *TaskDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *TaskDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *TaskDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *TaskDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *TaskDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *TaskDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *TaskDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *TaskDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *TaskDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *TaskDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *TaskDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *TaskDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *TaskDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *TaskDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *TaskDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *TaskDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *TaskDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *TaskDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *TaskDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *TaskDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *TaskDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *TaskDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *TaskDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *TaskDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *TaskDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *TaskDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *TaskDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *TaskDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *TaskDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *TaskDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *TaskDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *TaskDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *TaskDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *TaskDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *TaskDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *TaskDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *TaskDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *TaskDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *TaskDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *TaskDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *TaskDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *TaskDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *TaskDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *TaskDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *TaskDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *TaskDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *TaskDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *TaskDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *TaskDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *TaskDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *TaskDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *TaskDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *TaskDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *TaskDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *TaskDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *TaskDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *TaskDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *TaskDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *TaskDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *TaskDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *TaskDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *TaskDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *TaskDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type TaskDataSchemaCharacterSkin string

const (
	TaskDataSchemaCharacterSkinMen1   TaskDataSchemaCharacterSkin = "men1"
	TaskDataSchemaCharacterSkinMen2   TaskDataSchemaCharacterSkin = "men2"
	TaskDataSchemaCharacterSkinMen3   TaskDataSchemaCharacterSkin = "men3"
	TaskDataSchemaCharacterSkinWomen1 TaskDataSchemaCharacterSkin = "women1"
	TaskDataSchemaCharacterSkinWomen2 TaskDataSchemaCharacterSkin = "women2"
	TaskDataSchemaCharacterSkinWomen3 TaskDataSchemaCharacterSkin = "women3"
)

// AllValues returns all TaskDataSchemaCharacterSkin values.
func (TaskDataSchemaCharacterSkin) AllValues() []TaskDataSchemaCharacterSkin {
	return []TaskDataSchemaCharacterSkin{
		TaskDataSchemaCharacterSkinMen1,
		TaskDataSchemaCharacterSkinMen2,
		TaskDataSchemaCharacterSkinMen3,
		TaskDataSchemaCharacterSkinWomen1,
		TaskDataSchemaCharacterSkinWomen2,
		TaskDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case TaskDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case TaskDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case TaskDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case TaskDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case TaskDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case TaskDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch TaskDataSchemaCharacterSkin(data) {
	case TaskDataSchemaCharacterSkinMen1:
		*s = TaskDataSchemaCharacterSkinMen1
		return nil
	case TaskDataSchemaCharacterSkinMen2:
		*s = TaskDataSchemaCharacterSkinMen2
		return nil
	case TaskDataSchemaCharacterSkinMen3:
		*s = TaskDataSchemaCharacterSkinMen3
		return nil
	case TaskDataSchemaCharacterSkinWomen1:
		*s = TaskDataSchemaCharacterSkinWomen1
		return nil
	case TaskDataSchemaCharacterSkinWomen2:
		*s = TaskDataSchemaCharacterSkinWomen2
		return nil
	case TaskDataSchemaCharacterSkinWomen3:
		*s = TaskDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TaskDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason TaskDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *TaskDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *TaskDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *TaskDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *TaskDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *TaskDataSchemaCooldown) GetReason() TaskDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *TaskDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *TaskDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *TaskDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *TaskDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *TaskDataSchemaCooldown) SetReason(val TaskDataSchemaCooldownReason) {
	s.Reason = val
}

type TaskDataSchemaCooldownReason string

const (
	TaskDataSchemaCooldownReasonMovement         TaskDataSchemaCooldownReason = "movement"
	TaskDataSchemaCooldownReasonFight            TaskDataSchemaCooldownReason = "fight"
	TaskDataSchemaCooldownReasonCrafting         TaskDataSchemaCooldownReason = "crafting"
	TaskDataSchemaCooldownReasonGathering        TaskDataSchemaCooldownReason = "gathering"
	TaskDataSchemaCooldownReasonBuyGe            TaskDataSchemaCooldownReason = "buy_ge"
	TaskDataSchemaCooldownReasonSellGe           TaskDataSchemaCooldownReason = "sell_ge"
	TaskDataSchemaCooldownReasonCancelGe         TaskDataSchemaCooldownReason = "cancel_ge"
	TaskDataSchemaCooldownReasonDeleteItem       TaskDataSchemaCooldownReason = "delete_item"
	TaskDataSchemaCooldownReasonDeposit          TaskDataSchemaCooldownReason = "deposit"
	TaskDataSchemaCooldownReasonWithdraw         TaskDataSchemaCooldownReason = "withdraw"
	TaskDataSchemaCooldownReasonDepositGold      TaskDataSchemaCooldownReason = "deposit_gold"
	TaskDataSchemaCooldownReasonWithdrawGold     TaskDataSchemaCooldownReason = "withdraw_gold"
	TaskDataSchemaCooldownReasonEquip            TaskDataSchemaCooldownReason = "equip"
	TaskDataSchemaCooldownReasonUnequip          TaskDataSchemaCooldownReason = "unequip"
	TaskDataSchemaCooldownReasonTask             TaskDataSchemaCooldownReason = "task"
	TaskDataSchemaCooldownReasonRecycling        TaskDataSchemaCooldownReason = "recycling"
	TaskDataSchemaCooldownReasonRest             TaskDataSchemaCooldownReason = "rest"
	TaskDataSchemaCooldownReasonUse              TaskDataSchemaCooldownReason = "use"
	TaskDataSchemaCooldownReasonBuyBankExpansion TaskDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all TaskDataSchemaCooldownReason values.
func (TaskDataSchemaCooldownReason) AllValues() []TaskDataSchemaCooldownReason {
	return []TaskDataSchemaCooldownReason{
		TaskDataSchemaCooldownReasonMovement,
		TaskDataSchemaCooldownReasonFight,
		TaskDataSchemaCooldownReasonCrafting,
		TaskDataSchemaCooldownReasonGathering,
		TaskDataSchemaCooldownReasonBuyGe,
		TaskDataSchemaCooldownReasonSellGe,
		TaskDataSchemaCooldownReasonCancelGe,
		TaskDataSchemaCooldownReasonDeleteItem,
		TaskDataSchemaCooldownReasonDeposit,
		TaskDataSchemaCooldownReasonWithdraw,
		TaskDataSchemaCooldownReasonDepositGold,
		TaskDataSchemaCooldownReasonWithdrawGold,
		TaskDataSchemaCooldownReasonEquip,
		TaskDataSchemaCooldownReasonUnequip,
		TaskDataSchemaCooldownReasonTask,
		TaskDataSchemaCooldownReasonRecycling,
		TaskDataSchemaCooldownReasonRest,
		TaskDataSchemaCooldownReasonUse,
		TaskDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case TaskDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case TaskDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch TaskDataSchemaCooldownReason(data) {
	case TaskDataSchemaCooldownReasonMovement:
		*s = TaskDataSchemaCooldownReasonMovement
		return nil
	case TaskDataSchemaCooldownReasonFight:
		*s = TaskDataSchemaCooldownReasonFight
		return nil
	case TaskDataSchemaCooldownReasonCrafting:
		*s = TaskDataSchemaCooldownReasonCrafting
		return nil
	case TaskDataSchemaCooldownReasonGathering:
		*s = TaskDataSchemaCooldownReasonGathering
		return nil
	case TaskDataSchemaCooldownReasonBuyGe:
		*s = TaskDataSchemaCooldownReasonBuyGe
		return nil
	case TaskDataSchemaCooldownReasonSellGe:
		*s = TaskDataSchemaCooldownReasonSellGe
		return nil
	case TaskDataSchemaCooldownReasonCancelGe:
		*s = TaskDataSchemaCooldownReasonCancelGe
		return nil
	case TaskDataSchemaCooldownReasonDeleteItem:
		*s = TaskDataSchemaCooldownReasonDeleteItem
		return nil
	case TaskDataSchemaCooldownReasonDeposit:
		*s = TaskDataSchemaCooldownReasonDeposit
		return nil
	case TaskDataSchemaCooldownReasonWithdraw:
		*s = TaskDataSchemaCooldownReasonWithdraw
		return nil
	case TaskDataSchemaCooldownReasonDepositGold:
		*s = TaskDataSchemaCooldownReasonDepositGold
		return nil
	case TaskDataSchemaCooldownReasonWithdrawGold:
		*s = TaskDataSchemaCooldownReasonWithdrawGold
		return nil
	case TaskDataSchemaCooldownReasonEquip:
		*s = TaskDataSchemaCooldownReasonEquip
		return nil
	case TaskDataSchemaCooldownReasonUnequip:
		*s = TaskDataSchemaCooldownReasonUnequip
		return nil
	case TaskDataSchemaCooldownReasonTask:
		*s = TaskDataSchemaCooldownReasonTask
		return nil
	case TaskDataSchemaCooldownReasonRecycling:
		*s = TaskDataSchemaCooldownReasonRecycling
		return nil
	case TaskDataSchemaCooldownReasonRest:
		*s = TaskDataSchemaCooldownReasonRest
		return nil
	case TaskDataSchemaCooldownReasonUse:
		*s = TaskDataSchemaCooldownReasonUse
		return nil
	case TaskDataSchemaCooldownReasonBuyBankExpansion:
		*s = TaskDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TaskDataSchemaTask struct {
	// Task objective.
	Code string `json:"code"`
	// The type of task.
	Type TaskDataSchemaTaskType `json:"type"`
	// The total required to complete the task.
	Total int `json:"total"`
	// Rewards for completing the task.
	Rewards TaskDataSchemaTaskRewards `json:"rewards"`
}

// GetCode returns the value of Code.
func (s *TaskDataSchemaTask) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *TaskDataSchemaTask) GetType() TaskDataSchemaTaskType {
	return s.Type
}

// GetTotal returns the value of Total.
func (s *TaskDataSchemaTask) GetTotal() int {
	return s.Total
}

// GetRewards returns the value of Rewards.
func (s *TaskDataSchemaTask) GetRewards() TaskDataSchemaTaskRewards {
	return s.Rewards
}

// SetCode sets the value of Code.
func (s *TaskDataSchemaTask) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *TaskDataSchemaTask) SetType(val TaskDataSchemaTaskType) {
	s.Type = val
}

// SetTotal sets the value of Total.
func (s *TaskDataSchemaTask) SetTotal(val int) {
	s.Total = val
}

// SetRewards sets the value of Rewards.
func (s *TaskDataSchemaTask) SetRewards(val TaskDataSchemaTaskRewards) {
	s.Rewards = val
}

type TaskDataSchemaTaskRewards struct {
	// Items rewards.
	Items []SimpleItemSchema `json:"items"`
	// Gold rewards.
	Gold int `json:"gold"`
}

// GetItems returns the value of Items.
func (s *TaskDataSchemaTaskRewards) GetItems() []SimpleItemSchema {
	return s.Items
}

// GetGold returns the value of Gold.
func (s *TaskDataSchemaTaskRewards) GetGold() int {
	return s.Gold
}

// SetItems sets the value of Items.
func (s *TaskDataSchemaTaskRewards) SetItems(val []SimpleItemSchema) {
	s.Items = val
}

// SetGold sets the value of Gold.
func (s *TaskDataSchemaTaskRewards) SetGold(val int) {
	s.Gold = val
}

type TaskDataSchemaTaskType string

const (
	TaskDataSchemaTaskTypeMonsters TaskDataSchemaTaskType = "monsters"
	TaskDataSchemaTaskTypeItems    TaskDataSchemaTaskType = "items"
)

// AllValues returns all TaskDataSchemaTaskType values.
func (TaskDataSchemaTaskType) AllValues() []TaskDataSchemaTaskType {
	return []TaskDataSchemaTaskType{
		TaskDataSchemaTaskTypeMonsters,
		TaskDataSchemaTaskTypeItems,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskDataSchemaTaskType) MarshalText() ([]byte, error) {
	switch s {
	case TaskDataSchemaTaskTypeMonsters:
		return []byte(s), nil
	case TaskDataSchemaTaskTypeItems:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskDataSchemaTaskType) UnmarshalText(data []byte) error {
	switch TaskDataSchemaTaskType(data) {
	case TaskDataSchemaTaskTypeMonsters:
		*s = TaskDataSchemaTaskTypeMonsters
		return nil
	case TaskDataSchemaTaskTypeItems:
		*s = TaskDataSchemaTaskTypeItems
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TaskFullResponseSchema
type TaskFullResponseSchema struct {
	Data TaskFullSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *TaskFullResponseSchema) GetData() TaskFullSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *TaskFullResponseSchema) SetData(val TaskFullSchema) {
	s.Data = val
}

func (*TaskFullResponseSchema) getTaskTasksListCodeGetRes() {}

// Ref: #/components/schemas/TaskFullSchema
type TaskFullSchema struct {
	// Task objective.
	Code string `json:"code"`
	// Task level.
	Level int `json:"level"`
	// The type of task.
	Type TaskFullSchemaType `json:"type"`
	// Minimum amount of task.
	MinQuantity int `json:"min_quantity"`
	// Maximum amount of task.
	MaxQuantity int `json:"max_quantity"`
	// Skill required to complete the task.
	Skill TaskFullSchemaSkill `json:"skill"`
	// Rewards.
	Rewards TaskFullSchemaRewards `json:"rewards"`
}

// GetCode returns the value of Code.
func (s *TaskFullSchema) GetCode() string {
	return s.Code
}

// GetLevel returns the value of Level.
func (s *TaskFullSchema) GetLevel() int {
	return s.Level
}

// GetType returns the value of Type.
func (s *TaskFullSchema) GetType() TaskFullSchemaType {
	return s.Type
}

// GetMinQuantity returns the value of MinQuantity.
func (s *TaskFullSchema) GetMinQuantity() int {
	return s.MinQuantity
}

// GetMaxQuantity returns the value of MaxQuantity.
func (s *TaskFullSchema) GetMaxQuantity() int {
	return s.MaxQuantity
}

// GetSkill returns the value of Skill.
func (s *TaskFullSchema) GetSkill() TaskFullSchemaSkill {
	return s.Skill
}

// GetRewards returns the value of Rewards.
func (s *TaskFullSchema) GetRewards() TaskFullSchemaRewards {
	return s.Rewards
}

// SetCode sets the value of Code.
func (s *TaskFullSchema) SetCode(val string) {
	s.Code = val
}

// SetLevel sets the value of Level.
func (s *TaskFullSchema) SetLevel(val int) {
	s.Level = val
}

// SetType sets the value of Type.
func (s *TaskFullSchema) SetType(val TaskFullSchemaType) {
	s.Type = val
}

// SetMinQuantity sets the value of MinQuantity.
func (s *TaskFullSchema) SetMinQuantity(val int) {
	s.MinQuantity = val
}

// SetMaxQuantity sets the value of MaxQuantity.
func (s *TaskFullSchema) SetMaxQuantity(val int) {
	s.MaxQuantity = val
}

// SetSkill sets the value of Skill.
func (s *TaskFullSchema) SetSkill(val TaskFullSchemaSkill) {
	s.Skill = val
}

// SetRewards sets the value of Rewards.
func (s *TaskFullSchema) SetRewards(val TaskFullSchemaRewards) {
	s.Rewards = val
}

type TaskFullSchemaRewards struct {
	// Items rewards.
	Items []SimpleItemSchema `json:"items"`
	// Gold rewards.
	Gold int `json:"gold"`
}

// GetItems returns the value of Items.
func (s *TaskFullSchemaRewards) GetItems() []SimpleItemSchema {
	return s.Items
}

// GetGold returns the value of Gold.
func (s *TaskFullSchemaRewards) GetGold() int {
	return s.Gold
}

// SetItems sets the value of Items.
func (s *TaskFullSchemaRewards) SetItems(val []SimpleItemSchema) {
	s.Items = val
}

// SetGold sets the value of Gold.
func (s *TaskFullSchemaRewards) SetGold(val int) {
	s.Gold = val
}

// Skill required to complete the task.
// TaskFullSchemaSkill represents sum type.
type TaskFullSchemaSkill struct {
	Type   TaskFullSchemaSkillType // switch on this field
	String string
	Null   struct{}
}

// TaskFullSchemaSkillType is oneOf type of TaskFullSchemaSkill.
type TaskFullSchemaSkillType string

// Possible values for TaskFullSchemaSkillType.
const (
	StringTaskFullSchemaSkill TaskFullSchemaSkillType = "string"
	NullTaskFullSchemaSkill   TaskFullSchemaSkillType = "struct{}"
)

// IsString reports whether TaskFullSchemaSkill is string.
func (s TaskFullSchemaSkill) IsString() bool { return s.Type == StringTaskFullSchemaSkill }

// IsNull reports whether TaskFullSchemaSkill is struct{}.
func (s TaskFullSchemaSkill) IsNull() bool { return s.Type == NullTaskFullSchemaSkill }

// SetString sets TaskFullSchemaSkill to string.
func (s *TaskFullSchemaSkill) SetString(v string) {
	s.Type = StringTaskFullSchemaSkill
	s.String = v
}

// GetString returns string and true boolean if TaskFullSchemaSkill is string.
func (s TaskFullSchemaSkill) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringTaskFullSchemaSkill returns new TaskFullSchemaSkill from string.
func NewStringTaskFullSchemaSkill(v string) TaskFullSchemaSkill {
	var s TaskFullSchemaSkill
	s.SetString(v)
	return s
}

// SetNull sets TaskFullSchemaSkill to struct{}.
func (s *TaskFullSchemaSkill) SetNull(v struct{}) {
	s.Type = NullTaskFullSchemaSkill
	s.Null = v
}

// GetNull returns struct{} and true boolean if TaskFullSchemaSkill is struct{}.
func (s TaskFullSchemaSkill) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullTaskFullSchemaSkill returns new TaskFullSchemaSkill from struct{}.
func NewNullTaskFullSchemaSkill(v struct{}) TaskFullSchemaSkill {
	var s TaskFullSchemaSkill
	s.SetNull(v)
	return s
}

type TaskFullSchemaType string

const (
	TaskFullSchemaTypeMonsters TaskFullSchemaType = "monsters"
	TaskFullSchemaTypeItems    TaskFullSchemaType = "items"
)

// AllValues returns all TaskFullSchemaType values.
func (TaskFullSchemaType) AllValues() []TaskFullSchemaType {
	return []TaskFullSchemaType{
		TaskFullSchemaTypeMonsters,
		TaskFullSchemaTypeItems,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskFullSchemaType) MarshalText() ([]byte, error) {
	switch s {
	case TaskFullSchemaTypeMonsters:
		return []byte(s), nil
	case TaskFullSchemaTypeItems:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskFullSchemaType) UnmarshalText(data []byte) error {
	switch TaskFullSchemaType(data) {
	case TaskFullSchemaTypeMonsters:
		*s = TaskFullSchemaTypeMonsters
		return nil
	case TaskFullSchemaTypeItems:
		*s = TaskFullSchemaTypeItems
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TaskResponseSchema
type TaskResponseSchema struct {
	Data TaskDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *TaskResponseSchema) GetData() TaskDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *TaskResponseSchema) SetData(val TaskDataSchema) {
	s.Data = val
}

func (*TaskResponseSchema) actionAcceptNewTaskMyNameActionTaskNewPostRes() {}

// Ref: #/components/schemas/TaskTradeDataSchema
type TaskTradeDataSchema struct {
	// Cooldown details.
	Cooldown TaskTradeDataSchemaCooldown `json:"cooldown"`
	// Reward details.
	Trade TaskTradeDataSchemaTrade `json:"trade"`
	// Player details.
	Character TaskTradeDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *TaskTradeDataSchema) GetCooldown() TaskTradeDataSchemaCooldown {
	return s.Cooldown
}

// GetTrade returns the value of Trade.
func (s *TaskTradeDataSchema) GetTrade() TaskTradeDataSchemaTrade {
	return s.Trade
}

// GetCharacter returns the value of Character.
func (s *TaskTradeDataSchema) GetCharacter() TaskTradeDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *TaskTradeDataSchema) SetCooldown(val TaskTradeDataSchemaCooldown) {
	s.Cooldown = val
}

// SetTrade sets the value of Trade.
func (s *TaskTradeDataSchema) SetTrade(val TaskTradeDataSchemaTrade) {
	s.Trade = val
}

// SetCharacter sets the value of Character.
func (s *TaskTradeDataSchema) SetCharacter(val TaskTradeDataSchemaCharacter) {
	s.Character = val
}

type TaskTradeDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin TaskTradeDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *TaskTradeDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *TaskTradeDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *TaskTradeDataSchemaCharacter) GetSkin() TaskTradeDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *TaskTradeDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *TaskTradeDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *TaskTradeDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *TaskTradeDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *TaskTradeDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *TaskTradeDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *TaskTradeDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *TaskTradeDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *TaskTradeDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *TaskTradeDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *TaskTradeDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *TaskTradeDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *TaskTradeDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *TaskTradeDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *TaskTradeDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *TaskTradeDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *TaskTradeDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *TaskTradeDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *TaskTradeDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *TaskTradeDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *TaskTradeDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *TaskTradeDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *TaskTradeDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *TaskTradeDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *TaskTradeDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *TaskTradeDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *TaskTradeDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *TaskTradeDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *TaskTradeDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *TaskTradeDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *TaskTradeDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *TaskTradeDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *TaskTradeDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *TaskTradeDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *TaskTradeDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *TaskTradeDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *TaskTradeDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *TaskTradeDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *TaskTradeDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *TaskTradeDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *TaskTradeDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *TaskTradeDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *TaskTradeDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *TaskTradeDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *TaskTradeDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *TaskTradeDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *TaskTradeDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *TaskTradeDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *TaskTradeDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *TaskTradeDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *TaskTradeDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *TaskTradeDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *TaskTradeDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *TaskTradeDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *TaskTradeDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *TaskTradeDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *TaskTradeDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *TaskTradeDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *TaskTradeDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *TaskTradeDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *TaskTradeDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *TaskTradeDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *TaskTradeDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *TaskTradeDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *TaskTradeDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *TaskTradeDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *TaskTradeDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *TaskTradeDataSchemaCharacter) SetSkin(val TaskTradeDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *TaskTradeDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *TaskTradeDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *TaskTradeDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *TaskTradeDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *TaskTradeDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *TaskTradeDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *TaskTradeDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *TaskTradeDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *TaskTradeDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *TaskTradeDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *TaskTradeDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *TaskTradeDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *TaskTradeDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *TaskTradeDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *TaskTradeDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *TaskTradeDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *TaskTradeDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *TaskTradeDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *TaskTradeDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *TaskTradeDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *TaskTradeDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *TaskTradeDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *TaskTradeDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *TaskTradeDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *TaskTradeDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *TaskTradeDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *TaskTradeDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *TaskTradeDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *TaskTradeDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *TaskTradeDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *TaskTradeDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *TaskTradeDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *TaskTradeDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *TaskTradeDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *TaskTradeDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *TaskTradeDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *TaskTradeDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *TaskTradeDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *TaskTradeDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *TaskTradeDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *TaskTradeDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *TaskTradeDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *TaskTradeDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *TaskTradeDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *TaskTradeDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *TaskTradeDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *TaskTradeDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *TaskTradeDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *TaskTradeDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *TaskTradeDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *TaskTradeDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *TaskTradeDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *TaskTradeDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *TaskTradeDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *TaskTradeDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *TaskTradeDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *TaskTradeDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *TaskTradeDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *TaskTradeDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *TaskTradeDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *TaskTradeDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *TaskTradeDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *TaskTradeDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *TaskTradeDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *TaskTradeDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type TaskTradeDataSchemaCharacterSkin string

const (
	TaskTradeDataSchemaCharacterSkinMen1   TaskTradeDataSchemaCharacterSkin = "men1"
	TaskTradeDataSchemaCharacterSkinMen2   TaskTradeDataSchemaCharacterSkin = "men2"
	TaskTradeDataSchemaCharacterSkinMen3   TaskTradeDataSchemaCharacterSkin = "men3"
	TaskTradeDataSchemaCharacterSkinWomen1 TaskTradeDataSchemaCharacterSkin = "women1"
	TaskTradeDataSchemaCharacterSkinWomen2 TaskTradeDataSchemaCharacterSkin = "women2"
	TaskTradeDataSchemaCharacterSkinWomen3 TaskTradeDataSchemaCharacterSkin = "women3"
)

// AllValues returns all TaskTradeDataSchemaCharacterSkin values.
func (TaskTradeDataSchemaCharacterSkin) AllValues() []TaskTradeDataSchemaCharacterSkin {
	return []TaskTradeDataSchemaCharacterSkin{
		TaskTradeDataSchemaCharacterSkinMen1,
		TaskTradeDataSchemaCharacterSkinMen2,
		TaskTradeDataSchemaCharacterSkinMen3,
		TaskTradeDataSchemaCharacterSkinWomen1,
		TaskTradeDataSchemaCharacterSkinWomen2,
		TaskTradeDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskTradeDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case TaskTradeDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case TaskTradeDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case TaskTradeDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case TaskTradeDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case TaskTradeDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case TaskTradeDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskTradeDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch TaskTradeDataSchemaCharacterSkin(data) {
	case TaskTradeDataSchemaCharacterSkinMen1:
		*s = TaskTradeDataSchemaCharacterSkinMen1
		return nil
	case TaskTradeDataSchemaCharacterSkinMen2:
		*s = TaskTradeDataSchemaCharacterSkinMen2
		return nil
	case TaskTradeDataSchemaCharacterSkinMen3:
		*s = TaskTradeDataSchemaCharacterSkinMen3
		return nil
	case TaskTradeDataSchemaCharacterSkinWomen1:
		*s = TaskTradeDataSchemaCharacterSkinWomen1
		return nil
	case TaskTradeDataSchemaCharacterSkinWomen2:
		*s = TaskTradeDataSchemaCharacterSkinWomen2
		return nil
	case TaskTradeDataSchemaCharacterSkinWomen3:
		*s = TaskTradeDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TaskTradeDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason TaskTradeDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *TaskTradeDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *TaskTradeDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *TaskTradeDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *TaskTradeDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *TaskTradeDataSchemaCooldown) GetReason() TaskTradeDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *TaskTradeDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *TaskTradeDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *TaskTradeDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *TaskTradeDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *TaskTradeDataSchemaCooldown) SetReason(val TaskTradeDataSchemaCooldownReason) {
	s.Reason = val
}

type TaskTradeDataSchemaCooldownReason string

const (
	TaskTradeDataSchemaCooldownReasonMovement         TaskTradeDataSchemaCooldownReason = "movement"
	TaskTradeDataSchemaCooldownReasonFight            TaskTradeDataSchemaCooldownReason = "fight"
	TaskTradeDataSchemaCooldownReasonCrafting         TaskTradeDataSchemaCooldownReason = "crafting"
	TaskTradeDataSchemaCooldownReasonGathering        TaskTradeDataSchemaCooldownReason = "gathering"
	TaskTradeDataSchemaCooldownReasonBuyGe            TaskTradeDataSchemaCooldownReason = "buy_ge"
	TaskTradeDataSchemaCooldownReasonSellGe           TaskTradeDataSchemaCooldownReason = "sell_ge"
	TaskTradeDataSchemaCooldownReasonCancelGe         TaskTradeDataSchemaCooldownReason = "cancel_ge"
	TaskTradeDataSchemaCooldownReasonDeleteItem       TaskTradeDataSchemaCooldownReason = "delete_item"
	TaskTradeDataSchemaCooldownReasonDeposit          TaskTradeDataSchemaCooldownReason = "deposit"
	TaskTradeDataSchemaCooldownReasonWithdraw         TaskTradeDataSchemaCooldownReason = "withdraw"
	TaskTradeDataSchemaCooldownReasonDepositGold      TaskTradeDataSchemaCooldownReason = "deposit_gold"
	TaskTradeDataSchemaCooldownReasonWithdrawGold     TaskTradeDataSchemaCooldownReason = "withdraw_gold"
	TaskTradeDataSchemaCooldownReasonEquip            TaskTradeDataSchemaCooldownReason = "equip"
	TaskTradeDataSchemaCooldownReasonUnequip          TaskTradeDataSchemaCooldownReason = "unequip"
	TaskTradeDataSchemaCooldownReasonTask             TaskTradeDataSchemaCooldownReason = "task"
	TaskTradeDataSchemaCooldownReasonRecycling        TaskTradeDataSchemaCooldownReason = "recycling"
	TaskTradeDataSchemaCooldownReasonRest             TaskTradeDataSchemaCooldownReason = "rest"
	TaskTradeDataSchemaCooldownReasonUse              TaskTradeDataSchemaCooldownReason = "use"
	TaskTradeDataSchemaCooldownReasonBuyBankExpansion TaskTradeDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all TaskTradeDataSchemaCooldownReason values.
func (TaskTradeDataSchemaCooldownReason) AllValues() []TaskTradeDataSchemaCooldownReason {
	return []TaskTradeDataSchemaCooldownReason{
		TaskTradeDataSchemaCooldownReasonMovement,
		TaskTradeDataSchemaCooldownReasonFight,
		TaskTradeDataSchemaCooldownReasonCrafting,
		TaskTradeDataSchemaCooldownReasonGathering,
		TaskTradeDataSchemaCooldownReasonBuyGe,
		TaskTradeDataSchemaCooldownReasonSellGe,
		TaskTradeDataSchemaCooldownReasonCancelGe,
		TaskTradeDataSchemaCooldownReasonDeleteItem,
		TaskTradeDataSchemaCooldownReasonDeposit,
		TaskTradeDataSchemaCooldownReasonWithdraw,
		TaskTradeDataSchemaCooldownReasonDepositGold,
		TaskTradeDataSchemaCooldownReasonWithdrawGold,
		TaskTradeDataSchemaCooldownReasonEquip,
		TaskTradeDataSchemaCooldownReasonUnequip,
		TaskTradeDataSchemaCooldownReasonTask,
		TaskTradeDataSchemaCooldownReasonRecycling,
		TaskTradeDataSchemaCooldownReasonRest,
		TaskTradeDataSchemaCooldownReasonUse,
		TaskTradeDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskTradeDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case TaskTradeDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case TaskTradeDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskTradeDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch TaskTradeDataSchemaCooldownReason(data) {
	case TaskTradeDataSchemaCooldownReasonMovement:
		*s = TaskTradeDataSchemaCooldownReasonMovement
		return nil
	case TaskTradeDataSchemaCooldownReasonFight:
		*s = TaskTradeDataSchemaCooldownReasonFight
		return nil
	case TaskTradeDataSchemaCooldownReasonCrafting:
		*s = TaskTradeDataSchemaCooldownReasonCrafting
		return nil
	case TaskTradeDataSchemaCooldownReasonGathering:
		*s = TaskTradeDataSchemaCooldownReasonGathering
		return nil
	case TaskTradeDataSchemaCooldownReasonBuyGe:
		*s = TaskTradeDataSchemaCooldownReasonBuyGe
		return nil
	case TaskTradeDataSchemaCooldownReasonSellGe:
		*s = TaskTradeDataSchemaCooldownReasonSellGe
		return nil
	case TaskTradeDataSchemaCooldownReasonCancelGe:
		*s = TaskTradeDataSchemaCooldownReasonCancelGe
		return nil
	case TaskTradeDataSchemaCooldownReasonDeleteItem:
		*s = TaskTradeDataSchemaCooldownReasonDeleteItem
		return nil
	case TaskTradeDataSchemaCooldownReasonDeposit:
		*s = TaskTradeDataSchemaCooldownReasonDeposit
		return nil
	case TaskTradeDataSchemaCooldownReasonWithdraw:
		*s = TaskTradeDataSchemaCooldownReasonWithdraw
		return nil
	case TaskTradeDataSchemaCooldownReasonDepositGold:
		*s = TaskTradeDataSchemaCooldownReasonDepositGold
		return nil
	case TaskTradeDataSchemaCooldownReasonWithdrawGold:
		*s = TaskTradeDataSchemaCooldownReasonWithdrawGold
		return nil
	case TaskTradeDataSchemaCooldownReasonEquip:
		*s = TaskTradeDataSchemaCooldownReasonEquip
		return nil
	case TaskTradeDataSchemaCooldownReasonUnequip:
		*s = TaskTradeDataSchemaCooldownReasonUnequip
		return nil
	case TaskTradeDataSchemaCooldownReasonTask:
		*s = TaskTradeDataSchemaCooldownReasonTask
		return nil
	case TaskTradeDataSchemaCooldownReasonRecycling:
		*s = TaskTradeDataSchemaCooldownReasonRecycling
		return nil
	case TaskTradeDataSchemaCooldownReasonRest:
		*s = TaskTradeDataSchemaCooldownReasonRest
		return nil
	case TaskTradeDataSchemaCooldownReasonUse:
		*s = TaskTradeDataSchemaCooldownReasonUse
		return nil
	case TaskTradeDataSchemaCooldownReasonBuyBankExpansion:
		*s = TaskTradeDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TaskTradeDataSchemaTrade struct {
	// Item code.
	Code string `json:"code"`
	// Item quantity.
	Quantity int `json:"quantity"`
}

// GetCode returns the value of Code.
func (s *TaskTradeDataSchemaTrade) GetCode() string {
	return s.Code
}

// GetQuantity returns the value of Quantity.
func (s *TaskTradeDataSchemaTrade) GetQuantity() int {
	return s.Quantity
}

// SetCode sets the value of Code.
func (s *TaskTradeDataSchemaTrade) SetCode(val string) {
	s.Code = val
}

// SetQuantity sets the value of Quantity.
func (s *TaskTradeDataSchemaTrade) SetQuantity(val int) {
	s.Quantity = val
}

// Ref: #/components/schemas/TaskTradeResponseSchema
type TaskTradeResponseSchema struct {
	Data TaskTradeDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *TaskTradeResponseSchema) GetData() TaskTradeDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *TaskTradeResponseSchema) SetData(val TaskTradeDataSchema) {
	s.Data = val
}

func (*TaskTradeResponseSchema) actionTaskTradeMyNameActionTaskTradePostRes() {}

// Ref: #/components/schemas/TasksRewardDataResponseSchema
type TasksRewardDataResponseSchema struct {
	Data TasksRewardDataSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *TasksRewardDataResponseSchema) GetData() TasksRewardDataSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *TasksRewardDataResponseSchema) SetData(val TasksRewardDataSchema) {
	s.Data = val
}

func (*TasksRewardDataResponseSchema) actionCompleteTaskMyNameActionTaskCompletePostRes() {}
func (*TasksRewardDataResponseSchema) actionTaskExchangeMyNameActionTaskExchangePostRes() {}

// Ref: #/components/schemas/TasksRewardDataSchema
type TasksRewardDataSchema struct {
	// Cooldown details.
	Cooldown TasksRewardDataSchemaCooldown `json:"cooldown"`
	// Reward details.
	Rewards TasksRewardDataSchemaRewards `json:"rewards"`
	// Player details.
	Character TasksRewardDataSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *TasksRewardDataSchema) GetCooldown() TasksRewardDataSchemaCooldown {
	return s.Cooldown
}

// GetRewards returns the value of Rewards.
func (s *TasksRewardDataSchema) GetRewards() TasksRewardDataSchemaRewards {
	return s.Rewards
}

// GetCharacter returns the value of Character.
func (s *TasksRewardDataSchema) GetCharacter() TasksRewardDataSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *TasksRewardDataSchema) SetCooldown(val TasksRewardDataSchemaCooldown) {
	s.Cooldown = val
}

// SetRewards sets the value of Rewards.
func (s *TasksRewardDataSchema) SetRewards(val TasksRewardDataSchemaRewards) {
	s.Rewards = val
}

// SetCharacter sets the value of Character.
func (s *TasksRewardDataSchema) SetCharacter(val TasksRewardDataSchemaCharacter) {
	s.Character = val
}

type TasksRewardDataSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin TasksRewardDataSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *TasksRewardDataSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *TasksRewardDataSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *TasksRewardDataSchemaCharacter) GetSkin() TasksRewardDataSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *TasksRewardDataSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *TasksRewardDataSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *TasksRewardDataSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *TasksRewardDataSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *TasksRewardDataSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *TasksRewardDataSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *TasksRewardDataSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *TasksRewardDataSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *TasksRewardDataSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *TasksRewardDataSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *TasksRewardDataSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *TasksRewardDataSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *TasksRewardDataSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *TasksRewardDataSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *TasksRewardDataSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *TasksRewardDataSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *TasksRewardDataSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *TasksRewardDataSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *TasksRewardDataSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *TasksRewardDataSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *TasksRewardDataSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *TasksRewardDataSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *TasksRewardDataSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *TasksRewardDataSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *TasksRewardDataSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *TasksRewardDataSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *TasksRewardDataSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *TasksRewardDataSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *TasksRewardDataSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *TasksRewardDataSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *TasksRewardDataSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *TasksRewardDataSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *TasksRewardDataSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *TasksRewardDataSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *TasksRewardDataSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *TasksRewardDataSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *TasksRewardDataSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *TasksRewardDataSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *TasksRewardDataSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *TasksRewardDataSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *TasksRewardDataSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *TasksRewardDataSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *TasksRewardDataSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *TasksRewardDataSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *TasksRewardDataSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *TasksRewardDataSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *TasksRewardDataSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *TasksRewardDataSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *TasksRewardDataSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *TasksRewardDataSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *TasksRewardDataSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *TasksRewardDataSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *TasksRewardDataSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *TasksRewardDataSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *TasksRewardDataSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *TasksRewardDataSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *TasksRewardDataSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *TasksRewardDataSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *TasksRewardDataSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *TasksRewardDataSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *TasksRewardDataSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *TasksRewardDataSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *TasksRewardDataSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *TasksRewardDataSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *TasksRewardDataSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *TasksRewardDataSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *TasksRewardDataSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *TasksRewardDataSchemaCharacter) SetSkin(val TasksRewardDataSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *TasksRewardDataSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *TasksRewardDataSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *TasksRewardDataSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *TasksRewardDataSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *TasksRewardDataSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *TasksRewardDataSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *TasksRewardDataSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *TasksRewardDataSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *TasksRewardDataSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *TasksRewardDataSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *TasksRewardDataSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *TasksRewardDataSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *TasksRewardDataSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *TasksRewardDataSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *TasksRewardDataSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *TasksRewardDataSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *TasksRewardDataSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *TasksRewardDataSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *TasksRewardDataSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *TasksRewardDataSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *TasksRewardDataSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *TasksRewardDataSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *TasksRewardDataSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *TasksRewardDataSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *TasksRewardDataSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *TasksRewardDataSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *TasksRewardDataSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *TasksRewardDataSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *TasksRewardDataSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *TasksRewardDataSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *TasksRewardDataSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *TasksRewardDataSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *TasksRewardDataSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *TasksRewardDataSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *TasksRewardDataSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *TasksRewardDataSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *TasksRewardDataSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *TasksRewardDataSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *TasksRewardDataSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *TasksRewardDataSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *TasksRewardDataSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *TasksRewardDataSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *TasksRewardDataSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *TasksRewardDataSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *TasksRewardDataSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *TasksRewardDataSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *TasksRewardDataSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *TasksRewardDataSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *TasksRewardDataSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *TasksRewardDataSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *TasksRewardDataSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *TasksRewardDataSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *TasksRewardDataSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *TasksRewardDataSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *TasksRewardDataSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *TasksRewardDataSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *TasksRewardDataSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *TasksRewardDataSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *TasksRewardDataSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *TasksRewardDataSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *TasksRewardDataSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *TasksRewardDataSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *TasksRewardDataSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *TasksRewardDataSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *TasksRewardDataSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type TasksRewardDataSchemaCharacterSkin string

const (
	TasksRewardDataSchemaCharacterSkinMen1   TasksRewardDataSchemaCharacterSkin = "men1"
	TasksRewardDataSchemaCharacterSkinMen2   TasksRewardDataSchemaCharacterSkin = "men2"
	TasksRewardDataSchemaCharacterSkinMen3   TasksRewardDataSchemaCharacterSkin = "men3"
	TasksRewardDataSchemaCharacterSkinWomen1 TasksRewardDataSchemaCharacterSkin = "women1"
	TasksRewardDataSchemaCharacterSkinWomen2 TasksRewardDataSchemaCharacterSkin = "women2"
	TasksRewardDataSchemaCharacterSkinWomen3 TasksRewardDataSchemaCharacterSkin = "women3"
)

// AllValues returns all TasksRewardDataSchemaCharacterSkin values.
func (TasksRewardDataSchemaCharacterSkin) AllValues() []TasksRewardDataSchemaCharacterSkin {
	return []TasksRewardDataSchemaCharacterSkin{
		TasksRewardDataSchemaCharacterSkinMen1,
		TasksRewardDataSchemaCharacterSkinMen2,
		TasksRewardDataSchemaCharacterSkinMen3,
		TasksRewardDataSchemaCharacterSkinWomen1,
		TasksRewardDataSchemaCharacterSkinWomen2,
		TasksRewardDataSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TasksRewardDataSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case TasksRewardDataSchemaCharacterSkinMen1:
		return []byte(s), nil
	case TasksRewardDataSchemaCharacterSkinMen2:
		return []byte(s), nil
	case TasksRewardDataSchemaCharacterSkinMen3:
		return []byte(s), nil
	case TasksRewardDataSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case TasksRewardDataSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case TasksRewardDataSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TasksRewardDataSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch TasksRewardDataSchemaCharacterSkin(data) {
	case TasksRewardDataSchemaCharacterSkinMen1:
		*s = TasksRewardDataSchemaCharacterSkinMen1
		return nil
	case TasksRewardDataSchemaCharacterSkinMen2:
		*s = TasksRewardDataSchemaCharacterSkinMen2
		return nil
	case TasksRewardDataSchemaCharacterSkinMen3:
		*s = TasksRewardDataSchemaCharacterSkinMen3
		return nil
	case TasksRewardDataSchemaCharacterSkinWomen1:
		*s = TasksRewardDataSchemaCharacterSkinWomen1
		return nil
	case TasksRewardDataSchemaCharacterSkinWomen2:
		*s = TasksRewardDataSchemaCharacterSkinWomen2
		return nil
	case TasksRewardDataSchemaCharacterSkinWomen3:
		*s = TasksRewardDataSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TasksRewardDataSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason TasksRewardDataSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *TasksRewardDataSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *TasksRewardDataSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *TasksRewardDataSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *TasksRewardDataSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *TasksRewardDataSchemaCooldown) GetReason() TasksRewardDataSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *TasksRewardDataSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *TasksRewardDataSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *TasksRewardDataSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *TasksRewardDataSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *TasksRewardDataSchemaCooldown) SetReason(val TasksRewardDataSchemaCooldownReason) {
	s.Reason = val
}

type TasksRewardDataSchemaCooldownReason string

const (
	TasksRewardDataSchemaCooldownReasonMovement         TasksRewardDataSchemaCooldownReason = "movement"
	TasksRewardDataSchemaCooldownReasonFight            TasksRewardDataSchemaCooldownReason = "fight"
	TasksRewardDataSchemaCooldownReasonCrafting         TasksRewardDataSchemaCooldownReason = "crafting"
	TasksRewardDataSchemaCooldownReasonGathering        TasksRewardDataSchemaCooldownReason = "gathering"
	TasksRewardDataSchemaCooldownReasonBuyGe            TasksRewardDataSchemaCooldownReason = "buy_ge"
	TasksRewardDataSchemaCooldownReasonSellGe           TasksRewardDataSchemaCooldownReason = "sell_ge"
	TasksRewardDataSchemaCooldownReasonCancelGe         TasksRewardDataSchemaCooldownReason = "cancel_ge"
	TasksRewardDataSchemaCooldownReasonDeleteItem       TasksRewardDataSchemaCooldownReason = "delete_item"
	TasksRewardDataSchemaCooldownReasonDeposit          TasksRewardDataSchemaCooldownReason = "deposit"
	TasksRewardDataSchemaCooldownReasonWithdraw         TasksRewardDataSchemaCooldownReason = "withdraw"
	TasksRewardDataSchemaCooldownReasonDepositGold      TasksRewardDataSchemaCooldownReason = "deposit_gold"
	TasksRewardDataSchemaCooldownReasonWithdrawGold     TasksRewardDataSchemaCooldownReason = "withdraw_gold"
	TasksRewardDataSchemaCooldownReasonEquip            TasksRewardDataSchemaCooldownReason = "equip"
	TasksRewardDataSchemaCooldownReasonUnequip          TasksRewardDataSchemaCooldownReason = "unequip"
	TasksRewardDataSchemaCooldownReasonTask             TasksRewardDataSchemaCooldownReason = "task"
	TasksRewardDataSchemaCooldownReasonRecycling        TasksRewardDataSchemaCooldownReason = "recycling"
	TasksRewardDataSchemaCooldownReasonRest             TasksRewardDataSchemaCooldownReason = "rest"
	TasksRewardDataSchemaCooldownReasonUse              TasksRewardDataSchemaCooldownReason = "use"
	TasksRewardDataSchemaCooldownReasonBuyBankExpansion TasksRewardDataSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all TasksRewardDataSchemaCooldownReason values.
func (TasksRewardDataSchemaCooldownReason) AllValues() []TasksRewardDataSchemaCooldownReason {
	return []TasksRewardDataSchemaCooldownReason{
		TasksRewardDataSchemaCooldownReasonMovement,
		TasksRewardDataSchemaCooldownReasonFight,
		TasksRewardDataSchemaCooldownReasonCrafting,
		TasksRewardDataSchemaCooldownReasonGathering,
		TasksRewardDataSchemaCooldownReasonBuyGe,
		TasksRewardDataSchemaCooldownReasonSellGe,
		TasksRewardDataSchemaCooldownReasonCancelGe,
		TasksRewardDataSchemaCooldownReasonDeleteItem,
		TasksRewardDataSchemaCooldownReasonDeposit,
		TasksRewardDataSchemaCooldownReasonWithdraw,
		TasksRewardDataSchemaCooldownReasonDepositGold,
		TasksRewardDataSchemaCooldownReasonWithdrawGold,
		TasksRewardDataSchemaCooldownReasonEquip,
		TasksRewardDataSchemaCooldownReasonUnequip,
		TasksRewardDataSchemaCooldownReasonTask,
		TasksRewardDataSchemaCooldownReasonRecycling,
		TasksRewardDataSchemaCooldownReasonRest,
		TasksRewardDataSchemaCooldownReasonUse,
		TasksRewardDataSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TasksRewardDataSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case TasksRewardDataSchemaCooldownReasonMovement:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonFight:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonGathering:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonEquip:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonTask:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonRest:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonUse:
		return []byte(s), nil
	case TasksRewardDataSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TasksRewardDataSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch TasksRewardDataSchemaCooldownReason(data) {
	case TasksRewardDataSchemaCooldownReasonMovement:
		*s = TasksRewardDataSchemaCooldownReasonMovement
		return nil
	case TasksRewardDataSchemaCooldownReasonFight:
		*s = TasksRewardDataSchemaCooldownReasonFight
		return nil
	case TasksRewardDataSchemaCooldownReasonCrafting:
		*s = TasksRewardDataSchemaCooldownReasonCrafting
		return nil
	case TasksRewardDataSchemaCooldownReasonGathering:
		*s = TasksRewardDataSchemaCooldownReasonGathering
		return nil
	case TasksRewardDataSchemaCooldownReasonBuyGe:
		*s = TasksRewardDataSchemaCooldownReasonBuyGe
		return nil
	case TasksRewardDataSchemaCooldownReasonSellGe:
		*s = TasksRewardDataSchemaCooldownReasonSellGe
		return nil
	case TasksRewardDataSchemaCooldownReasonCancelGe:
		*s = TasksRewardDataSchemaCooldownReasonCancelGe
		return nil
	case TasksRewardDataSchemaCooldownReasonDeleteItem:
		*s = TasksRewardDataSchemaCooldownReasonDeleteItem
		return nil
	case TasksRewardDataSchemaCooldownReasonDeposit:
		*s = TasksRewardDataSchemaCooldownReasonDeposit
		return nil
	case TasksRewardDataSchemaCooldownReasonWithdraw:
		*s = TasksRewardDataSchemaCooldownReasonWithdraw
		return nil
	case TasksRewardDataSchemaCooldownReasonDepositGold:
		*s = TasksRewardDataSchemaCooldownReasonDepositGold
		return nil
	case TasksRewardDataSchemaCooldownReasonWithdrawGold:
		*s = TasksRewardDataSchemaCooldownReasonWithdrawGold
		return nil
	case TasksRewardDataSchemaCooldownReasonEquip:
		*s = TasksRewardDataSchemaCooldownReasonEquip
		return nil
	case TasksRewardDataSchemaCooldownReasonUnequip:
		*s = TasksRewardDataSchemaCooldownReasonUnequip
		return nil
	case TasksRewardDataSchemaCooldownReasonTask:
		*s = TasksRewardDataSchemaCooldownReasonTask
		return nil
	case TasksRewardDataSchemaCooldownReasonRecycling:
		*s = TasksRewardDataSchemaCooldownReasonRecycling
		return nil
	case TasksRewardDataSchemaCooldownReasonRest:
		*s = TasksRewardDataSchemaCooldownReasonRest
		return nil
	case TasksRewardDataSchemaCooldownReasonUse:
		*s = TasksRewardDataSchemaCooldownReasonUse
		return nil
	case TasksRewardDataSchemaCooldownReasonBuyBankExpansion:
		*s = TasksRewardDataSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TasksRewardDataSchemaRewards struct {
	// Items rewards.
	Items []SimpleItemSchema `json:"items"`
	// Gold rewards.
	Gold int `json:"gold"`
}

// GetItems returns the value of Items.
func (s *TasksRewardDataSchemaRewards) GetItems() []SimpleItemSchema {
	return s.Items
}

// GetGold returns the value of Gold.
func (s *TasksRewardDataSchemaRewards) GetGold() int {
	return s.Gold
}

// SetItems sets the value of Items.
func (s *TasksRewardDataSchemaRewards) SetItems(val []SimpleItemSchema) {
	s.Items = val
}

// SetGold sets the value of Gold.
func (s *TasksRewardDataSchemaRewards) SetGold(val int) {
	s.Gold = val
}

// Ref: #/components/schemas/TasksRewardResponseSchema
type TasksRewardResponseSchema struct {
	Data DropRateSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *TasksRewardResponseSchema) GetData() DropRateSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *TasksRewardResponseSchema) SetData(val DropRateSchema) {
	s.Data = val
}

func (*TasksRewardResponseSchema) getTasksRewardTasksRewardsCodeGetRes() {}

// Ref: #/components/schemas/TokenResponseSchema
type TokenResponseSchema struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *TokenResponseSchema) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *TokenResponseSchema) SetToken(val string) {
	s.Token = val
}

func (*TokenResponseSchema) generateTokenTokenPostRes() {}

// Ref: #/components/schemas/UnequipSchema
type UnequipSchema struct {
	// Item slot.
	Slot UnequipSchemaSlot `json:"slot"`
	// Item quantity. Applicable to utilitys only.
	Quantity OptInt `json:"quantity"`
}

// GetSlot returns the value of Slot.
func (s *UnequipSchema) GetSlot() UnequipSchemaSlot {
	return s.Slot
}

// GetQuantity returns the value of Quantity.
func (s *UnequipSchema) GetQuantity() OptInt {
	return s.Quantity
}

// SetSlot sets the value of Slot.
func (s *UnequipSchema) SetSlot(val UnequipSchemaSlot) {
	s.Slot = val
}

// SetQuantity sets the value of Quantity.
func (s *UnequipSchema) SetQuantity(val OptInt) {
	s.Quantity = val
}

type UnequipSchemaSlot string

const (
	UnequipSchemaSlotWeapon    UnequipSchemaSlot = "weapon"
	UnequipSchemaSlotShield    UnequipSchemaSlot = "shield"
	UnequipSchemaSlotHelmet    UnequipSchemaSlot = "helmet"
	UnequipSchemaSlotBodyArmor UnequipSchemaSlot = "body_armor"
	UnequipSchemaSlotLegArmor  UnequipSchemaSlot = "leg_armor"
	UnequipSchemaSlotBoots     UnequipSchemaSlot = "boots"
	UnequipSchemaSlotRing1     UnequipSchemaSlot = "ring1"
	UnequipSchemaSlotRing2     UnequipSchemaSlot = "ring2"
	UnequipSchemaSlotAmulet    UnequipSchemaSlot = "amulet"
	UnequipSchemaSlotArtifact1 UnequipSchemaSlot = "artifact1"
	UnequipSchemaSlotArtifact2 UnequipSchemaSlot = "artifact2"
	UnequipSchemaSlotArtifact3 UnequipSchemaSlot = "artifact3"
	UnequipSchemaSlotUtility1  UnequipSchemaSlot = "utility1"
	UnequipSchemaSlotUtility2  UnequipSchemaSlot = "utility2"
)

// AllValues returns all UnequipSchemaSlot values.
func (UnequipSchemaSlot) AllValues() []UnequipSchemaSlot {
	return []UnequipSchemaSlot{
		UnequipSchemaSlotWeapon,
		UnequipSchemaSlotShield,
		UnequipSchemaSlotHelmet,
		UnequipSchemaSlotBodyArmor,
		UnequipSchemaSlotLegArmor,
		UnequipSchemaSlotBoots,
		UnequipSchemaSlotRing1,
		UnequipSchemaSlotRing2,
		UnequipSchemaSlotAmulet,
		UnequipSchemaSlotArtifact1,
		UnequipSchemaSlotArtifact2,
		UnequipSchemaSlotArtifact3,
		UnequipSchemaSlotUtility1,
		UnequipSchemaSlotUtility2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UnequipSchemaSlot) MarshalText() ([]byte, error) {
	switch s {
	case UnequipSchemaSlotWeapon:
		return []byte(s), nil
	case UnequipSchemaSlotShield:
		return []byte(s), nil
	case UnequipSchemaSlotHelmet:
		return []byte(s), nil
	case UnequipSchemaSlotBodyArmor:
		return []byte(s), nil
	case UnequipSchemaSlotLegArmor:
		return []byte(s), nil
	case UnequipSchemaSlotBoots:
		return []byte(s), nil
	case UnequipSchemaSlotRing1:
		return []byte(s), nil
	case UnequipSchemaSlotRing2:
		return []byte(s), nil
	case UnequipSchemaSlotAmulet:
		return []byte(s), nil
	case UnequipSchemaSlotArtifact1:
		return []byte(s), nil
	case UnequipSchemaSlotArtifact2:
		return []byte(s), nil
	case UnequipSchemaSlotArtifact3:
		return []byte(s), nil
	case UnequipSchemaSlotUtility1:
		return []byte(s), nil
	case UnequipSchemaSlotUtility2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UnequipSchemaSlot) UnmarshalText(data []byte) error {
	switch UnequipSchemaSlot(data) {
	case UnequipSchemaSlotWeapon:
		*s = UnequipSchemaSlotWeapon
		return nil
	case UnequipSchemaSlotShield:
		*s = UnequipSchemaSlotShield
		return nil
	case UnequipSchemaSlotHelmet:
		*s = UnequipSchemaSlotHelmet
		return nil
	case UnequipSchemaSlotBodyArmor:
		*s = UnequipSchemaSlotBodyArmor
		return nil
	case UnequipSchemaSlotLegArmor:
		*s = UnequipSchemaSlotLegArmor
		return nil
	case UnequipSchemaSlotBoots:
		*s = UnequipSchemaSlotBoots
		return nil
	case UnequipSchemaSlotRing1:
		*s = UnequipSchemaSlotRing1
		return nil
	case UnequipSchemaSlotRing2:
		*s = UnequipSchemaSlotRing2
		return nil
	case UnequipSchemaSlotAmulet:
		*s = UnequipSchemaSlotAmulet
		return nil
	case UnequipSchemaSlotArtifact1:
		*s = UnequipSchemaSlotArtifact1
		return nil
	case UnequipSchemaSlotArtifact2:
		*s = UnequipSchemaSlotArtifact2
		return nil
	case UnequipSchemaSlotArtifact3:
		*s = UnequipSchemaSlotArtifact3
		return nil
	case UnequipSchemaSlotUtility1:
		*s = UnequipSchemaSlotUtility1
		return nil
	case UnequipSchemaSlotUtility2:
		*s = UnequipSchemaSlotUtility2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UseItemResponseSchema
type UseItemResponseSchema struct {
	Data UseItemSchema `json:"data"`
}

// GetData returns the value of Data.
func (s *UseItemResponseSchema) GetData() UseItemSchema {
	return s.Data
}

// SetData sets the value of Data.
func (s *UseItemResponseSchema) SetData(val UseItemSchema) {
	s.Data = val
}

func (*UseItemResponseSchema) actionUseItemMyNameActionUsePostRes() {}

// Ref: #/components/schemas/UseItemSchema
type UseItemSchema struct {
	// Cooldown details.
	Cooldown UseItemSchemaCooldown `json:"cooldown"`
	// Item details.
	Item UseItemSchemaItem `json:"item"`
	// Player details.
	Character UseItemSchemaCharacter `json:"character"`
}

// GetCooldown returns the value of Cooldown.
func (s *UseItemSchema) GetCooldown() UseItemSchemaCooldown {
	return s.Cooldown
}

// GetItem returns the value of Item.
func (s *UseItemSchema) GetItem() UseItemSchemaItem {
	return s.Item
}

// GetCharacter returns the value of Character.
func (s *UseItemSchema) GetCharacter() UseItemSchemaCharacter {
	return s.Character
}

// SetCooldown sets the value of Cooldown.
func (s *UseItemSchema) SetCooldown(val UseItemSchemaCooldown) {
	s.Cooldown = val
}

// SetItem sets the value of Item.
func (s *UseItemSchema) SetItem(val UseItemSchemaItem) {
	s.Item = val
}

// SetCharacter sets the value of Character.
func (s *UseItemSchema) SetCharacter(val UseItemSchemaCharacter) {
	s.Character = val
}

type UseItemSchemaCharacter struct {
	// Name of the character.
	Name string `json:"name"`
	// Account name.
	Account string `json:"account"`
	// Character skin code.
	Skin UseItemSchemaCharacterSkin `json:"skin"`
	// Combat level.
	Level int `json:"level"`
	// The current xp level of the combat level.
	Xp int `json:"xp"`
	// XP required to level up the character.
	MaxXp int `json:"max_xp"`
	// The numbers of gold on this character.
	Gold int `json:"gold"`
	// *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`
	// Mining level.
	MiningLevel int `json:"mining_level"`
	// The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`
	// Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`
	// Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`
	// The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`
	// Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`
	// Fishing level.
	FishingLevel int `json:"fishing_level"`
	// The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`
	// Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`
	// Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`
	// The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`
	// Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`
	// Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`
	// The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`
	// Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`
	// Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`
	// The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`
	// Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`
	// The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`
	// Cooking XP.
	CookingXp int `json:"cooking_xp"`
	// Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`
	// Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`
	// Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`
	// Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`
	// Character actual HP.
	Hp int `json:"hp"`
	// Character max HP.
	MaxHp int `json:"max_hp"`
	// *Character Haste. Increase speed attack (reduce fight cooldown).
	Haste int `json:"haste"`
	// *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the
	// attack's damage.
	CriticalStrike int `json:"critical_strike"`
	// *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`
	// Fire attack.
	AttackFire int `json:"attack_fire"`
	// Earth attack.
	AttackEarth int `json:"attack_earth"`
	// Water attack.
	AttackWater int `json:"attack_water"`
	// Air attack.
	AttackAir int `json:"attack_air"`
	// % Fire damage.
	DmgFire int `json:"dmg_fire"`
	// % Earth damage.
	DmgEarth int `json:"dmg_earth"`
	// % Water damage.
	DmgWater int `json:"dmg_water"`
	// % Air damage.
	DmgAir int `json:"dmg_air"`
	// % Fire resistance.
	ResFire int `json:"res_fire"`
	// % Earth resistance.
	ResEarth int `json:"res_earth"`
	// % Water resistance.
	ResWater int `json:"res_water"`
	// % Air resistance.
	ResAir int `json:"res_air"`
	// Character x coordinate.
	X int `json:"x"`
	// Character y coordinate.
	Y int `json:"y"`
	// Cooldown in seconds.
	Cooldown int `json:"cooldown"`
	// Datetime Cooldown expiration.
	CooldownExpiration OptDateTime `json:"cooldown_expiration"`
	// Weapon slot.
	WeaponSlot string `json:"weapon_slot"`
	// Shield slot.
	ShieldSlot string `json:"shield_slot"`
	// Helmet slot.
	HelmetSlot string `json:"helmet_slot"`
	// Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`
	// Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`
	// Boots slot.
	BootsSlot string `json:"boots_slot"`
	// Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`
	// Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`
	// Amulet slot.
	AmuletSlot string `json:"amulet_slot"`
	// Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`
	// Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`
	// Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`
	// Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`
	// Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`
	// Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`
	// Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`
	// Task in progress.
	Task string `json:"task"`
	// Task type.
	TaskType string `json:"task_type"`
	// Task progression.
	TaskProgress int `json:"task_progress"`
	// Task total objective.
	TaskTotal int `json:"task_total"`
	// Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`
	// List of inventory slots.
	Inventory []InventorySlot `json:"inventory"`
}

// GetName returns the value of Name.
func (s *UseItemSchemaCharacter) GetName() string {
	return s.Name
}

// GetAccount returns the value of Account.
func (s *UseItemSchemaCharacter) GetAccount() string {
	return s.Account
}

// GetSkin returns the value of Skin.
func (s *UseItemSchemaCharacter) GetSkin() UseItemSchemaCharacterSkin {
	return s.Skin
}

// GetLevel returns the value of Level.
func (s *UseItemSchemaCharacter) GetLevel() int {
	return s.Level
}

// GetXp returns the value of Xp.
func (s *UseItemSchemaCharacter) GetXp() int {
	return s.Xp
}

// GetMaxXp returns the value of MaxXp.
func (s *UseItemSchemaCharacter) GetMaxXp() int {
	return s.MaxXp
}

// GetGold returns the value of Gold.
func (s *UseItemSchemaCharacter) GetGold() int {
	return s.Gold
}

// GetSpeed returns the value of Speed.
func (s *UseItemSchemaCharacter) GetSpeed() int {
	return s.Speed
}

// GetMiningLevel returns the value of MiningLevel.
func (s *UseItemSchemaCharacter) GetMiningLevel() int {
	return s.MiningLevel
}

// GetMiningXp returns the value of MiningXp.
func (s *UseItemSchemaCharacter) GetMiningXp() int {
	return s.MiningXp
}

// GetMiningMaxXp returns the value of MiningMaxXp.
func (s *UseItemSchemaCharacter) GetMiningMaxXp() int {
	return s.MiningMaxXp
}

// GetWoodcuttingLevel returns the value of WoodcuttingLevel.
func (s *UseItemSchemaCharacter) GetWoodcuttingLevel() int {
	return s.WoodcuttingLevel
}

// GetWoodcuttingXp returns the value of WoodcuttingXp.
func (s *UseItemSchemaCharacter) GetWoodcuttingXp() int {
	return s.WoodcuttingXp
}

// GetWoodcuttingMaxXp returns the value of WoodcuttingMaxXp.
func (s *UseItemSchemaCharacter) GetWoodcuttingMaxXp() int {
	return s.WoodcuttingMaxXp
}

// GetFishingLevel returns the value of FishingLevel.
func (s *UseItemSchemaCharacter) GetFishingLevel() int {
	return s.FishingLevel
}

// GetFishingXp returns the value of FishingXp.
func (s *UseItemSchemaCharacter) GetFishingXp() int {
	return s.FishingXp
}

// GetFishingMaxXp returns the value of FishingMaxXp.
func (s *UseItemSchemaCharacter) GetFishingMaxXp() int {
	return s.FishingMaxXp
}

// GetWeaponcraftingLevel returns the value of WeaponcraftingLevel.
func (s *UseItemSchemaCharacter) GetWeaponcraftingLevel() int {
	return s.WeaponcraftingLevel
}

// GetWeaponcraftingXp returns the value of WeaponcraftingXp.
func (s *UseItemSchemaCharacter) GetWeaponcraftingXp() int {
	return s.WeaponcraftingXp
}

// GetWeaponcraftingMaxXp returns the value of WeaponcraftingMaxXp.
func (s *UseItemSchemaCharacter) GetWeaponcraftingMaxXp() int {
	return s.WeaponcraftingMaxXp
}

// GetGearcraftingLevel returns the value of GearcraftingLevel.
func (s *UseItemSchemaCharacter) GetGearcraftingLevel() int {
	return s.GearcraftingLevel
}

// GetGearcraftingXp returns the value of GearcraftingXp.
func (s *UseItemSchemaCharacter) GetGearcraftingXp() int {
	return s.GearcraftingXp
}

// GetGearcraftingMaxXp returns the value of GearcraftingMaxXp.
func (s *UseItemSchemaCharacter) GetGearcraftingMaxXp() int {
	return s.GearcraftingMaxXp
}

// GetJewelrycraftingLevel returns the value of JewelrycraftingLevel.
func (s *UseItemSchemaCharacter) GetJewelrycraftingLevel() int {
	return s.JewelrycraftingLevel
}

// GetJewelrycraftingXp returns the value of JewelrycraftingXp.
func (s *UseItemSchemaCharacter) GetJewelrycraftingXp() int {
	return s.JewelrycraftingXp
}

// GetJewelrycraftingMaxXp returns the value of JewelrycraftingMaxXp.
func (s *UseItemSchemaCharacter) GetJewelrycraftingMaxXp() int {
	return s.JewelrycraftingMaxXp
}

// GetCookingLevel returns the value of CookingLevel.
func (s *UseItemSchemaCharacter) GetCookingLevel() int {
	return s.CookingLevel
}

// GetCookingXp returns the value of CookingXp.
func (s *UseItemSchemaCharacter) GetCookingXp() int {
	return s.CookingXp
}

// GetCookingMaxXp returns the value of CookingMaxXp.
func (s *UseItemSchemaCharacter) GetCookingMaxXp() int {
	return s.CookingMaxXp
}

// GetAlchemyLevel returns the value of AlchemyLevel.
func (s *UseItemSchemaCharacter) GetAlchemyLevel() int {
	return s.AlchemyLevel
}

// GetAlchemyXp returns the value of AlchemyXp.
func (s *UseItemSchemaCharacter) GetAlchemyXp() int {
	return s.AlchemyXp
}

// GetAlchemyMaxXp returns the value of AlchemyMaxXp.
func (s *UseItemSchemaCharacter) GetAlchemyMaxXp() int {
	return s.AlchemyMaxXp
}

// GetHp returns the value of Hp.
func (s *UseItemSchemaCharacter) GetHp() int {
	return s.Hp
}

// GetMaxHp returns the value of MaxHp.
func (s *UseItemSchemaCharacter) GetMaxHp() int {
	return s.MaxHp
}

// GetHaste returns the value of Haste.
func (s *UseItemSchemaCharacter) GetHaste() int {
	return s.Haste
}

// GetCriticalStrike returns the value of CriticalStrike.
func (s *UseItemSchemaCharacter) GetCriticalStrike() int {
	return s.CriticalStrike
}

// GetStamina returns the value of Stamina.
func (s *UseItemSchemaCharacter) GetStamina() int {
	return s.Stamina
}

// GetAttackFire returns the value of AttackFire.
func (s *UseItemSchemaCharacter) GetAttackFire() int {
	return s.AttackFire
}

// GetAttackEarth returns the value of AttackEarth.
func (s *UseItemSchemaCharacter) GetAttackEarth() int {
	return s.AttackEarth
}

// GetAttackWater returns the value of AttackWater.
func (s *UseItemSchemaCharacter) GetAttackWater() int {
	return s.AttackWater
}

// GetAttackAir returns the value of AttackAir.
func (s *UseItemSchemaCharacter) GetAttackAir() int {
	return s.AttackAir
}

// GetDmgFire returns the value of DmgFire.
func (s *UseItemSchemaCharacter) GetDmgFire() int {
	return s.DmgFire
}

// GetDmgEarth returns the value of DmgEarth.
func (s *UseItemSchemaCharacter) GetDmgEarth() int {
	return s.DmgEarth
}

// GetDmgWater returns the value of DmgWater.
func (s *UseItemSchemaCharacter) GetDmgWater() int {
	return s.DmgWater
}

// GetDmgAir returns the value of DmgAir.
func (s *UseItemSchemaCharacter) GetDmgAir() int {
	return s.DmgAir
}

// GetResFire returns the value of ResFire.
func (s *UseItemSchemaCharacter) GetResFire() int {
	return s.ResFire
}

// GetResEarth returns the value of ResEarth.
func (s *UseItemSchemaCharacter) GetResEarth() int {
	return s.ResEarth
}

// GetResWater returns the value of ResWater.
func (s *UseItemSchemaCharacter) GetResWater() int {
	return s.ResWater
}

// GetResAir returns the value of ResAir.
func (s *UseItemSchemaCharacter) GetResAir() int {
	return s.ResAir
}

// GetX returns the value of X.
func (s *UseItemSchemaCharacter) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *UseItemSchemaCharacter) GetY() int {
	return s.Y
}

// GetCooldown returns the value of Cooldown.
func (s *UseItemSchemaCharacter) GetCooldown() int {
	return s.Cooldown
}

// GetCooldownExpiration returns the value of CooldownExpiration.
func (s *UseItemSchemaCharacter) GetCooldownExpiration() OptDateTime {
	return s.CooldownExpiration
}

// GetWeaponSlot returns the value of WeaponSlot.
func (s *UseItemSchemaCharacter) GetWeaponSlot() string {
	return s.WeaponSlot
}

// GetShieldSlot returns the value of ShieldSlot.
func (s *UseItemSchemaCharacter) GetShieldSlot() string {
	return s.ShieldSlot
}

// GetHelmetSlot returns the value of HelmetSlot.
func (s *UseItemSchemaCharacter) GetHelmetSlot() string {
	return s.HelmetSlot
}

// GetBodyArmorSlot returns the value of BodyArmorSlot.
func (s *UseItemSchemaCharacter) GetBodyArmorSlot() string {
	return s.BodyArmorSlot
}

// GetLegArmorSlot returns the value of LegArmorSlot.
func (s *UseItemSchemaCharacter) GetLegArmorSlot() string {
	return s.LegArmorSlot
}

// GetBootsSlot returns the value of BootsSlot.
func (s *UseItemSchemaCharacter) GetBootsSlot() string {
	return s.BootsSlot
}

// GetRing1Slot returns the value of Ring1Slot.
func (s *UseItemSchemaCharacter) GetRing1Slot() string {
	return s.Ring1Slot
}

// GetRing2Slot returns the value of Ring2Slot.
func (s *UseItemSchemaCharacter) GetRing2Slot() string {
	return s.Ring2Slot
}

// GetAmuletSlot returns the value of AmuletSlot.
func (s *UseItemSchemaCharacter) GetAmuletSlot() string {
	return s.AmuletSlot
}

// GetArtifact1Slot returns the value of Artifact1Slot.
func (s *UseItemSchemaCharacter) GetArtifact1Slot() string {
	return s.Artifact1Slot
}

// GetArtifact2Slot returns the value of Artifact2Slot.
func (s *UseItemSchemaCharacter) GetArtifact2Slot() string {
	return s.Artifact2Slot
}

// GetArtifact3Slot returns the value of Artifact3Slot.
func (s *UseItemSchemaCharacter) GetArtifact3Slot() string {
	return s.Artifact3Slot
}

// GetUtility1Slot returns the value of Utility1Slot.
func (s *UseItemSchemaCharacter) GetUtility1Slot() string {
	return s.Utility1Slot
}

// GetUtility1SlotQuantity returns the value of Utility1SlotQuantity.
func (s *UseItemSchemaCharacter) GetUtility1SlotQuantity() int {
	return s.Utility1SlotQuantity
}

// GetUtility2Slot returns the value of Utility2Slot.
func (s *UseItemSchemaCharacter) GetUtility2Slot() string {
	return s.Utility2Slot
}

// GetUtility2SlotQuantity returns the value of Utility2SlotQuantity.
func (s *UseItemSchemaCharacter) GetUtility2SlotQuantity() int {
	return s.Utility2SlotQuantity
}

// GetTask returns the value of Task.
func (s *UseItemSchemaCharacter) GetTask() string {
	return s.Task
}

// GetTaskType returns the value of TaskType.
func (s *UseItemSchemaCharacter) GetTaskType() string {
	return s.TaskType
}

// GetTaskProgress returns the value of TaskProgress.
func (s *UseItemSchemaCharacter) GetTaskProgress() int {
	return s.TaskProgress
}

// GetTaskTotal returns the value of TaskTotal.
func (s *UseItemSchemaCharacter) GetTaskTotal() int {
	return s.TaskTotal
}

// GetInventoryMaxItems returns the value of InventoryMaxItems.
func (s *UseItemSchemaCharacter) GetInventoryMaxItems() int {
	return s.InventoryMaxItems
}

// GetInventory returns the value of Inventory.
func (s *UseItemSchemaCharacter) GetInventory() []InventorySlot {
	return s.Inventory
}

// SetName sets the value of Name.
func (s *UseItemSchemaCharacter) SetName(val string) {
	s.Name = val
}

// SetAccount sets the value of Account.
func (s *UseItemSchemaCharacter) SetAccount(val string) {
	s.Account = val
}

// SetSkin sets the value of Skin.
func (s *UseItemSchemaCharacter) SetSkin(val UseItemSchemaCharacterSkin) {
	s.Skin = val
}

// SetLevel sets the value of Level.
func (s *UseItemSchemaCharacter) SetLevel(val int) {
	s.Level = val
}

// SetXp sets the value of Xp.
func (s *UseItemSchemaCharacter) SetXp(val int) {
	s.Xp = val
}

// SetMaxXp sets the value of MaxXp.
func (s *UseItemSchemaCharacter) SetMaxXp(val int) {
	s.MaxXp = val
}

// SetGold sets the value of Gold.
func (s *UseItemSchemaCharacter) SetGold(val int) {
	s.Gold = val
}

// SetSpeed sets the value of Speed.
func (s *UseItemSchemaCharacter) SetSpeed(val int) {
	s.Speed = val
}

// SetMiningLevel sets the value of MiningLevel.
func (s *UseItemSchemaCharacter) SetMiningLevel(val int) {
	s.MiningLevel = val
}

// SetMiningXp sets the value of MiningXp.
func (s *UseItemSchemaCharacter) SetMiningXp(val int) {
	s.MiningXp = val
}

// SetMiningMaxXp sets the value of MiningMaxXp.
func (s *UseItemSchemaCharacter) SetMiningMaxXp(val int) {
	s.MiningMaxXp = val
}

// SetWoodcuttingLevel sets the value of WoodcuttingLevel.
func (s *UseItemSchemaCharacter) SetWoodcuttingLevel(val int) {
	s.WoodcuttingLevel = val
}

// SetWoodcuttingXp sets the value of WoodcuttingXp.
func (s *UseItemSchemaCharacter) SetWoodcuttingXp(val int) {
	s.WoodcuttingXp = val
}

// SetWoodcuttingMaxXp sets the value of WoodcuttingMaxXp.
func (s *UseItemSchemaCharacter) SetWoodcuttingMaxXp(val int) {
	s.WoodcuttingMaxXp = val
}

// SetFishingLevel sets the value of FishingLevel.
func (s *UseItemSchemaCharacter) SetFishingLevel(val int) {
	s.FishingLevel = val
}

// SetFishingXp sets the value of FishingXp.
func (s *UseItemSchemaCharacter) SetFishingXp(val int) {
	s.FishingXp = val
}

// SetFishingMaxXp sets the value of FishingMaxXp.
func (s *UseItemSchemaCharacter) SetFishingMaxXp(val int) {
	s.FishingMaxXp = val
}

// SetWeaponcraftingLevel sets the value of WeaponcraftingLevel.
func (s *UseItemSchemaCharacter) SetWeaponcraftingLevel(val int) {
	s.WeaponcraftingLevel = val
}

// SetWeaponcraftingXp sets the value of WeaponcraftingXp.
func (s *UseItemSchemaCharacter) SetWeaponcraftingXp(val int) {
	s.WeaponcraftingXp = val
}

// SetWeaponcraftingMaxXp sets the value of WeaponcraftingMaxXp.
func (s *UseItemSchemaCharacter) SetWeaponcraftingMaxXp(val int) {
	s.WeaponcraftingMaxXp = val
}

// SetGearcraftingLevel sets the value of GearcraftingLevel.
func (s *UseItemSchemaCharacter) SetGearcraftingLevel(val int) {
	s.GearcraftingLevel = val
}

// SetGearcraftingXp sets the value of GearcraftingXp.
func (s *UseItemSchemaCharacter) SetGearcraftingXp(val int) {
	s.GearcraftingXp = val
}

// SetGearcraftingMaxXp sets the value of GearcraftingMaxXp.
func (s *UseItemSchemaCharacter) SetGearcraftingMaxXp(val int) {
	s.GearcraftingMaxXp = val
}

// SetJewelrycraftingLevel sets the value of JewelrycraftingLevel.
func (s *UseItemSchemaCharacter) SetJewelrycraftingLevel(val int) {
	s.JewelrycraftingLevel = val
}

// SetJewelrycraftingXp sets the value of JewelrycraftingXp.
func (s *UseItemSchemaCharacter) SetJewelrycraftingXp(val int) {
	s.JewelrycraftingXp = val
}

// SetJewelrycraftingMaxXp sets the value of JewelrycraftingMaxXp.
func (s *UseItemSchemaCharacter) SetJewelrycraftingMaxXp(val int) {
	s.JewelrycraftingMaxXp = val
}

// SetCookingLevel sets the value of CookingLevel.
func (s *UseItemSchemaCharacter) SetCookingLevel(val int) {
	s.CookingLevel = val
}

// SetCookingXp sets the value of CookingXp.
func (s *UseItemSchemaCharacter) SetCookingXp(val int) {
	s.CookingXp = val
}

// SetCookingMaxXp sets the value of CookingMaxXp.
func (s *UseItemSchemaCharacter) SetCookingMaxXp(val int) {
	s.CookingMaxXp = val
}

// SetAlchemyLevel sets the value of AlchemyLevel.
func (s *UseItemSchemaCharacter) SetAlchemyLevel(val int) {
	s.AlchemyLevel = val
}

// SetAlchemyXp sets the value of AlchemyXp.
func (s *UseItemSchemaCharacter) SetAlchemyXp(val int) {
	s.AlchemyXp = val
}

// SetAlchemyMaxXp sets the value of AlchemyMaxXp.
func (s *UseItemSchemaCharacter) SetAlchemyMaxXp(val int) {
	s.AlchemyMaxXp = val
}

// SetHp sets the value of Hp.
func (s *UseItemSchemaCharacter) SetHp(val int) {
	s.Hp = val
}

// SetMaxHp sets the value of MaxHp.
func (s *UseItemSchemaCharacter) SetMaxHp(val int) {
	s.MaxHp = val
}

// SetHaste sets the value of Haste.
func (s *UseItemSchemaCharacter) SetHaste(val int) {
	s.Haste = val
}

// SetCriticalStrike sets the value of CriticalStrike.
func (s *UseItemSchemaCharacter) SetCriticalStrike(val int) {
	s.CriticalStrike = val
}

// SetStamina sets the value of Stamina.
func (s *UseItemSchemaCharacter) SetStamina(val int) {
	s.Stamina = val
}

// SetAttackFire sets the value of AttackFire.
func (s *UseItemSchemaCharacter) SetAttackFire(val int) {
	s.AttackFire = val
}

// SetAttackEarth sets the value of AttackEarth.
func (s *UseItemSchemaCharacter) SetAttackEarth(val int) {
	s.AttackEarth = val
}

// SetAttackWater sets the value of AttackWater.
func (s *UseItemSchemaCharacter) SetAttackWater(val int) {
	s.AttackWater = val
}

// SetAttackAir sets the value of AttackAir.
func (s *UseItemSchemaCharacter) SetAttackAir(val int) {
	s.AttackAir = val
}

// SetDmgFire sets the value of DmgFire.
func (s *UseItemSchemaCharacter) SetDmgFire(val int) {
	s.DmgFire = val
}

// SetDmgEarth sets the value of DmgEarth.
func (s *UseItemSchemaCharacter) SetDmgEarth(val int) {
	s.DmgEarth = val
}

// SetDmgWater sets the value of DmgWater.
func (s *UseItemSchemaCharacter) SetDmgWater(val int) {
	s.DmgWater = val
}

// SetDmgAir sets the value of DmgAir.
func (s *UseItemSchemaCharacter) SetDmgAir(val int) {
	s.DmgAir = val
}

// SetResFire sets the value of ResFire.
func (s *UseItemSchemaCharacter) SetResFire(val int) {
	s.ResFire = val
}

// SetResEarth sets the value of ResEarth.
func (s *UseItemSchemaCharacter) SetResEarth(val int) {
	s.ResEarth = val
}

// SetResWater sets the value of ResWater.
func (s *UseItemSchemaCharacter) SetResWater(val int) {
	s.ResWater = val
}

// SetResAir sets the value of ResAir.
func (s *UseItemSchemaCharacter) SetResAir(val int) {
	s.ResAir = val
}

// SetX sets the value of X.
func (s *UseItemSchemaCharacter) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *UseItemSchemaCharacter) SetY(val int) {
	s.Y = val
}

// SetCooldown sets the value of Cooldown.
func (s *UseItemSchemaCharacter) SetCooldown(val int) {
	s.Cooldown = val
}

// SetCooldownExpiration sets the value of CooldownExpiration.
func (s *UseItemSchemaCharacter) SetCooldownExpiration(val OptDateTime) {
	s.CooldownExpiration = val
}

// SetWeaponSlot sets the value of WeaponSlot.
func (s *UseItemSchemaCharacter) SetWeaponSlot(val string) {
	s.WeaponSlot = val
}

// SetShieldSlot sets the value of ShieldSlot.
func (s *UseItemSchemaCharacter) SetShieldSlot(val string) {
	s.ShieldSlot = val
}

// SetHelmetSlot sets the value of HelmetSlot.
func (s *UseItemSchemaCharacter) SetHelmetSlot(val string) {
	s.HelmetSlot = val
}

// SetBodyArmorSlot sets the value of BodyArmorSlot.
func (s *UseItemSchemaCharacter) SetBodyArmorSlot(val string) {
	s.BodyArmorSlot = val
}

// SetLegArmorSlot sets the value of LegArmorSlot.
func (s *UseItemSchemaCharacter) SetLegArmorSlot(val string) {
	s.LegArmorSlot = val
}

// SetBootsSlot sets the value of BootsSlot.
func (s *UseItemSchemaCharacter) SetBootsSlot(val string) {
	s.BootsSlot = val
}

// SetRing1Slot sets the value of Ring1Slot.
func (s *UseItemSchemaCharacter) SetRing1Slot(val string) {
	s.Ring1Slot = val
}

// SetRing2Slot sets the value of Ring2Slot.
func (s *UseItemSchemaCharacter) SetRing2Slot(val string) {
	s.Ring2Slot = val
}

// SetAmuletSlot sets the value of AmuletSlot.
func (s *UseItemSchemaCharacter) SetAmuletSlot(val string) {
	s.AmuletSlot = val
}

// SetArtifact1Slot sets the value of Artifact1Slot.
func (s *UseItemSchemaCharacter) SetArtifact1Slot(val string) {
	s.Artifact1Slot = val
}

// SetArtifact2Slot sets the value of Artifact2Slot.
func (s *UseItemSchemaCharacter) SetArtifact2Slot(val string) {
	s.Artifact2Slot = val
}

// SetArtifact3Slot sets the value of Artifact3Slot.
func (s *UseItemSchemaCharacter) SetArtifact3Slot(val string) {
	s.Artifact3Slot = val
}

// SetUtility1Slot sets the value of Utility1Slot.
func (s *UseItemSchemaCharacter) SetUtility1Slot(val string) {
	s.Utility1Slot = val
}

// SetUtility1SlotQuantity sets the value of Utility1SlotQuantity.
func (s *UseItemSchemaCharacter) SetUtility1SlotQuantity(val int) {
	s.Utility1SlotQuantity = val
}

// SetUtility2Slot sets the value of Utility2Slot.
func (s *UseItemSchemaCharacter) SetUtility2Slot(val string) {
	s.Utility2Slot = val
}

// SetUtility2SlotQuantity sets the value of Utility2SlotQuantity.
func (s *UseItemSchemaCharacter) SetUtility2SlotQuantity(val int) {
	s.Utility2SlotQuantity = val
}

// SetTask sets the value of Task.
func (s *UseItemSchemaCharacter) SetTask(val string) {
	s.Task = val
}

// SetTaskType sets the value of TaskType.
func (s *UseItemSchemaCharacter) SetTaskType(val string) {
	s.TaskType = val
}

// SetTaskProgress sets the value of TaskProgress.
func (s *UseItemSchemaCharacter) SetTaskProgress(val int) {
	s.TaskProgress = val
}

// SetTaskTotal sets the value of TaskTotal.
func (s *UseItemSchemaCharacter) SetTaskTotal(val int) {
	s.TaskTotal = val
}

// SetInventoryMaxItems sets the value of InventoryMaxItems.
func (s *UseItemSchemaCharacter) SetInventoryMaxItems(val int) {
	s.InventoryMaxItems = val
}

// SetInventory sets the value of Inventory.
func (s *UseItemSchemaCharacter) SetInventory(val []InventorySlot) {
	s.Inventory = val
}

type UseItemSchemaCharacterSkin string

const (
	UseItemSchemaCharacterSkinMen1   UseItemSchemaCharacterSkin = "men1"
	UseItemSchemaCharacterSkinMen2   UseItemSchemaCharacterSkin = "men2"
	UseItemSchemaCharacterSkinMen3   UseItemSchemaCharacterSkin = "men3"
	UseItemSchemaCharacterSkinWomen1 UseItemSchemaCharacterSkin = "women1"
	UseItemSchemaCharacterSkinWomen2 UseItemSchemaCharacterSkin = "women2"
	UseItemSchemaCharacterSkinWomen3 UseItemSchemaCharacterSkin = "women3"
)

// AllValues returns all UseItemSchemaCharacterSkin values.
func (UseItemSchemaCharacterSkin) AllValues() []UseItemSchemaCharacterSkin {
	return []UseItemSchemaCharacterSkin{
		UseItemSchemaCharacterSkinMen1,
		UseItemSchemaCharacterSkinMen2,
		UseItemSchemaCharacterSkinMen3,
		UseItemSchemaCharacterSkinWomen1,
		UseItemSchemaCharacterSkinWomen2,
		UseItemSchemaCharacterSkinWomen3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UseItemSchemaCharacterSkin) MarshalText() ([]byte, error) {
	switch s {
	case UseItemSchemaCharacterSkinMen1:
		return []byte(s), nil
	case UseItemSchemaCharacterSkinMen2:
		return []byte(s), nil
	case UseItemSchemaCharacterSkinMen3:
		return []byte(s), nil
	case UseItemSchemaCharacterSkinWomen1:
		return []byte(s), nil
	case UseItemSchemaCharacterSkinWomen2:
		return []byte(s), nil
	case UseItemSchemaCharacterSkinWomen3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UseItemSchemaCharacterSkin) UnmarshalText(data []byte) error {
	switch UseItemSchemaCharacterSkin(data) {
	case UseItemSchemaCharacterSkinMen1:
		*s = UseItemSchemaCharacterSkinMen1
		return nil
	case UseItemSchemaCharacterSkinMen2:
		*s = UseItemSchemaCharacterSkinMen2
		return nil
	case UseItemSchemaCharacterSkinMen3:
		*s = UseItemSchemaCharacterSkinMen3
		return nil
	case UseItemSchemaCharacterSkinWomen1:
		*s = UseItemSchemaCharacterSkinWomen1
		return nil
	case UseItemSchemaCharacterSkinWomen2:
		*s = UseItemSchemaCharacterSkinWomen2
		return nil
	case UseItemSchemaCharacterSkinWomen3:
		*s = UseItemSchemaCharacterSkinWomen3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UseItemSchemaCooldown struct {
	// The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
	// The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`
	// The start of the cooldown.
	StartedAt time.Time `json:"started_at"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason UseItemSchemaCooldownReason `json:"reason"`
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *UseItemSchemaCooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *UseItemSchemaCooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetStartedAt returns the value of StartedAt.
func (s *UseItemSchemaCooldown) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetExpiration returns the value of Expiration.
func (s *UseItemSchemaCooldown) GetExpiration() time.Time {
	return s.Expiration
}

// GetReason returns the value of Reason.
func (s *UseItemSchemaCooldown) GetReason() UseItemSchemaCooldownReason {
	return s.Reason
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *UseItemSchemaCooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *UseItemSchemaCooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetStartedAt sets the value of StartedAt.
func (s *UseItemSchemaCooldown) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetExpiration sets the value of Expiration.
func (s *UseItemSchemaCooldown) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetReason sets the value of Reason.
func (s *UseItemSchemaCooldown) SetReason(val UseItemSchemaCooldownReason) {
	s.Reason = val
}

type UseItemSchemaCooldownReason string

const (
	UseItemSchemaCooldownReasonMovement         UseItemSchemaCooldownReason = "movement"
	UseItemSchemaCooldownReasonFight            UseItemSchemaCooldownReason = "fight"
	UseItemSchemaCooldownReasonCrafting         UseItemSchemaCooldownReason = "crafting"
	UseItemSchemaCooldownReasonGathering        UseItemSchemaCooldownReason = "gathering"
	UseItemSchemaCooldownReasonBuyGe            UseItemSchemaCooldownReason = "buy_ge"
	UseItemSchemaCooldownReasonSellGe           UseItemSchemaCooldownReason = "sell_ge"
	UseItemSchemaCooldownReasonCancelGe         UseItemSchemaCooldownReason = "cancel_ge"
	UseItemSchemaCooldownReasonDeleteItem       UseItemSchemaCooldownReason = "delete_item"
	UseItemSchemaCooldownReasonDeposit          UseItemSchemaCooldownReason = "deposit"
	UseItemSchemaCooldownReasonWithdraw         UseItemSchemaCooldownReason = "withdraw"
	UseItemSchemaCooldownReasonDepositGold      UseItemSchemaCooldownReason = "deposit_gold"
	UseItemSchemaCooldownReasonWithdrawGold     UseItemSchemaCooldownReason = "withdraw_gold"
	UseItemSchemaCooldownReasonEquip            UseItemSchemaCooldownReason = "equip"
	UseItemSchemaCooldownReasonUnequip          UseItemSchemaCooldownReason = "unequip"
	UseItemSchemaCooldownReasonTask             UseItemSchemaCooldownReason = "task"
	UseItemSchemaCooldownReasonRecycling        UseItemSchemaCooldownReason = "recycling"
	UseItemSchemaCooldownReasonRest             UseItemSchemaCooldownReason = "rest"
	UseItemSchemaCooldownReasonUse              UseItemSchemaCooldownReason = "use"
	UseItemSchemaCooldownReasonBuyBankExpansion UseItemSchemaCooldownReason = "buy_bank_expansion"
)

// AllValues returns all UseItemSchemaCooldownReason values.
func (UseItemSchemaCooldownReason) AllValues() []UseItemSchemaCooldownReason {
	return []UseItemSchemaCooldownReason{
		UseItemSchemaCooldownReasonMovement,
		UseItemSchemaCooldownReasonFight,
		UseItemSchemaCooldownReasonCrafting,
		UseItemSchemaCooldownReasonGathering,
		UseItemSchemaCooldownReasonBuyGe,
		UseItemSchemaCooldownReasonSellGe,
		UseItemSchemaCooldownReasonCancelGe,
		UseItemSchemaCooldownReasonDeleteItem,
		UseItemSchemaCooldownReasonDeposit,
		UseItemSchemaCooldownReasonWithdraw,
		UseItemSchemaCooldownReasonDepositGold,
		UseItemSchemaCooldownReasonWithdrawGold,
		UseItemSchemaCooldownReasonEquip,
		UseItemSchemaCooldownReasonUnequip,
		UseItemSchemaCooldownReasonTask,
		UseItemSchemaCooldownReasonRecycling,
		UseItemSchemaCooldownReasonRest,
		UseItemSchemaCooldownReasonUse,
		UseItemSchemaCooldownReasonBuyBankExpansion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UseItemSchemaCooldownReason) MarshalText() ([]byte, error) {
	switch s {
	case UseItemSchemaCooldownReasonMovement:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonFight:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonCrafting:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonGathering:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonBuyGe:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonSellGe:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonCancelGe:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonDeleteItem:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonDeposit:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonWithdraw:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonDepositGold:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonWithdrawGold:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonEquip:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonUnequip:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonTask:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonRecycling:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonRest:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonUse:
		return []byte(s), nil
	case UseItemSchemaCooldownReasonBuyBankExpansion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UseItemSchemaCooldownReason) UnmarshalText(data []byte) error {
	switch UseItemSchemaCooldownReason(data) {
	case UseItemSchemaCooldownReasonMovement:
		*s = UseItemSchemaCooldownReasonMovement
		return nil
	case UseItemSchemaCooldownReasonFight:
		*s = UseItemSchemaCooldownReasonFight
		return nil
	case UseItemSchemaCooldownReasonCrafting:
		*s = UseItemSchemaCooldownReasonCrafting
		return nil
	case UseItemSchemaCooldownReasonGathering:
		*s = UseItemSchemaCooldownReasonGathering
		return nil
	case UseItemSchemaCooldownReasonBuyGe:
		*s = UseItemSchemaCooldownReasonBuyGe
		return nil
	case UseItemSchemaCooldownReasonSellGe:
		*s = UseItemSchemaCooldownReasonSellGe
		return nil
	case UseItemSchemaCooldownReasonCancelGe:
		*s = UseItemSchemaCooldownReasonCancelGe
		return nil
	case UseItemSchemaCooldownReasonDeleteItem:
		*s = UseItemSchemaCooldownReasonDeleteItem
		return nil
	case UseItemSchemaCooldownReasonDeposit:
		*s = UseItemSchemaCooldownReasonDeposit
		return nil
	case UseItemSchemaCooldownReasonWithdraw:
		*s = UseItemSchemaCooldownReasonWithdraw
		return nil
	case UseItemSchemaCooldownReasonDepositGold:
		*s = UseItemSchemaCooldownReasonDepositGold
		return nil
	case UseItemSchemaCooldownReasonWithdrawGold:
		*s = UseItemSchemaCooldownReasonWithdrawGold
		return nil
	case UseItemSchemaCooldownReasonEquip:
		*s = UseItemSchemaCooldownReasonEquip
		return nil
	case UseItemSchemaCooldownReasonUnequip:
		*s = UseItemSchemaCooldownReasonUnequip
		return nil
	case UseItemSchemaCooldownReasonTask:
		*s = UseItemSchemaCooldownReasonTask
		return nil
	case UseItemSchemaCooldownReasonRecycling:
		*s = UseItemSchemaCooldownReasonRecycling
		return nil
	case UseItemSchemaCooldownReasonRest:
		*s = UseItemSchemaCooldownReasonRest
		return nil
	case UseItemSchemaCooldownReasonUse:
		*s = UseItemSchemaCooldownReasonUse
		return nil
	case UseItemSchemaCooldownReasonBuyBankExpansion:
		*s = UseItemSchemaCooldownReasonBuyBankExpansion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UseItemSchemaItem struct {
	// Item name.
	Name string `json:"name"`
	// Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`
	// Item level.
	Level int `json:"level"`
	// Item type.
	Type string `json:"type"`
	// Item subtype.
	Subtype string `json:"subtype"`
	// Item description.
	Description string `json:"description"`
	// List of object effects. For equipment, it will include item stats.
	Effects []ItemEffectSchema `json:"effects"`
	// Craft information. If applicable.
	Craft OptUseItemSchemaItemCraft `json:"craft"`
	// Item tradeable status. A non-tradeable item cannot be exchanged or sold.
	Tradeable bool `json:"tradeable"`
}

// GetName returns the value of Name.
func (s *UseItemSchemaItem) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *UseItemSchemaItem) GetCode() string {
	return s.Code
}

// GetLevel returns the value of Level.
func (s *UseItemSchemaItem) GetLevel() int {
	return s.Level
}

// GetType returns the value of Type.
func (s *UseItemSchemaItem) GetType() string {
	return s.Type
}

// GetSubtype returns the value of Subtype.
func (s *UseItemSchemaItem) GetSubtype() string {
	return s.Subtype
}

// GetDescription returns the value of Description.
func (s *UseItemSchemaItem) GetDescription() string {
	return s.Description
}

// GetEffects returns the value of Effects.
func (s *UseItemSchemaItem) GetEffects() []ItemEffectSchema {
	return s.Effects
}

// GetCraft returns the value of Craft.
func (s *UseItemSchemaItem) GetCraft() OptUseItemSchemaItemCraft {
	return s.Craft
}

// GetTradeable returns the value of Tradeable.
func (s *UseItemSchemaItem) GetTradeable() bool {
	return s.Tradeable
}

// SetName sets the value of Name.
func (s *UseItemSchemaItem) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *UseItemSchemaItem) SetCode(val string) {
	s.Code = val
}

// SetLevel sets the value of Level.
func (s *UseItemSchemaItem) SetLevel(val int) {
	s.Level = val
}

// SetType sets the value of Type.
func (s *UseItemSchemaItem) SetType(val string) {
	s.Type = val
}

// SetSubtype sets the value of Subtype.
func (s *UseItemSchemaItem) SetSubtype(val string) {
	s.Subtype = val
}

// SetDescription sets the value of Description.
func (s *UseItemSchemaItem) SetDescription(val string) {
	s.Description = val
}

// SetEffects sets the value of Effects.
func (s *UseItemSchemaItem) SetEffects(val []ItemEffectSchema) {
	s.Effects = val
}

// SetCraft sets the value of Craft.
func (s *UseItemSchemaItem) SetCraft(val OptUseItemSchemaItemCraft) {
	s.Craft = val
}

// SetTradeable sets the value of Tradeable.
func (s *UseItemSchemaItem) SetTradeable(val bool) {
	s.Tradeable = val
}

// Craft information. If applicable.
// UseItemSchemaItemCraft represents sum type.
type UseItemSchemaItemCraft struct {
	Type        UseItemSchemaItemCraftType // switch on this field
	CraftSchema CraftSchema
	Null        struct{}
}

// UseItemSchemaItemCraftType is oneOf type of UseItemSchemaItemCraft.
type UseItemSchemaItemCraftType string

// Possible values for UseItemSchemaItemCraftType.
const (
	CraftSchemaUseItemSchemaItemCraft UseItemSchemaItemCraftType = "CraftSchema"
	NullUseItemSchemaItemCraft        UseItemSchemaItemCraftType = "struct{}"
)

// IsCraftSchema reports whether UseItemSchemaItemCraft is CraftSchema.
func (s UseItemSchemaItemCraft) IsCraftSchema() bool {
	return s.Type == CraftSchemaUseItemSchemaItemCraft
}

// IsNull reports whether UseItemSchemaItemCraft is struct{}.
func (s UseItemSchemaItemCraft) IsNull() bool { return s.Type == NullUseItemSchemaItemCraft }

// SetCraftSchema sets UseItemSchemaItemCraft to CraftSchema.
func (s *UseItemSchemaItemCraft) SetCraftSchema(v CraftSchema) {
	s.Type = CraftSchemaUseItemSchemaItemCraft
	s.CraftSchema = v
}

// GetCraftSchema returns CraftSchema and true boolean if UseItemSchemaItemCraft is CraftSchema.
func (s UseItemSchemaItemCraft) GetCraftSchema() (v CraftSchema, ok bool) {
	if !s.IsCraftSchema() {
		return v, false
	}
	return s.CraftSchema, true
}

// NewCraftSchemaUseItemSchemaItemCraft returns new UseItemSchemaItemCraft from CraftSchema.
func NewCraftSchemaUseItemSchemaItemCraft(v CraftSchema) UseItemSchemaItemCraft {
	var s UseItemSchemaItemCraft
	s.SetCraftSchema(v)
	return s
}

// SetNull sets UseItemSchemaItemCraft to struct{}.
func (s *UseItemSchemaItemCraft) SetNull(v struct{}) {
	s.Type = NullUseItemSchemaItemCraft
	s.Null = v
}

// GetNull returns struct{} and true boolean if UseItemSchemaItemCraft is struct{}.
func (s UseItemSchemaItemCraft) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullUseItemSchemaItemCraft returns new UseItemSchemaItemCraft from struct{}.
func NewNullUseItemSchemaItemCraft(v struct{}) UseItemSchemaItemCraft {
	var s UseItemSchemaItemCraft
	s.SetNull(v)
	return s
}
