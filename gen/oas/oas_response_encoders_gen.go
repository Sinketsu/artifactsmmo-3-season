// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeActionAcceptNewTaskMyNameActionTaskNewPostResponse(response ActionAcceptNewTaskMyNameActionTaskNewPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode489:
		w.WriteHeader(489)
		span.SetStatus(codes.Error, http.StatusText(489))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionAcceptNewTaskMyNameActionTaskNewPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse(response ActionBuyBankExpansionMyNameActionBankBuyExpansionPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BankExtensionTransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode492:
		w.WriteHeader(492)
		span.SetStatus(codes.Error, http.StatusText(492))

		return nil

	case *ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionBuyBankExpansionMyNameActionBankBuyExpansionPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionCompleteTaskMyNameActionTaskCompletePostResponse(response ActionCompleteTaskMyNameActionTaskCompletePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TasksRewardDataResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode487:
		w.WriteHeader(487)
		span.SetStatus(codes.Error, http.StatusText(487))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode488:
		w.WriteHeader(488)
		span.SetStatus(codes.Error, http.StatusText(488))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionCompleteTaskMyNameActionTaskCompletePostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionCraftingMyNameActionCraftingPostResponse(response ActionCraftingMyNameActionCraftingPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SkillResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionCraftingMyNameActionCraftingPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode493:
		w.WriteHeader(493)
		span.SetStatus(codes.Error, http.StatusText(493))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionCraftingMyNameActionCraftingPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionDeleteItemMyNameActionDeletePostResponse(response ActionDeleteItemMyNameActionDeletePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteItemResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionDeleteItemMyNameActionDeletePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(response ActionDepositBankGoldMyNameActionBankDepositGoldPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BankGoldTransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode461:
		w.WriteHeader(461)
		span.SetStatus(codes.Error, http.StatusText(461))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode492:
		w.WriteHeader(492)
		span.SetStatus(codes.Error, http.StatusText(492))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionDepositBankGoldMyNameActionBankDepositGoldPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionDepositBankMyNameActionBankDepositPostResponse(response ActionDepositBankMyNameActionBankDepositPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BankItemTransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode461:
		w.WriteHeader(461)
		span.SetStatus(codes.Error, http.StatusText(461))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode462:
		w.WriteHeader(462)
		span.SetStatus(codes.Error, http.StatusText(462))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionDepositBankMyNameActionBankDepositPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionEquipItemMyNameActionEquipPostResponse(response ActionEquipItemMyNameActionEquipPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EquipmentResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionEquipItemMyNameActionEquipPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode484:
		w.WriteHeader(484)
		span.SetStatus(codes.Error, http.StatusText(484))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode485:
		w.WriteHeader(485)
		span.SetStatus(codes.Error, http.StatusText(485))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode491:
		w.WriteHeader(491)
		span.SetStatus(codes.Error, http.StatusText(491))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode496:
		w.WriteHeader(496)
		span.SetStatus(codes.Error, http.StatusText(496))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionEquipItemMyNameActionEquipPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionFightMyNameActionFightPostResponse(response ActionFightMyNameActionFightPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterFightResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionFightMyNameActionFightPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionFightMyNameActionFightPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionFightMyNameActionFightPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionFightMyNameActionFightPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionFightMyNameActionFightPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGatheringMyNameActionGatheringPostResponse(response ActionGatheringMyNameActionGatheringPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *SkillResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode493:
		w.WriteHeader(493)
		span.SetStatus(codes.Error, http.StatusText(493))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGatheringMyNameActionGatheringPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse(response ActionGeBuyItemMyNameActionGrandexchangeBuyPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GETransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode434:
		w.WriteHeader(434)
		span.SetStatus(codes.Error, http.StatusText(434))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode435:
		w.WriteHeader(435)
		span.SetStatus(codes.Error, http.StatusText(435))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode436:
		w.WriteHeader(436)
		span.SetStatus(codes.Error, http.StatusText(436))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode492:
		w.WriteHeader(492)
		span.SetStatus(codes.Error, http.StatusText(492))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGeBuyItemMyNameActionGrandexchangeBuyPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse(response ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GETransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode436:
		w.WriteHeader(436)
		span.SetStatus(codes.Error, http.StatusText(436))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode438:
		w.WriteHeader(438)
		span.SetStatus(codes.Error, http.StatusText(438))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse(response ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GECreateOrderTransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode433:
		w.WriteHeader(433)
		span.SetStatus(codes.Error, http.StatusText(433))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode492:
		w.WriteHeader(492)
		span.SetStatus(codes.Error, http.StatusText(492))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionMoveMyNameActionMovePostResponse(response ActionMoveMyNameActionMovePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterMovementResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionMoveMyNameActionMovePostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionMoveMyNameActionMovePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionMoveMyNameActionMovePostCode490:
		w.WriteHeader(490)
		span.SetStatus(codes.Error, http.StatusText(490))

		return nil

	case *ActionMoveMyNameActionMovePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionMoveMyNameActionMovePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionRecyclingMyNameActionRecyclingPostResponse(response ActionRecyclingMyNameActionRecyclingPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RecyclingResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode473:
		w.WriteHeader(473)
		span.SetStatus(codes.Error, http.StatusText(473))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode493:
		w.WriteHeader(493)
		span.SetStatus(codes.Error, http.StatusText(493))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionRecyclingMyNameActionRecyclingPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionRestMyNameActionRestPostResponse(response ActionRestMyNameActionRestPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterRestResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionRestMyNameActionRestPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionRestMyNameActionRestPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionRestMyNameActionRestPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionTaskCancelMyNameActionTaskCancelPostResponse(response ActionTaskCancelMyNameActionTaskCancelPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskCancelledResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionTaskCancelMyNameActionTaskCancelPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionTaskCancelMyNameActionTaskCancelPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionTaskCancelMyNameActionTaskCancelPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionTaskCancelMyNameActionTaskCancelPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionTaskCancelMyNameActionTaskCancelPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionTaskExchangeMyNameActionTaskExchangePostResponse(response ActionTaskExchangeMyNameActionTaskExchangePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TasksRewardDataResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionTaskExchangeMyNameActionTaskExchangePostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionTaskTradeMyNameActionTaskTradePostResponse(response ActionTaskTradeMyNameActionTaskTradePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskTradeResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode474:
		w.WriteHeader(474)
		span.SetStatus(codes.Error, http.StatusText(474))

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode475:
		w.WriteHeader(475)
		span.SetStatus(codes.Error, http.StatusText(475))

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionTaskTradeMyNameActionTaskTradePostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionUnequipItemMyNameActionUnequipPostResponse(response ActionUnequipItemMyNameActionUnequipPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *EquipmentResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode491:
		w.WriteHeader(491)
		span.SetStatus(codes.Error, http.StatusText(491))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionUnequipItemMyNameActionUnequipPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionUseItemMyNameActionUsePostResponse(response ActionUseItemMyNameActionUsePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UseItemResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionUseItemMyNameActionUsePostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionUseItemMyNameActionUsePostCode476:
		w.WriteHeader(476)
		span.SetStatus(codes.Error, http.StatusText(476))

		return nil

	case *ActionUseItemMyNameActionUsePostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionUseItemMyNameActionUsePostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionUseItemMyNameActionUsePostCode496:
		w.WriteHeader(496)
		span.SetStatus(codes.Error, http.StatusText(496))

		return nil

	case *ActionUseItemMyNameActionUsePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionUseItemMyNameActionUsePostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(response ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BankGoldTransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode460:
		w.WriteHeader(460)
		span.SetStatus(codes.Error, http.StatusText(460))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode461:
		w.WriteHeader(461)
		span.SetStatus(codes.Error, http.StatusText(461))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeActionWithdrawBankMyNameActionBankWithdrawPostResponse(response ActionWithdrawBankMyNameActionBankWithdrawPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *BankItemTransactionResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode461:
		w.WriteHeader(461)
		span.SetStatus(codes.Error, http.StatusText(461))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode478:
		w.WriteHeader(478)
		span.SetStatus(codes.Error, http.StatusText(478))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode486:
		w.WriteHeader(486)
		span.SetStatus(codes.Error, http.StatusText(486))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode497:
		w.WriteHeader(497)
		span.SetStatus(codes.Error, http.StatusText(497))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode499:
		w.WriteHeader(499)
		span.SetStatus(codes.Error, http.StatusText(499))

		return nil

	case *ActionWithdrawBankMyNameActionBankWithdrawPostCode598:
		w.WriteHeader(598)
		span.SetStatus(codes.Error, http.StatusText(598))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeChangePasswordMyChangePasswordPostResponse(response ChangePasswordMyChangePasswordPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *ChangePasswordMyChangePasswordPostCode458:
		w.WriteHeader(458)
		span.SetStatus(codes.Error, http.StatusText(458))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateAccountAccountsCreatePostResponse(response CreateAccountAccountsCreatePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateAccountAccountsCreatePostCode456:
		w.WriteHeader(456)
		span.SetStatus(codes.Error, http.StatusText(456))

		return nil

	case *CreateAccountAccountsCreatePostCode457:
		w.WriteHeader(457)
		span.SetStatus(codes.Error, http.StatusText(457))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeCreateCharacterCharactersCreatePostResponse(response CreateCharacterCharactersCreatePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *CreateCharacterCharactersCreatePostCode494:
		w.WriteHeader(494)
		span.SetStatus(codes.Error, http.StatusText(494))

		return nil

	case *CreateCharacterCharactersCreatePostCode495:
		w.WriteHeader(495)
		span.SetStatus(codes.Error, http.StatusText(495))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeDeleteCharacterCharactersDeletePostResponse(response DeleteCharacterCharactersDeletePostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *DeleteCharacterCharactersDeletePostCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGenerateTokenTokenPostResponse(response GenerateTokenTokenPostRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TokenResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GenerateTokenTokenPostCode455:
		w.WriteHeader(455)
		span.SetStatus(codes.Error, http.StatusText(455))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAccountAccountsAccountGetResponse(response GetAccountAccountsAccountGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AccountDetailsSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAccountAccountsAccountGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAccountAchievementsAccountsAccountAchievementsGetResponse(response GetAccountAchievementsAccountsAccountAchievementsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageAccountAchievementSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAccountAchievementsAccountsAccountAchievementsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAccountDetailsMyDetailsGetResponse(response *MyAccountDetailsSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAccountsLeaderboardLeaderboardAccountsGetResponse(response *DataPageAccountLeaderboardSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAchievementAchievementsCodeGetResponse(response GetAchievementAchievementsCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AchievementResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAchievementAchievementsCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllAchievementsAchievementsGetResponse(response *DataPageAchievementSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllActiveEventsEventsActiveGetResponse(response *DataPageActiveEventSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllCharactersLogsMyLogsGetResponse(response GetAllCharactersLogsMyLogsGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageLogSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetAllCharactersLogsMyLogsGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *GetAllCharactersLogsMyLogsGetCode498:
		w.WriteHeader(498)
		span.SetStatus(codes.Error, http.StatusText(498))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetAllEventsEventsGetResponse(response *DataPageEventSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllItemsItemsGetResponse(response *DataPageItemSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllMapsMapsGetResponse(response *DataPageMapSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllMonstersMonstersGetResponse(response *DataPageMonsterSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllResourcesResourcesGetResponse(response *DataPageResourceSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllTasksRewardsTasksRewardsGetResponse(response *DataPageDropRateSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetAllTasksTasksListGetResponse(response *DataPageTaskFullSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetBankDetailsMyBankGetResponse(response *BankResponseSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetBankItemsMyBankItemsGetResponse(response *DataPageSimpleItemSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetCharacterCharactersNameGetResponse(response GetCharacterCharactersNameGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CharacterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetCharacterCharactersNameGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetCharactersLeaderboardLeaderboardCharactersGetResponse(response *DataPageCharacterLeaderboardSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetGeSellHistoryGrandexchangeHistoryCodeGetResponse(response GetGeSellHistoryGrandexchangeHistoryCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DataPageGeOrderHistorySchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetGeSellHistoryGrandexchangeHistoryCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetGeSellHistoryMyGrandexchangeHistoryGetResponse(response *DataPageGeOrderHistorySchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetGeSellOrderGrandexchangeOrdersIDGetResponse(response GetGeSellOrderGrandexchangeOrdersIDGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GEOrderReponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetGeSellOrderGrandexchangeOrdersIDGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetGeSellOrdersGrandexchangeOrdersGetResponse(response *DataPageGEOrderSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetGeSellOrdersMyGrandexchangeOrdersGetResponse(response *DataPageGEOrderSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetItemItemsCodeGetResponse(response GetItemItemsCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ItemResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetItemItemsCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMapMapsXYGetResponse(response GetMapMapsXYGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MapResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetMapMapsXYGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMonsterMonstersCodeGetResponse(response GetMonsterMonstersCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MonsterResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetMonsterMonstersCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMyCharactersMyCharactersGetResponse(response *MyCharactersListSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetResourceResourcesCodeGetResponse(response GetResourceResourcesCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ResourceResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetResourceResourcesCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetStatusGetResponse(response *StatusResponseSchema, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeGetTaskTasksListCodeGetResponse(response GetTaskTasksListCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TaskFullResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetTaskTasksListCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetTasksRewardTasksRewardsCodeGetResponse(response GetTasksRewardTasksRewardsCodeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *TasksRewardResponseSchema:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetTasksRewardTasksRewardsCodeGetNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
