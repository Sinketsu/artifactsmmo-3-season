// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "GET":
					s.handleGetStatusGetRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "GET")
				}

				return
			}
			switch elem[0] {
			case 'a': // Prefix: "ac"
				origElem := elem
				if l := len("ac"); len(elem) >= l && elem[0:l] == "ac" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "counts/"
					origElem := elem
					if l := len("counts/"); len(elem) >= l && elem[0:l] == "counts/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "create"
						origElem := elem
						if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleCreateAccountAccountsCreatePostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}
					// Param: "account"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAccountAccountsAccountGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/achievements"
						origElem := elem
						if l := len("/achievements"); len(elem) >= l && elem[0:l] == "/achievements" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAccountAchievementsAccountsAccountAchievementsGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'h': // Prefix: "hievements"
					origElem := elem
					if l := len("hievements"); len(elem) >= l && elem[0:l] == "hievements" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllAchievementsAchievementsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "code"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAchievementAchievementsCodeGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "characters/"
				origElem := elem
				if l := len("characters/"); len(elem) >= l && elem[0:l] == "characters/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "create"
					origElem := elem
					if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCreateCharacterCharactersCreatePostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'd': // Prefix: "delete"
					origElem := elem
					if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleDeleteCharacterCharactersDeletePostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}
				// Param: "name"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetCharacterCharactersNameGetRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'e': // Prefix: "events"
				origElem := elem
				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAllEventsEventsGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/active"
					origElem := elem
					if l := len("/active"); len(elem) >= l && elem[0:l] == "/active" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetAllActiveEventsEventsActiveGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'g': // Prefix: "grandexchange/"
				origElem := elem
				if l := len("grandexchange/"); len(elem) >= l && elem[0:l] == "grandexchange/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "history/"
					origElem := elem
					if l := len("history/"); len(elem) >= l && elem[0:l] == "history/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "code"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetGeSellHistoryGrandexchangeHistoryCodeGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'o': // Prefix: "orders"
					origElem := elem
					if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetGeSellOrdersGrandexchangeOrdersGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetGeSellOrderGrandexchangeOrdersIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "items"
				origElem := elem
				if l := len("items"); len(elem) >= l && elem[0:l] == "items" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAllItemsItemsGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "code"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetItemItemsCodeGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "leaderboard/"
				origElem := elem
				if l := len("leaderboard/"); len(elem) >= l && elem[0:l] == "leaderboard/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "accounts"
					origElem := elem
					if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetAccountsLeaderboardLeaderboardAccountsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'c': // Prefix: "characters"
					origElem := elem
					if l := len("characters"); len(elem) >= l && elem[0:l] == "characters" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetCharactersLeaderboardLeaderboardCharactersGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "m"
				origElem := elem
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "aps"
					origElem := elem
					if l := len("aps"); len(elem) >= l && elem[0:l] == "aps" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllMapsMapsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "x"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "y"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetMapMapsXYGetRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "onsters"
					origElem := elem
					if l := len("onsters"); len(elem) >= l && elem[0:l] == "onsters" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllMonstersMonstersGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "code"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetMonsterMonstersCodeGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'y': // Prefix: "y/"
					origElem := elem
					if l := len("y/"); len(elem) >= l && elem[0:l] == "y/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "bank"
						origElem := elem
						if l := len("bank"); len(elem) >= l && elem[0:l] == "bank" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetBankDetailsMyBankGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/items"
							origElem := elem
							if l := len("/items"); len(elem) >= l && elem[0:l] == "/items" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBankItemsMyBankItemsGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'c': // Prefix: "cha"
						origElem := elem
						if l := len("cha"); len(elem) >= l && elem[0:l] == "cha" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'n': // Prefix: "nge_password"
							origElem := elem
							if l := len("nge_password"); len(elem) >= l && elem[0:l] == "nge_password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleChangePasswordMyChangePasswordPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "racters"
							origElem := elem
							if l := len("racters"); len(elem) >= l && elem[0:l] == "racters" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetMyCharactersMyCharactersGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'd': // Prefix: "details"
						origElem := elem
						if l := len("details"); len(elem) >= l && elem[0:l] == "details" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAccountDetailsMyDetailsGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'g': // Prefix: "grandexchange/"
						origElem := elem
						if l := len("grandexchange/"); len(elem) >= l && elem[0:l] == "grandexchange/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "history"
							origElem := elem
							if l := len("history"); len(elem) >= l && elem[0:l] == "history" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetGeSellHistoryMyGrandexchangeHistoryGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'o': // Prefix: "orders"
							origElem := elem
							if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetGeSellOrdersMyGrandexchangeOrdersGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'l': // Prefix: "logs"
						origElem := elem
						if l := len("logs"); len(elem) >= l && elem[0:l] == "logs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAllCharactersLogsMyLogsGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "name"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/action/"
						origElem := elem
						if l := len("/action/"); len(elem) >= l && elem[0:l] == "/action/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bank/"
							origElem := elem
							if l := len("bank/"); len(elem) >= l && elem[0:l] == "bank/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "buy_expansion"
								origElem := elem
								if l := len("buy_expansion"); len(elem) >= l && elem[0:l] == "buy_expansion" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionBuyBankExpansionMyNameActionBankBuyExpansionPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'd': // Prefix: "deposit"
								origElem := elem
								if l := len("deposit"); len(elem) >= l && elem[0:l] == "deposit" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleActionDepositBankMyNameActionBankDepositPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/gold"
									origElem := elem
									if l := len("/gold"); len(elem) >= l && elem[0:l] == "/gold" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionDepositBankGoldMyNameActionBankDepositGoldPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'w': // Prefix: "withdraw"
								origElem := elem
								if l := len("withdraw"); len(elem) >= l && elem[0:l] == "withdraw" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleActionWithdrawBankMyNameActionBankWithdrawPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/gold"
									origElem := elem
									if l := len("/gold"); len(elem) >= l && elem[0:l] == "/gold" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'c': // Prefix: "crafting"
							origElem := elem
							if l := len("crafting"); len(elem) >= l && elem[0:l] == "crafting" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleActionCraftingMyNameActionCraftingPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'd': // Prefix: "delete"
							origElem := elem
							if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleActionDeleteItemMyNameActionDeletePostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'e': // Prefix: "equip"
							origElem := elem
							if l := len("equip"); len(elem) >= l && elem[0:l] == "equip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleActionEquipItemMyNameActionEquipPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'f': // Prefix: "fight"
							origElem := elem
							if l := len("fight"); len(elem) >= l && elem[0:l] == "fight" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleActionFightMyNameActionFightPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'g': // Prefix: "g"
							origElem := elem
							if l := len("g"); len(elem) >= l && elem[0:l] == "g" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "athering"
								origElem := elem
								if l := len("athering"); len(elem) >= l && elem[0:l] == "athering" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionGatheringMyNameActionGatheringPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "randexchange/"
								origElem := elem
								if l := len("randexchange/"); len(elem) >= l && elem[0:l] == "randexchange/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "buy"
									origElem := elem
									if l := len("buy"); len(elem) >= l && elem[0:l] == "buy" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionGeBuyItemMyNameActionGrandexchangeBuyPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 'c': // Prefix: "cancel"
									origElem := elem
									if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "sell"
									origElem := elem
									if l := len("sell"); len(elem) >= l && elem[0:l] == "sell" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'm': // Prefix: "move"
							origElem := elem
							if l := len("move"); len(elem) >= l && elem[0:l] == "move" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleActionMoveMyNameActionMovePostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "re"
							origElem := elem
							if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "cycling"
								origElem := elem
								if l := len("cycling"); len(elem) >= l && elem[0:l] == "cycling" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionRecyclingMyNameActionRecyclingPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "st"
								origElem := elem
								if l := len("st"); len(elem) >= l && elem[0:l] == "st" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionRestMyNameActionRestPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "task/"
							origElem := elem
							if l := len("task/"); len(elem) >= l && elem[0:l] == "task/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "c"
								origElem := elem
								if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ancel"
									origElem := elem
									if l := len("ancel"); len(elem) >= l && elem[0:l] == "ancel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionTaskCancelMyNameActionTaskCancelPostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 'o': // Prefix: "omplete"
									origElem := elem
									if l := len("omplete"); len(elem) >= l && elem[0:l] == "omplete" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleActionCompleteTaskMyNameActionTaskCompletePostRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'e': // Prefix: "exchange"
								origElem := elem
								if l := len("exchange"); len(elem) >= l && elem[0:l] == "exchange" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionTaskExchangeMyNameActionTaskExchangePostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'n': // Prefix: "new"
								origElem := elem
								if l := len("new"); len(elem) >= l && elem[0:l] == "new" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionAcceptNewTaskMyNameActionTaskNewPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "trade"
								origElem := elem
								if l := len("trade"); len(elem) >= l && elem[0:l] == "trade" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionTaskTradeMyNameActionTaskTradePostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'u': // Prefix: "u"
							origElem := elem
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'n': // Prefix: "nequip"
								origElem := elem
								if l := len("nequip"); len(elem) >= l && elem[0:l] == "nequip" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionUnequipItemMyNameActionUnequipPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "se"
								origElem := elem
								if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleActionUseItemMyNameActionUsePostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "resources"
				origElem := elem
				if l := len("resources"); len(elem) >= l && elem[0:l] == "resources" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAllResourcesResourcesGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "code"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetResourceResourcesCodeGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "asks/"
					origElem := elem
					if l := len("asks/"); len(elem) >= l && elem[0:l] == "asks/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "list"
						origElem := elem
						if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAllTasksTasksListGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "code"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetTaskTasksListCodeGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rewards"
						origElem := elem
						if l := len("rewards"); len(elem) >= l && elem[0:l] == "rewards" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAllTasksRewardsTasksRewardsGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "code"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetTasksRewardTasksRewardsCodeGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "oken"
					origElem := elem
					if l := len("oken"); len(elem) >= l && elem[0:l] == "oken" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleGenerateTokenTokenPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "GET":
					r.name = "GetStatusGet"
					r.summary = "Get Status"
					r.operationID = "get_status__get"
					r.pathPattern = "/"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case 'a': // Prefix: "ac"
				origElem := elem
				if l := len("ac"); len(elem) >= l && elem[0:l] == "ac" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "counts/"
					origElem := elem
					if l := len("counts/"); len(elem) >= l && elem[0:l] == "counts/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "create"
						origElem := elem
						if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "CreateAccountAccountsCreatePost"
								r.summary = "Create Account"
								r.operationID = "create_account_accounts_create_post"
								r.pathPattern = "/accounts/create"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "account"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAccountAccountsAccountGet"
							r.summary = "Get Account"
							r.operationID = "get_account_accounts__account__get"
							r.pathPattern = "/accounts/{account}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/achievements"
						origElem := elem
						if l := len("/achievements"); len(elem) >= l && elem[0:l] == "/achievements" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetAccountAchievementsAccountsAccountAchievementsGet"
								r.summary = "Get Account Achievements"
								r.operationID = "get_account_achievements_accounts__account__achievements_get"
								r.pathPattern = "/accounts/{account}/achievements"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'h': // Prefix: "hievements"
					origElem := elem
					if l := len("hievements"); len(elem) >= l && elem[0:l] == "hievements" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllAchievementsAchievementsGet"
							r.summary = "Get All Achievements"
							r.operationID = "get_all_achievements_achievements_get"
							r.pathPattern = "/achievements"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "code"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetAchievementAchievementsCodeGet"
								r.summary = "Get Achievement"
								r.operationID = "get_achievement_achievements__code__get"
								r.pathPattern = "/achievements/{code}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "characters/"
				origElem := elem
				if l := len("characters/"); len(elem) >= l && elem[0:l] == "characters/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "create"
					origElem := elem
					if l := len("create"); len(elem) >= l && elem[0:l] == "create" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "CreateCharacterCharactersCreatePost"
							r.summary = "Create Character"
							r.operationID = "create_character_characters_create_post"
							r.pathPattern = "/characters/create"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'd': // Prefix: "delete"
					origElem := elem
					if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "DeleteCharacterCharactersDeletePost"
							r.summary = "Delete Character"
							r.operationID = "delete_character_characters_delete_post"
							r.pathPattern = "/characters/delete"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}
				// Param: "name"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetCharacterCharactersNameGet"
						r.summary = "Get Character"
						r.operationID = "get_character_characters__name__get"
						r.pathPattern = "/characters/{name}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'e': // Prefix: "events"
				origElem := elem
				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAllEventsEventsGet"
						r.summary = "Get All Events"
						r.operationID = "get_all_events_events_get"
						r.pathPattern = "/events"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/active"
					origElem := elem
					if l := len("/active"); len(elem) >= l && elem[0:l] == "/active" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetAllActiveEventsEventsActiveGet"
							r.summary = "Get All Active Events"
							r.operationID = "get_all_active_events_events_active_get"
							r.pathPattern = "/events/active"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'g': // Prefix: "grandexchange/"
				origElem := elem
				if l := len("grandexchange/"); len(elem) >= l && elem[0:l] == "grandexchange/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "history/"
					origElem := elem
					if l := len("history/"); len(elem) >= l && elem[0:l] == "history/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "code"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetGeSellHistoryGrandexchangeHistoryCodeGet"
							r.summary = "Get Ge Sell History"
							r.operationID = "get_ge_sell_history_grandexchange_history__code__get"
							r.pathPattern = "/grandexchange/history/{code}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'o': // Prefix: "orders"
					origElem := elem
					if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetGeSellOrdersGrandexchangeOrdersGet"
							r.summary = "Get Ge Sell Orders"
							r.operationID = "get_ge_sell_orders_grandexchange_orders_get"
							r.pathPattern = "/grandexchange/orders"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetGeSellOrderGrandexchangeOrdersIDGet"
								r.summary = "Get Ge Sell Order"
								r.operationID = "get_ge_sell_order_grandexchange_orders__id__get"
								r.pathPattern = "/grandexchange/orders/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "items"
				origElem := elem
				if l := len("items"); len(elem) >= l && elem[0:l] == "items" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAllItemsItemsGet"
						r.summary = "Get All Items"
						r.operationID = "get_all_items_items_get"
						r.pathPattern = "/items"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "code"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetItemItemsCodeGet"
							r.summary = "Get Item"
							r.operationID = "get_item_items__code__get"
							r.pathPattern = "/items/{code}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "leaderboard/"
				origElem := elem
				if l := len("leaderboard/"); len(elem) >= l && elem[0:l] == "leaderboard/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "accounts"
					origElem := elem
					if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetAccountsLeaderboardLeaderboardAccountsGet"
							r.summary = "Get Accounts Leaderboard"
							r.operationID = "get_accounts_leaderboard_leaderboard_accounts_get"
							r.pathPattern = "/leaderboard/accounts"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'c': // Prefix: "characters"
					origElem := elem
					if l := len("characters"); len(elem) >= l && elem[0:l] == "characters" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetCharactersLeaderboardLeaderboardCharactersGet"
							r.summary = "Get Characters Leaderboard"
							r.operationID = "get_characters_leaderboard_leaderboard_characters_get"
							r.pathPattern = "/leaderboard/characters"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "m"
				origElem := elem
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "aps"
					origElem := elem
					if l := len("aps"); len(elem) >= l && elem[0:l] == "aps" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllMapsMapsGet"
							r.summary = "Get All Maps"
							r.operationID = "get_all_maps_maps_get"
							r.pathPattern = "/maps"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "x"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "y"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetMapMapsXYGet"
									r.summary = "Get Map"
									r.operationID = "get_map_maps__x___y__get"
									r.pathPattern = "/maps/{x}/{y}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "onsters"
					origElem := elem
					if l := len("onsters"); len(elem) >= l && elem[0:l] == "onsters" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllMonstersMonstersGet"
							r.summary = "Get All Monsters"
							r.operationID = "get_all_monsters_monsters_get"
							r.pathPattern = "/monsters"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "code"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetMonsterMonstersCodeGet"
								r.summary = "Get Monster"
								r.operationID = "get_monster_monsters__code__get"
								r.pathPattern = "/monsters/{code}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'y': // Prefix: "y/"
					origElem := elem
					if l := len("y/"); len(elem) >= l && elem[0:l] == "y/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "bank"
						origElem := elem
						if l := len("bank"); len(elem) >= l && elem[0:l] == "bank" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetBankDetailsMyBankGet"
								r.summary = "Get Bank Details"
								r.operationID = "get_bank_details_my_bank_get"
								r.pathPattern = "/my/bank"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/items"
							origElem := elem
							if l := len("/items"); len(elem) >= l && elem[0:l] == "/items" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetBankItemsMyBankItemsGet"
									r.summary = "Get Bank Items"
									r.operationID = "get_bank_items_my_bank_items_get"
									r.pathPattern = "/my/bank/items"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'c': // Prefix: "cha"
						origElem := elem
						if l := len("cha"); len(elem) >= l && elem[0:l] == "cha" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'n': // Prefix: "nge_password"
							origElem := elem
							if l := len("nge_password"); len(elem) >= l && elem[0:l] == "nge_password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ChangePasswordMyChangePasswordPost"
									r.summary = "Change Password"
									r.operationID = "change_password_my_change_password_post"
									r.pathPattern = "/my/change_password"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "racters"
							origElem := elem
							if l := len("racters"); len(elem) >= l && elem[0:l] == "racters" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetMyCharactersMyCharactersGet"
									r.summary = "Get My Characters"
									r.operationID = "get_my_characters_my_characters_get"
									r.pathPattern = "/my/characters"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'd': // Prefix: "details"
						origElem := elem
						if l := len("details"); len(elem) >= l && elem[0:l] == "details" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetAccountDetailsMyDetailsGet"
								r.summary = "Get Account Details"
								r.operationID = "get_account_details_my_details_get"
								r.pathPattern = "/my/details"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'g': // Prefix: "grandexchange/"
						origElem := elem
						if l := len("grandexchange/"); len(elem) >= l && elem[0:l] == "grandexchange/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "history"
							origElem := elem
							if l := len("history"); len(elem) >= l && elem[0:l] == "history" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetGeSellHistoryMyGrandexchangeHistoryGet"
									r.summary = "Get Ge Sell History"
									r.operationID = "get_ge_sell_history_my_grandexchange_history_get"
									r.pathPattern = "/my/grandexchange/history"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'o': // Prefix: "orders"
							origElem := elem
							if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetGeSellOrdersMyGrandexchangeOrdersGet"
									r.summary = "Get Ge Sell Orders"
									r.operationID = "get_ge_sell_orders_my_grandexchange_orders_get"
									r.pathPattern = "/my/grandexchange/orders"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'l': // Prefix: "logs"
						origElem := elem
						if l := len("logs"); len(elem) >= l && elem[0:l] == "logs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetAllCharactersLogsMyLogsGet"
								r.summary = "Get All Characters Logs"
								r.operationID = "get_all_characters_logs_my_logs_get"
								r.pathPattern = "/my/logs"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "name"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/action/"
						origElem := elem
						if l := len("/action/"); len(elem) >= l && elem[0:l] == "/action/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bank/"
							origElem := elem
							if l := len("bank/"); len(elem) >= l && elem[0:l] == "bank/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "buy_expansion"
								origElem := elem
								if l := len("buy_expansion"); len(elem) >= l && elem[0:l] == "buy_expansion" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionBuyBankExpansionMyNameActionBankBuyExpansionPost"
										r.summary = "Action Buy Bank Expansion"
										r.operationID = "action_buy_bank_expansion_my__name__action_bank_buy_expansion_post"
										r.pathPattern = "/my/{name}/action/bank/buy_expansion"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'd': // Prefix: "deposit"
								origElem := elem
								if l := len("deposit"); len(elem) >= l && elem[0:l] == "deposit" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "ActionDepositBankMyNameActionBankDepositPost"
										r.summary = "Action Deposit Bank"
										r.operationID = "action_deposit_bank_my__name__action_bank_deposit_post"
										r.pathPattern = "/my/{name}/action/bank/deposit"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/gold"
									origElem := elem
									if l := len("/gold"); len(elem) >= l && elem[0:l] == "/gold" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionDepositBankGoldMyNameActionBankDepositGoldPost"
											r.summary = "Action Deposit Bank Gold"
											r.operationID = "action_deposit_bank_gold_my__name__action_bank_deposit_gold_post"
											r.pathPattern = "/my/{name}/action/bank/deposit/gold"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'w': // Prefix: "withdraw"
								origElem := elem
								if l := len("withdraw"); len(elem) >= l && elem[0:l] == "withdraw" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "ActionWithdrawBankMyNameActionBankWithdrawPost"
										r.summary = "Action Withdraw Bank"
										r.operationID = "action_withdraw_bank_my__name__action_bank_withdraw_post"
										r.pathPattern = "/my/{name}/action/bank/withdraw"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/gold"
									origElem := elem
									if l := len("/gold"); len(elem) >= l && elem[0:l] == "/gold" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost"
											r.summary = "Action Withdraw Bank Gold"
											r.operationID = "action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post"
											r.pathPattern = "/my/{name}/action/bank/withdraw/gold"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'c': // Prefix: "crafting"
							origElem := elem
							if l := len("crafting"); len(elem) >= l && elem[0:l] == "crafting" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ActionCraftingMyNameActionCraftingPost"
									r.summary = "Action Crafting"
									r.operationID = "action_crafting_my__name__action_crafting_post"
									r.pathPattern = "/my/{name}/action/crafting"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'd': // Prefix: "delete"
							origElem := elem
							if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ActionDeleteItemMyNameActionDeletePost"
									r.summary = "Action Delete Item"
									r.operationID = "action_delete_item_my__name__action_delete_post"
									r.pathPattern = "/my/{name}/action/delete"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'e': // Prefix: "equip"
							origElem := elem
							if l := len("equip"); len(elem) >= l && elem[0:l] == "equip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ActionEquipItemMyNameActionEquipPost"
									r.summary = "Action Equip Item"
									r.operationID = "action_equip_item_my__name__action_equip_post"
									r.pathPattern = "/my/{name}/action/equip"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'f': // Prefix: "fight"
							origElem := elem
							if l := len("fight"); len(elem) >= l && elem[0:l] == "fight" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ActionFightMyNameActionFightPost"
									r.summary = "Action Fight"
									r.operationID = "action_fight_my__name__action_fight_post"
									r.pathPattern = "/my/{name}/action/fight"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'g': // Prefix: "g"
							origElem := elem
							if l := len("g"); len(elem) >= l && elem[0:l] == "g" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "athering"
								origElem := elem
								if l := len("athering"); len(elem) >= l && elem[0:l] == "athering" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionGatheringMyNameActionGatheringPost"
										r.summary = "Action Gathering"
										r.operationID = "action_gathering_my__name__action_gathering_post"
										r.pathPattern = "/my/{name}/action/gathering"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "randexchange/"
								origElem := elem
								if l := len("randexchange/"); len(elem) >= l && elem[0:l] == "randexchange/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "buy"
									origElem := elem
									if l := len("buy"); len(elem) >= l && elem[0:l] == "buy" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionGeBuyItemMyNameActionGrandexchangeBuyPost"
											r.summary = "Action Ge Buy Item"
											r.operationID = "action_ge_buy_item_my__name__action_grandexchange_buy_post"
											r.pathPattern = "/my/{name}/action/grandexchange/buy"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'c': // Prefix: "cancel"
									origElem := elem
									if l := len("cancel"); len(elem) >= l && elem[0:l] == "cancel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost"
											r.summary = "Action Ge Cancel Sell Order"
											r.operationID = "action_ge_cancel_sell_order_my__name__action_grandexchange_cancel_post"
											r.pathPattern = "/my/{name}/action/grandexchange/cancel"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "sell"
									origElem := elem
									if l := len("sell"); len(elem) >= l && elem[0:l] == "sell" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost"
											r.summary = "Action Ge Create Sell Order"
											r.operationID = "action_ge_create_sell_order_my__name__action_grandexchange_sell_post"
											r.pathPattern = "/my/{name}/action/grandexchange/sell"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'm': // Prefix: "move"
							origElem := elem
							if l := len("move"); len(elem) >= l && elem[0:l] == "move" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ActionMoveMyNameActionMovePost"
									r.summary = "Action Move"
									r.operationID = "action_move_my__name__action_move_post"
									r.pathPattern = "/my/{name}/action/move"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "re"
							origElem := elem
							if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "cycling"
								origElem := elem
								if l := len("cycling"); len(elem) >= l && elem[0:l] == "cycling" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionRecyclingMyNameActionRecyclingPost"
										r.summary = "Action Recycling"
										r.operationID = "action_recycling_my__name__action_recycling_post"
										r.pathPattern = "/my/{name}/action/recycling"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "st"
								origElem := elem
								if l := len("st"); len(elem) >= l && elem[0:l] == "st" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionRestMyNameActionRestPost"
										r.summary = "Action Rest"
										r.operationID = "action_rest_my__name__action_rest_post"
										r.pathPattern = "/my/{name}/action/rest"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "task/"
							origElem := elem
							if l := len("task/"); len(elem) >= l && elem[0:l] == "task/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "c"
								origElem := elem
								if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ancel"
									origElem := elem
									if l := len("ancel"); len(elem) >= l && elem[0:l] == "ancel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionTaskCancelMyNameActionTaskCancelPost"
											r.summary = "Action Task Cancel"
											r.operationID = "action_task_cancel_my__name__action_task_cancel_post"
											r.pathPattern = "/my/{name}/action/task/cancel"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'o': // Prefix: "omplete"
									origElem := elem
									if l := len("omplete"); len(elem) >= l && elem[0:l] == "omplete" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = "ActionCompleteTaskMyNameActionTaskCompletePost"
											r.summary = "Action Complete Task"
											r.operationID = "action_complete_task_my__name__action_task_complete_post"
											r.pathPattern = "/my/{name}/action/task/complete"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'e': // Prefix: "exchange"
								origElem := elem
								if l := len("exchange"); len(elem) >= l && elem[0:l] == "exchange" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionTaskExchangeMyNameActionTaskExchangePost"
										r.summary = "Action Task Exchange"
										r.operationID = "action_task_exchange_my__name__action_task_exchange_post"
										r.pathPattern = "/my/{name}/action/task/exchange"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'n': // Prefix: "new"
								origElem := elem
								if l := len("new"); len(elem) >= l && elem[0:l] == "new" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionAcceptNewTaskMyNameActionTaskNewPost"
										r.summary = "Action Accept New Task"
										r.operationID = "action_accept_new_task_my__name__action_task_new_post"
										r.pathPattern = "/my/{name}/action/task/new"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "trade"
								origElem := elem
								if l := len("trade"); len(elem) >= l && elem[0:l] == "trade" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionTaskTradeMyNameActionTaskTradePost"
										r.summary = "Action Task Trade"
										r.operationID = "action_task_trade_my__name__action_task_trade_post"
										r.pathPattern = "/my/{name}/action/task/trade"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'u': // Prefix: "u"
							origElem := elem
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'n': // Prefix: "nequip"
								origElem := elem
								if l := len("nequip"); len(elem) >= l && elem[0:l] == "nequip" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionUnequipItemMyNameActionUnequipPost"
										r.summary = "Action Unequip Item"
										r.operationID = "action_unequip_item_my__name__action_unequip_post"
										r.pathPattern = "/my/{name}/action/unequip"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "se"
								origElem := elem
								if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ActionUseItemMyNameActionUsePost"
										r.summary = "Action Use Item"
										r.operationID = "action_use_item_my__name__action_use_post"
										r.pathPattern = "/my/{name}/action/use"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "resources"
				origElem := elem
				if l := len("resources"); len(elem) >= l && elem[0:l] == "resources" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAllResourcesResourcesGet"
						r.summary = "Get All Resources"
						r.operationID = "get_all_resources_resources_get"
						r.pathPattern = "/resources"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "code"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetResourceResourcesCodeGet"
							r.summary = "Get Resource"
							r.operationID = "get_resource_resources__code__get"
							r.pathPattern = "/resources/{code}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "asks/"
					origElem := elem
					if l := len("asks/"); len(elem) >= l && elem[0:l] == "asks/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "list"
						origElem := elem
						if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetAllTasksTasksListGet"
								r.summary = "Get All Tasks"
								r.operationID = "get_all_tasks_tasks_list_get"
								r.pathPattern = "/tasks/list"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "code"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetTaskTasksListCodeGet"
									r.summary = "Get Task"
									r.operationID = "get_task_tasks_list__code__get"
									r.pathPattern = "/tasks/list/{code}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rewards"
						origElem := elem
						if l := len("rewards"); len(elem) >= l && elem[0:l] == "rewards" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetAllTasksRewardsTasksRewardsGet"
								r.summary = "Get All Tasks Rewards"
								r.operationID = "get_all_tasks_rewards_tasks_rewards_get"
								r.pathPattern = "/tasks/rewards"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "code"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetTasksRewardTasksRewardsCodeGet"
									r.summary = "Get Tasks Reward"
									r.operationID = "get_tasks_reward_tasks_rewards__code__get"
									r.pathPattern = "/tasks/rewards/{code}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "oken"
					origElem := elem
					if l := len("oken"); len(elem) >= l && elem[0:l] == "oken" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "GenerateTokenTokenPost"
							r.summary = "Generate Token"
							r.operationID = "generate_token_token_post"
							r.pathPattern = "/token"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
